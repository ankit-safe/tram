{
    "title": "The Ad Injection WordPress plugin through 1.2.0.19 does not properly sanitize the body of the adverts injected into the pages, allowing a high privileged user (Admin+) to inject arbitrary HTML or javascript even with unfiltered_html disallowed, leading to a stored cross-site scripting (XSS) vulnerability. Further it is also possible to inject PHP code, leading to a Remote Code execution (RCE) vulnerability, even if the DISALLOW_FILE_EDIT and DISALLOW_FILE_MOD constants are both set.",
    "score": 7.2,
    "severity": "HIGH",
    "cwe_id": "CWE-94",
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
    "cpe_match": [
        "cpe:2.3:a:ad_injection_project:ad_injection:*:*:*:*:*:wordpress:*:*"
    ],
    "cve_source": [
        "NVD"
    ],
    "ttpMapping": [
        {
            "techniqueId": "T1055",
            "confidence": "2.3",
            "techniqueName": "Process Injection"
        },
        {
            "techniqueId": "T1059",
            "confidence": "2.1",
            "techniqueName": "Command and Scripting Interpreter"
        },
        {
            "techniqueId": "T1190",
            "confidence": "2.1",
            "techniqueName": "Exploit Public-Facing Application"
        },
        {
            "techniqueId": "T1486",
            "confidence": "2.1",
            "techniqueName": "Data Encrypted for Impact"
        },
        {
            "techniqueId": "T1037",
            "confidence": "2.0",
            "techniqueName": "Boot or Logon Initialization Scripts"
        },
        {
            "techniqueId": "T1082",
            "confidence": "2.1",
            "techniqueName": "System Information Discovery"
        },
        {
            "techniqueId": "T1499",
            "confidence": "2.0",
            "techniqueName": "Endpoint Denial of Service"
        }
    ]
}
