{
    "title": "angular-expressions is angulars nicest part extracted as a standalone module for the browser and node. In angular-expressions before version 1.1.2 there is a vulnerability which allows Remote Code Execution if you call expressions.compile(userControlledInput) where userControlledInput is text that comes from user input. The security of the package could be bypassed by using a more complex payload, using a .constructor.constructor technique. In terms of impact: If running angular-expressions in the browser, an attacker could run any browser script when the application code calls expressions.compile(userControlledInput). If running angular-expressions on the server, an attacker could run any Javascript expression, thus gaining Remote Code Execution. This is fixed in version 1.1.2 of angular-expressions A temporary workaround might be either to disable user-controlled input that will be fed into angular-expressions in your application or allow only following characters in the userControlledInput.",
    "score": 8.8,
    "severity": "HIGH",
    "cwe_id": "CWE-94",
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
    "cpe_match": [
        "cpe:2.3:a:peerigon:angular-expressions:*:*:*:*:*:node.js:*:*"
    ],
    "cve_source": [
        "NVD"
    ],
    "ttpMapping": [
        {
            "technique_id": "T1115",
            "confidence": "10.2",
            "technique_name": "Clipboard Data"
        },
        {
            "technique_id": "T1129",
            "confidence": "12.6",
            "technique_name": "Shared Modules"
        },
        {
            "technique_id": "T1027",
            "confidence": "62.5",
            "technique_name": "Obfuscated Files or Information"
        }
    ]
}
