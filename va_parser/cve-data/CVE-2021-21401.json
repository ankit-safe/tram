{
    "title": "Nanopb is a small code-size Protocol Buffers implementation in ansi C. In Nanopb before versions 0.3.9.8 and 0.4.5, decoding a specifically formed message can cause invalid `free()` or `realloc()` calls if the message type contains an `oneof` field, and the `oneof` directly contains both a pointer field and a non-pointer field. If the message data first contains the non-pointer field and then the pointer field, the data of the non-pointer field is incorrectly treated as if it was a pointer value. Such message data rarely occurs in normal messages, but it is a concern when untrusted data is parsed. This has been fixed in versions 0.3.9.8 and 0.4.5. See referenced GitHub Security Advisory for more information including workarounds.",
    "score": 7.1,
    "severity": "HIGH",
    "cwe_id": "CWE-763",
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:L",
    "cpe_match": [
        "cpe:2.3:a:nanopb_project:nanopb:*:*:*:*:*:*:*:*",
        "cpe:2.3:a:nanopb_project:nanopb:*:*:*:*:*:*:*:*"
    ],
    "cve_source": [
        "NVD"
    ],
    "ttpMapping": [
        {
            "technique_id": "T1082",
            "confidence": "14.4",
            "technique_name": "System Information Discovery"
        },
        {
            "technique_id": "T1486",
            "confidence": "15.5",
            "technique_name": "Data Encrypted for Impact"
        },
        {
            "technique_id": "T1057",
            "confidence": "17.6",
            "technique_name": "Process Discovery"
        },
        {
            "technique_id": "T1115",
            "confidence": "14.5",
            "technique_name": "Clipboard Data"
        }
    ]
}
