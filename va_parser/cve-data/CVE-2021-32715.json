{
    "title": "hyper is an HTTP library for rust. hypers HTTP/1 server code had a flaw that incorrectly parses and accepts requests with a `Content-Length` header with a prefixed plus sign, when it should have been rejected as illegal. This combined with an upstream HTTP proxy that doesnt parse such `Content-Length` headers, but forwards them, can result in request smuggling or desync attacks. The flaw exists in all prior versions of hyper prior to 0.14.10, if built with `rustc` v1.5.0 or newer. The vulnerability is patched in hyper version 0.14.10. Two workarounds exist: One may reject requests manually that contain a plus sign prefix in the `Content-Length` header or ensure any upstream proxy handles `Content-Length` headers with a plus sign prefix.",
    "score": 5.3,
    "severity": "MEDIUM",
    "cwe_id": "CWE-444",
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cpe_match": [
        "cpe:2.3:a:hyper:hyper:*:*:*:*:*:rust:*:*"
    ],
    "cve_source": [
        "NVD"
    ],
    "ttpMapping": [
        {
            "technique_id": "T1071",
            "confidence": "25.5",
            "technique_name": "Application Layer Protocol"
        },
        {
            "technique_id": "T1113",
            "confidence": "22.9",
            "technique_name": "Screen Capture"
        },
        {
            "technique_id": "T1489",
            "confidence": "22.9",
            "technique_name": "Service Stop"
        },
        {
            "technique_id": "T1071",
            "confidence": "44.0",
            "technique_name": "Application Layer Protocol"
        },
        {
            "technique_id": "T1204",
            "confidence": "36.5",
            "technique_name": "User Execution"
        },
        {
            "technique_id": "T1489",
            "confidence": "18.8",
            "technique_name": "Service Stop"
        }
    ]
}
