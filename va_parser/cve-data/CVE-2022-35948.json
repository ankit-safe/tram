{
    "title": "undici is an HTTP/1.1 client, written from scratch for Node.js.`=< undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from undici const unsanitizedContentTypeInput = application/jsonrnrnGET /foo2 HTTP/1.1 await request(http://localhost:3000, { method: GET, headers: { content-type: unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround.",
    "score": 5.3,
    "severity": "MEDIUM",
    "cwe_id": "NVD-CWE-Other",
    "cvss_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
    "cpe_match": [
        "cpe:2.3:a:nodejs:undici:*:*:*:*:*:node.js:*:*"
    ],
    "cve_source": [
        "NVD"
    ],
    "ttpMapping": [
        {
            "techniqueId": "T1003",
            "confidence": "4.3",
            "techniqueName": "OS Credential Dumping"
        },
        {
            "techniqueId": "T1033",
            "confidence": "5.4",
            "techniqueName": "System Owner/User Discovery"
        },
        {
            "techniqueId": "T1071",
            "confidence": "11.3",
            "techniqueName": "Application Layer Protocol"
        },
        {
            "techniqueId": "T1486",
            "confidence": "2.5",
            "techniqueName": "Data Encrypted for Impact"
        },
        {
            "techniqueId": "T1505.003",
            "confidence": "53.1",
            "techniqueName": "Web Shell"
        },
        {
            "techniqueId": "T1071",
            "confidence": "100.0",
            "techniqueName": "Application Layer Protocol"
        },
        {
            "techniqueId": "T1033",
            "confidence": "4.2",
            "techniqueName": "System Owner/User Discovery"
        },
        {
            "techniqueId": "T1036",
            "confidence": "3.7",
            "techniqueName": "Masquerading"
        },
        {
            "techniqueId": "T1056",
            "confidence": "12.9",
            "techniqueName": "Input Capture"
        },
        {
            "techniqueId": "T1056.004",
            "confidence": "2.0",
            "techniqueName": "Credential API Hooking"
        },
        {
            "techniqueId": "T1057",
            "confidence": "2.6",
            "techniqueName": "Process Discovery"
        },
        {
            "techniqueId": "T1087",
            "confidence": "6.0",
            "techniqueName": "Account Discovery"
        },
        {
            "techniqueId": "T1106",
            "confidence": "2.5",
            "techniqueName": "Native API"
        },
        {
            "techniqueId": "T1115",
            "confidence": "2.6",
            "techniqueName": "Clipboard Data"
        },
        {
            "techniqueId": "T1482",
            "confidence": "2.1",
            "techniqueName": "Domain Trust Discovery"
        }
    ]
}
