{
    "title": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty (io.netty:netty-codec-http2) before version 4.1.60.Final there is a vulnerability that enables request smuggling. If a Content-Length header is present in the original HTTP/2 request, the field is not validated by `Http2MultiplexHandler` as it is propagated up. This is fine as long as the request is not proxied through as HTTP/1.1. If the request comes in as an HTTP/2 stream, gets converted into the HTTP/1.1 domain objects (`HttpRequest`, `HttpContent`, etc.) via `Http2StreamFrameToHttpObjectCodec `and then sent up to the child channels pipeline and proxied through a remote peer as HTTP/1.1 this may result in request smuggling. In a proxy case, users may assume the content-length is validated somehow, which is not the case. If the request is forwarded to a backend channel that is a HTTP/1.1 connection, the Content-Length now has meaning and needs to be checked. An attacker can smuggle requests inside the body as it gets downgraded from HTTP/2 to HTTP/1.1. For an example attack refer to the linked GitHub Advisory. Users are only affected if all of this is true: `HTTP2MultiplexCodec` or `Http2FrameCodec` is used, `Http2StreamFrameToHttpObjectCodec` is used to convert to HTTP/1.1 objects, and these HTTP/1.1 objects are forwarded to another remote peer. This has been patched in 4.1.60.Final As a workaround, the user can do the validation by themselves by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.",
    "score": 5.9,
    "severity": "MEDIUM",
    "cwe_id": "CWE-444",
    "cvss_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
    "cpe_match": [
        "cpe:2.3:a:netty:netty:*:*:*:*:*:*:*:*",
        "cpe:2.3:a:netapp:oncommand_workflow_automation:-:*:*:*:*:*:*:*",
        "cpe:2.3:a:netapp:oncommand_api_services:-:*:*:*:*:*:*:*",
        "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*",
        "cpe:2.3:a:quarkus:quarkus:*:*:*:*:*:*:*:*",
        "cpe:2.3:a:apache:kudu:*:*:*:*:*:*:*:*",
        "cpe:2.3:a:apache:zookeeper:3.5.9:*:*:*:*:*:*:*",
        "cpe:2.3:a:oracle:communications_cloud_native_core_policy:1.14.0:*:*:*:*:*:*:*"
    ],
    "cve_source": [
        "NVD"
    ],
    "ttpMapping": [
        {
            "technique_id": "T1123",
            "confidence": "19.0",
            "technique_name": "Audio Capture"
        },
        {
            "technique_id": "T1071",
            "confidence": "46.0",
            "technique_name": "Application Layer Protocol"
        },
        {
            "technique_id": "T1071",
            "confidence": "71.5",
            "technique_name": "Application Layer Protocol"
        },
        {
            "technique_id": "T1071",
            "confidence": "99.9",
            "technique_name": "Application Layer Protocol"
        },
        {
            "technique_id": "T1071",
            "confidence": "89.7",
            "technique_name": "Application Layer Protocol"
        },
        {
            "technique_id": "T1071",
            "confidence": "22.2",
            "technique_name": "Application Layer Protocol"
        },
        {
            "technique_id": "T1057",
            "confidence": "16.9",
            "technique_name": "Process Discovery"
        },
        {
            "technique_id": "T1213",
            "confidence": "12.4",
            "technique_name": "Data from Information Repositories"
        },
        {
            "technique_id": "T1059",
            "confidence": "18.9",
            "technique_name": "Command and Scripting Interpreter"
        },
        {
            "technique_id": "T1543",
            "confidence": "14.3",
            "technique_name": "Create or Modify System Process"
        }
    ]
}
