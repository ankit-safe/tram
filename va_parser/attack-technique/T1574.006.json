{
    "id": "T1574.006",
    "name": "Dynamic Linker Hijacking",
    "x_mitre_is_subtechnique": true,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as <code>LD_PRELOAD</code> on Linux or <code>DYLD_INSERT_LIBRARIES</code> on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.(Citation: Baeldung LD_PRELOAD)\n\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the <code>export</code> command, <code>setenv</code> function, or <code>putenv</code> function. Adversaries can also leverage [Dynamic Linker Hijacking](https://attack.mitre.org/techniques/T1574/006) to export variables in a shell or set variables programmatically using higher level syntax such Python's <code>os.environ</code>.\n\nOn Linux, adversaries may set <code>LD_PRELOAD</code> to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. <code>LD_PRELOAD</code> can be set via the environment variable or <code>/etc/ld.so.preload</code> file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by <code>LD_PRELOAD</code> are loaded and mapped into memory by <code>dlopen()</code> and <code>mmap()</code> respectively.(Citation: Code Injection on Linux and macOS)(Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)(Citation: Brown Exploiting Linkers) \n\nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the <code>DYLD_INSERT_LIBRARIES</code> environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) ",
    "x_mitre_platforms": [
        "Linux",
        "macOS"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_defense_bypassed": [],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1574/006",
            "external_id": "T1574.006"
        },
        {
            "source_name": "capec",
            "url": "https://capec.mitre.org/data/definitions/13.html",
            "external_id": "CAPEC-13"
        },
        {
            "source_name": "capec",
            "url": "https://capec.mitre.org/data/definitions/640.html",
            "external_id": "CAPEC-640"
        },
        {
            "source_name": "Man LD.SO",
            "description": "Kerrisk, M. (2020, June 13). Linux Programmer's Manual. Retrieved June 15, 2020.",
            "url": "https://www.man7.org/linux/man-pages/man8/ld.so.8.html"
        },
        {
            "source_name": "TLDP Shared Libraries",
            "description": "The Linux Documentation Project. (n.d.). Shared Libraries. Retrieved January 31, 2020.",
            "url": "https://www.tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html"
        },
        {
            "source_name": "Apple Doco Archive Dynamic Libraries",
            "description": "Apple Inc.. (2012, July 23). Overview of Dynamic Libraries. Retrieved March 24, 2021.",
            "url": "https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/OverviewOfDynamicLibraries.html"
        },
        {
            "source_name": "Baeldung LD_PRELOAD",
            "description": "baeldung. (2020, August 9). What Is the LD_PRELOAD Trick?. Retrieved March 24, 2021.",
            "url": "https://www.baeldung.com/linux/ld_preload-trick-what-is"
        },
        {
            "source_name": "Code Injection on Linux and macOS",
            "description": "Itamar Turner-Trauring. (2017, April 18). \u201cThis will only hurt for a moment\u201d: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017.",
            "url": "https://www.datawire.io/code-injection-on-linux-and-macos/"
        },
        {
            "source_name": "Uninformed Needle",
            "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.",
            "url": "http://hick.org/code/skape/papers/needle.txt"
        },
        {
            "source_name": "Phrack halfdead 1997",
            "description": "halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017.",
            "url": "http://phrack.org/issues/51/8.html"
        },
        {
            "source_name": "Brown Exploiting Linkers",
            "description": "Tim Brown. (2011, June 29). Breaking the links: Exploiting the linker. Retrieved March 29, 2021.",
            "url": "http://www.nth-dimension.org.uk/pub/BTL.pdf"
        },
        {
            "source_name": "TheEvilBit DYLD_INSERT_LIBRARIES",
            "description": "Fitzl, C. (2019, July 9). DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX. Retrieved March 26, 2020.",
            "url": "https://theevilbit.github.io/posts/dyld_insert_libraries_dylib_injection_in_macos_osx_deep_dive/"
        },
        {
            "source_name": "Timac DYLD_INSERT_LIBRARIES",
            "description": "Timac. (2012, December 18). Simple code injection using DYLD_INSERT_LIBRARIES. Retrieved March 26, 2020.",
            "url": "https://blog.timac.org/2012/1218-simple-code-injection-using-dyld_insert_libraries/"
        },
        {
            "source_name": "Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass",
            "description": "Jon Gabilondo. (2019, September 22). How to Inject Code into Mach-O Apps. Part II.. Retrieved March 24, 2021.",
            "url": "https://jon-gabilondo-angulo-7635.medium.com/how-to-inject-code-into-mach-o-apps-part-ii-ddb13ebc8191"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "persistence"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "privilege-escalation"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        }
    ],
    "tactic": [
        "persistence",
        "privilege-escalation",
        "defense-evasion"
    ],
    "x_mitre_detection": "Monitor for changes to environment variables and files associated with loading shared libraries such as <code>LD_PRELOAD</code> and <code>DYLD_INSERT_LIBRARIES</code>, as well as the commands to implement these changes.\n\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
    "x_mitre_data_sources": [
        "Command: Command Execution",
        "Process: Process Creation",
        "File: File Creation",
        "File: File Modification",
        "Module: Module Load"
    ],
    "x_mitre_permissions_required": [
        "User"
    ],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "Operating System Configuration",
                "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
                "type": "course-of-action",
                "id": "M1028"
            },
            {
                "name": "Execution Prevention",
                "description": "Block execution of code on a system through application control, and/or script blocking.",
                "type": "course-of-action",
                "id": "M1038"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": [
            {
                "description": "Ensure that application control solutions are implemented to identify and block potentially malicious software executed through hijacking",
                "acid": "98580869"
            }
        ]
    },
    "detectionRequirements": {
        "requirements": [
            {
                "description": "Ensure that changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD are monitored",
                "acid": "98580865"
            },
            {
                "description": "Ensure that processes are monitored for unusual activity such as a process that does not use the network begins to do so",
                "acid": "98580866"
            },
            {
                "description": "Ensure that libraries metadata, such as a hash are tracked and analyzed",
                "acid": "98580867"
            },
            {
                "description": "Ensure that libraries loaded at process execution time are compared against previous executions",
                "acid": "98580868"
            }
        ]
    },
    "cspcontrolIds": [],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": []
}
