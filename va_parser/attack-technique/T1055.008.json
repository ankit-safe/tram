{
    "id": "T1055.008",
    "name": "Ptrace System Calls",
    "x_mitre_is_subtechnique": true,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. \n\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <code>malloc</code>) then invoking that memory with <code>PTRACE_SETREGS</code> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <code>PTRACE_POKETEXT</code>/<code>PTRACE_POKEDATA</code>, which copy data to a specific address in the target processes' memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) \n\nPtrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ",
    "x_mitre_platforms": [
        "Linux"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_defense_bypassed": [
        "Anti-virus",
        "Application control"
    ],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1055/008",
            "external_id": "T1055.008"
        },
        {
            "source_name": "PTRACE man",
            "description": "Kerrisk, M. (2020, February 9). PTRACE(2) - Linux Programmer's Manual. Retrieved February 21, 2020.",
            "url": "http://man7.org/linux/man-pages/man2/ptrace.2.html"
        },
        {
            "source_name": "Medium Ptrace JUL 2018",
            "description": "Jain, S. (2018, July 25). Code injection in running process using ptrace. Retrieved February 21, 2020.",
            "url": "https://medium.com/@jain.sm/code-injection-in-running-process-using-ptrace-d3ea7191a4be"
        },
        {
            "source_name": "BH Linux Inject",
            "description": "Colgan, T. (2015, August 15). Linux-Inject. Retrieved February 21, 2020.",
            "url": "https://github.com/gaffe23/linux-inject/blob/master/slides_BHArsenal2015.pdf"
        },
        {
            "source_name": "ArtOfMemoryForensics",
            "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017."
        },
        {
            "source_name": "GNU Acct",
            "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
            "url": "https://www.gnu.org/software/acct/"
        },
        {
            "source_name": "RHEL auditd",
            "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
            "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing"
        },
        {
            "source_name": "Chokepoint preload rootkits",
            "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
            "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "privilege-escalation"
        }
    ],
    "tactic": [
        "defense-evasion",
        "privilege-escalation"
    ],
    "x_mitre_detection": "Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
    "x_mitre_data_sources": [
        "Process: Process Access",
        "Process: Process Modification",
        "Process: OS API Execution"
    ],
    "x_mitre_permissions_required": [],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "Behavior Prevention on Endpoint",
                "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
                "type": "course-of-action",
                "id": "M1040"
            },
            {
                "name": "Privileged Account Management",
                "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
                "type": "course-of-action",
                "id": "M1026"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": [
            {
                "description": "Ensure that endpoint security solutions are configured to block process injection based on common sequences of behavior that occur during the injection process.",
                "acid": "98581138"
            },
            {
                "description": "Ensure that Yama (ex: /proc/sys/kernel/yama/ptrace_scope) is utilized to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only.",
                "acid": "98581139"
            }
        ]
    },
    "detectionRequirements": {
        "requirements": [
            {
                "description": "Ensure that Linux specific calls such as the ptrace system call generating large amounts of data are monitored to detect common process injection methods.",
                "acid": "98581135"
            },
            {
                "description": "Ensure that process behavior is analyzed to identify process performing suspicious actions such as opening network connections that could relate to post-compromise behavior.",
                "acid": "98581136"
            },
            {
                "description": "Ensure that process behavior is analyzed to identify process performing suspicious actions such as reading files that could relate to post-compromise behavior.",
                "acid": "98581137"
            }
        ]
    },
    "cspcontrolIds": [
        "40000205",
        "40000499"
    ],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": []
}
