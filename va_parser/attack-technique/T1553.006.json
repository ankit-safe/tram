{
    "id": "T1553.006",
    "name": "Code Signing Policy Modification",
    "x_mitre_is_subtechnique": true,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system. \n\nSome of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.(Citation: Microsoft DSE June 2017)(Citation: Apple Disable SIP) Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.(Citation: Microsoft Unsigned Driver Apr 2017)(Citation: Apple Disable SIP)\n\nAdversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities, [Modify Registry](https://attack.mitre.org/techniques/T1112), rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP)(Citation: FireEye HIKIT Rootkit Part 2)(Citation: GitHub Turla Driver Loader) Examples of commands that can modify the code signing policy of a system include <code>bcdedit.exe -set TESTSIGNING ON</code> on Windows and <code>csrutil disable</code> on macOS.(Citation: Microsoft TESTSIGNING Feb 2021)(Citation: Apple Disable SIP) Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.(Citation: F-Secure BlackEnergy 2014)\n\nTo gain access to kernel memory to modify variables related to signature checks, such as modifying <code>g_CiOptions</code> to disable Driver Signature Enforcement, adversaries may conduct [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) using a signed, but vulnerable driver.(Citation: Unit42 AcidBox June 2020)(Citation: GitHub Turla Driver Loader)",
    "x_mitre_platforms": [
        "Windows",
        "macOS"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_defense_bypassed": [
        "User Mode Signature Validation",
        "Digital Certificate Validation",
        "Application Control"
    ],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1553/006",
            "external_id": "T1553.006"
        },
        {
            "source_name": "Apple Disable SIP",
            "description": "Apple. (n.d.). Disabling and Enabling System Integrity Protection. Retrieved April 22, 2021.",
            "url": "https://developer.apple.com/documentation/security/disabling_and_enabling_system_integrity_protection"
        },
        {
            "source_name": "F-Secure BlackEnergy 2014",
            "description": "F-Secure Labs. (2014). BlackEnergy & Quedagh: The convergence of crimeware and APT attacks. Retrieved March 24, 2016.",
            "url": "https://blog-assets.f-secure.com/wp-content/uploads/2019/10/15163408/BlackEnergy_Quedagh.pdf"
        },
        {
            "source_name": "FireEye HIKIT Rootkit Part 2",
            "description": "Glyer, C., Kazanciyan, R. (2012, August 22). The \u201cHikit\u201d Rootkit: Advanced and Persistent Attack Techniques (Part 2). Retrieved May 4, 2020.",
            "url": "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-2.html"
        },
        {
            "source_name": "Microsoft Unsigned Driver Apr 2017",
            "description": "Microsoft. (2017, April 20). Installing an Unsigned Driver during Development and Test. Retrieved April 22, 2021.",
            "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/installing-an-unsigned-driver-during-development-and-test"
        },
        {
            "source_name": "Microsoft DSE June 2017",
            "description": "Microsoft. (2017, June 1). Digital Signatures for Kernel Modules on Windows. Retrieved April 22, 2021.",
            "url": "https://docs.microsoft.com/en-us/previous-versions/windows/hardware/design/dn653559(v=vs.85)?redirectedfrom=MSDN"
        },
        {
            "source_name": "Microsoft TESTSIGNING Feb 2021",
            "description": "Microsoft. (2021, February 15). Enable Loading of Test Signed Drivers. Retrieved April 22, 2021.",
            "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/the-testsigning-boot-configuration-option"
        },
        {
            "source_name": "Unit42 AcidBox June 2020",
            "description": "Reichel, D. and Idrizovic, E. (2020, June 17). AcidBox: Rare Malware Repurposing Turla Group Exploit Targeted Russian Organizations. Retrieved March 16, 2021.",
            "url": "https://unit42.paloaltonetworks.com/acidbox-rare-malware/"
        },
        {
            "source_name": "GitHub Turla Driver Loader",
            "description": "TDL Project. (2016, February 4). TDL (Turla Driver Loader). Retrieved April 22, 2021.",
            "url": "https://github.com/hfiref0x/TDL"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        }
    ],
    "tactic": [
        "defense-evasion"
    ],
    "x_mitre_detection": "Monitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such as <code>bcdedit.exe -set TESTSIGNING ON</code>.(Citation: Microsoft TESTSIGNING Feb 2021) Consider monitoring for modifications made to Registry keys associated with code signing policies, such as <code>HKCU\\Software\\Policies\\Microsoft\\Windows NT\\Driver Signing</code>. Modifications to the code signing policy of a system are likely to be rare.",
    "x_mitre_data_sources": [
        "Windows Registry: Windows Registry Key Modification",
        "Process: Process Creation",
        "Command: Command Execution"
    ],
    "x_mitre_permissions_required": [],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "Privileged Account Management",
                "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
                "type": "course-of-action",
                "id": "M1026"
            },
            {
                "name": "Boot Integrity",
                "description": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
                "type": "course-of-action",
                "id": "M1046"
            },
            {
                "name": "Restrict Registry Permissions",
                "description": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
                "type": "course-of-action",
                "id": "M1024"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": []
    },
    "detectionRequirements": {
        "requirements": []
    },
    "cspcontrolIds": [
        "40000205",
        "40000499"
    ],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": []
}
