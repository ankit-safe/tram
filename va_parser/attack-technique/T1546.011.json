{
    "id": "T1546.011",
    "name": "Application Shimming",
    "x_mitre_is_subtechnique": true,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Elastic Process Injection July 2017)\n\nWithin the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. \n\nA list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:\n\n* <code>%WINDIR%\\AppPatch\\sysmain.sdb</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb</code>\n\nCustom databases are stored in:\n\n* <code>%WINDIR%\\AppPatch\\custom & %WINDIR%\\AppPatch\\AppPatch64\\Custom</code> and\n* <code>hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom</code>\n\nTo keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002) (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).\n\nUtilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.",
    "x_mitre_platforms": [
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_defense_bypassed": [],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1546/011",
            "external_id": "T1546.011"
        },
        {
            "source_name": "Elastic Process Injection July 2017",
            "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
            "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
        },
        {
            "source_name": "FireEye Application Shimming",
            "description": "Ballenthin, W., Tomczak, J.. (2015). The Real Shim Shary. Retrieved May 4, 2020.",
            "url": "http://files.brucon.org/2015/Tomczak_and_Ballenthin_Shims_for_the_Win.pdf"
        },
        {
            "source_name": "Black Hat 2015 App Shim",
            "description": "Pierce, Sean. (2015, November). Defending Against Malicious Application Compatibility Shims. Retrieved June 22, 2017.",
            "url": "https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "privilege-escalation"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "persistence"
        }
    ],
    "tactic": [
        "privilege-escalation",
        "persistence"
    ],
    "x_mitre_detection": "There are several public tools available that will detect shims that are currently available (Citation: Black Hat 2015 App Shim):\n\n* Shim-Process-Scanner - checks memory of every running process for any shim flags\n* Shim-Detector-Lite - detects installation of custom shim databases\n* Shim-Guard - monitors registry for any shim installations\n* ShimScanner - forensic tool to find active shims in memory\n* ShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot)\n\nMonitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.",
    "x_mitre_data_sources": [
        "Windows Registry: Windows Registry Key Modification",
        "Process: Process Creation",
        "Command: Command Execution",
        "Module: Module Load",
        "File: File Modification"
    ],
    "x_mitre_permissions_required": [
        "Administrator"
    ],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "User Account Control",
                "description": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
                "type": "course-of-action",
                "id": "M1052"
            },
            {
                "name": "Update Software",
                "description": "Perform regular software updates to mitigate exploitation risk.",
                "type": "course-of-action",
                "id": "M1051"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": [
            {
                "description": "Ensure that a patch update - KB3045645 released by Microsoft is implemented to remove the \"auto-elevate\" flag within the sdbinst.exes to prevent the use of application shimming to bypass UAC",
                "acid": "98580709"
            },
            {
                "description": "Ensure that UAC settings are changed to \"Always Notify\" to provide the user with more visibility when UAC elevation is requested",
                "acid": "98580710"
            }
        ]
    },
    "detectionRequirements": {
        "requirements": [
            {
                "description": "Ensure that process execution for sdbinst.exe is monitored for potential indications of application shim abuse",
                "acid": "98580702"
            },
            {
                "description": "Ensure that process execution for command-line arguments is monitored for potential indications of application shim abuse",
                "acid": "98580703"
            },
            {
                "description": "Ensure that Shim-Process-Scanner is configured to check the memory of every running process for any Shim flags",
                "acid": "98580704"
            },
            {
                "description": "Ensure that Shim-Detector-Lite is configured to detect the installation of custom shim databases",
                "acid": "98580705"
            },
            {
                "description": "Ensure that Shim-Guard is configured to monitor the registry for any shim installations",
                "acid": "98580706"
            },
            {
                "description": "Ensure that ShimScanner named forensic tool is configured to find active shims in memory",
                "acid": "98580707"
            },
            {
                "description": "Ensure that the Volatility plugin called ShimCacheMem is added that pulls shim cache from memory",
                "acid": "98580708"
            }
        ]
    },
    "cspcontrolIds": [
        "40000117",
        "40000521",
        "40000522"
    ],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": []
}
