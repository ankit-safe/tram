{
    "id": "T1635",
    "name": "Steal Application Access Token",
    "x_mitre_is_subtechnique": false,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering or URI hijacking and typically requires user action to grant access, such as through a system \u201cOpen With\u201d dialogue.  \n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework used to issue tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry through OAuth 2.0 using a variety of authorization protocols. An example of a commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested without requiring user credentials.",
    "x_mitre_platforms": [
        "Android",
        "iOS"
    ],
    "x_mitre_domains": [
        "mobile-attack"
    ],
    "x_mitre_defense_bypassed": [],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "external_id": "T1635",
            "url": "https://attack.mitre.org/techniques/T1635"
        },
        {
            "source_name": "Android-AppLinks",
            "url": "https://developer.android.com/training/app-links/index.html",
            "description": "Android. (n.d.). Handling App Links. Retrieved December 21, 2016."
        },
        {
            "source_name": "Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019",
            "url": "https://auth0.com/blog/why-should-use-accesstokens-to-secure-an-api/",
            "description": "Auth0. (n.d.). Why You Should Always Use Access Tokens to Secure APIs. Retrieved September 12, 2019."
        },
        {
            "source_name": "Microsoft - OAuth Code Authorization flow - June 2019",
            "url": "https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow",
            "description": "Microsoft. (n.d.). Microsoft identity platform and OAuth 2.0 authorization code flow. Retrieved September 12, 2019."
        },
        {
            "source_name": "Microsoft Identity Platform Protocols May 2019",
            "url": "https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols",
            "description": "Microsoft. (n.d.). Retrieved September 12, 2019."
        },
        {
            "source_name": "IETF-OAuthNativeApps",
            "url": "https://tools.ietf.org/html/rfc8252",
            "description": "W. Denniss and J. Bradley. (2017, October). IETF RFC 8252: OAuth 2.0 for Native Apps. Retrieved November 30, 2018."
        }
    ],
    "kill_chain_phases": [
        {
            "phase_name": "credential-access",
            "kill_chain_name": "mitre-mobile-attack"
        }
    ],
    "tactic": [
        "credential-access"
    ],
    "x_mitre_detection": "On Android, users may be presented with a popup to select the appropriate application to open a URI in. If the user sees an application they do not recognize, they can remove it. When vetting applications for potential security weaknesses, the vetting process could look for insecure use of Intents. Developers should be encouraged to use techniques to ensure that the intent can only be sent to an appropriate destination (e.g., use explicit rather than implicit intents, permission checking, checking of the destination app's signing certificate, or utilizing the App Links feature). For mobile applications using OAuth, encourage use of best practice.(Citation: IETF-OAuthNativeApps)(Citation: Android-AppLinks)",
    "x_mitre_data_sources": [],
    "x_mitre_permissions_required": [],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "Use Recent OS Version",
                "description": "New mobile operating system versions bring not only patches against discovered vulnerabilities but also often bring security architecture improvements that provide resilience against potential vulnerabilities or weaknesses that have not yet been discovered. They may also bring improvements that block use of observed adversary techniques.",
                "type": "course-of-action",
                "id": "M1006"
            },
            {
                "name": "User Guidance",
                "description": "Describes any guidance or training given to users to set particular configuration settings or avoid specific potentially risky behaviors.",
                "type": "course-of-action",
                "id": "M1011"
            },
            {
                "name": "Application Developer Guidance",
                "description": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
                "type": "course-of-action",
                "id": "M1013"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": []
    },
    "detectionRequirements": {
        "requirements": []
    },
    "cspcontrolIds": [],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": [],
    "subTechniques": [
        "T1635.001"
    ]
}
