{
    "id": "T1086",
    "name": "PowerShell",
    "x_mitre_is_subtechnique": false,
    "revoked": true,
    "x_mitre_deprecated": false,
    "description": "PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. \n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nAdministrator permissions are required to use PowerShell to connect to remote systems.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  PowerSploit, (Citation: Powersploit) and PSAttack. (Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the powershell.exe binary through interfaces to PowerShell's underlying System.Management.Automation assembly exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015) (Citation: Microsoft PSfromCsharp APR 2014)",
    "x_mitre_platforms": [
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_defense_bypassed": [],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1086",
            "external_id": "T1086"
        },
        {
            "source_name": "TechNet PowerShell",
            "description": "Microsoft. (n.d.). Windows PowerShell Scripting. Retrieved April 28, 2016.",
            "url": "https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx"
        },
        {
            "source_name": "Powersploit",
            "description": "PowerSploit. (n.d.). Retrieved December 4, 2014.",
            "url": "https://github.com/mattifestation/PowerSploit"
        },
        {
            "source_name": "Github PSAttack",
            "description": "Haight, J. (2016, April 21). PS>Attack. Retrieved June 1, 2016.",
            "url": "https://github.com/jaredhaight/PSAttack"
        },
        {
            "source_name": "Sixdub PowerPick Jan 2016",
            "description": "Warner, J.. (2015, January 6). Inexorable PowerShell \u2013 A Red Teamer\u2019s Tale of Overcoming Simple AppLocker Policies. Retrieved December 8, 2018.",
            "url": "http://www.sixdub.net/?p=367"
        },
        {
            "source_name": "SilentBreak Offensive PS Dec 2015",
            "description": "Christensen, L.. (2015, December 28). The Evolution of Offensive PowerShell Invocation. Retrieved December 8, 2018.",
            "url": "https://silentbreaksecurity.com/powershell-jobs-without-powershell-exe/"
        },
        {
            "source_name": "Microsoft PSfromCsharp APR 2014",
            "description": "Babinec, K. (2014, April 28). Executing PowerShell scripts from C#. Retrieved April 22, 2019.",
            "url": "https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/"
        },
        {
            "source_name": "Malware Archaeology PowerShell Cheat Sheet",
            "description": "Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.",
            "url": "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf"
        },
        {
            "source_name": "FireEye PowerShell Logging 2016",
            "description": "Dunwoody, M. (2016, February 11). GREATER VISIBILITY THROUGH POWERSHELL LOGGING. Retrieved February 16, 2016.",
            "url": "https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "execution"
        }
    ],
    "tactic": [
        "execution"
    ],
    "x_mitre_detection": "If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.\n\nMonitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)\n\nIt is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). (Citation: Malware Archaeology PowerShell Cheat Sheet) PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features. (Citation: FireEye PowerShell Logging 2016) An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.",
    "x_mitre_data_sources": [],
    "x_mitre_permissions_required": [
        "User",
        "Administrator"
    ],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": true,
    "relation": {
        "mitigates": [
            {
                "name": "PowerShell Mitigation",
                "description": "It may be possible to remove PowerShell from systems when not needed, but a review should be performed to assess the impact to an environment, since it could be in use for many legitimate purposes and administrative functions. When PowerShell is necessary, restrict PowerShell execution policy to administrators and to only execute signed scripts. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration. (Citation: Netspi PowerShell Execution Policy Bypass) Disable/restrict the WinRM Service to help prevent uses of PowerShell for remote execution.",
                "type": "course-of-action",
                "id": "T1086"
            },
            {
                "name": "Disable or Remove Feature or Program",
                "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
                "type": "course-of-action",
                "id": "M1042"
            },
            {
                "name": "Code Signing",
                "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
                "type": "course-of-action",
                "id": "M1045"
            },
            {
                "name": "Privileged Account Management",
                "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
                "type": "course-of-action",
                "id": "M1026"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": []
    },
    "detectionRequirements": {
        "requirements": []
    },
    "cspcontrolIds": [],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": [],
    "subTechniques": []
}
