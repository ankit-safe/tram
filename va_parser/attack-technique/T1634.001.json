{
    "id": "T1634.001",
    "name": "Keychain",
    "x_mitre_is_subtechnique": true,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may collect keychain data from an iOS device to acquire credentials. Keychains are the built-in way for iOS to keep track of users' passwords and credentials for many services and features such as Wi-Fi passwords, websites, secure notes, certificates, private keys, and VPN credentials. \n\nOn the device, the keychain database is stored outside of application sandboxes to prevent unauthorized access to the raw data. Standard iOS APIs allow applications access to their own keychain contained within the database. By utilizing a privilege escalation exploit or existing root access, adversaries can access the entire encrypted database.(Citation: Apple Keychain Services)(Citation: Elcomsoft Decrypt Keychain) ",
    "x_mitre_platforms": [
        "iOS"
    ],
    "x_mitre_domains": [
        "mobile-attack"
    ],
    "x_mitre_defense_bypassed": [],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "external_id": "T1634.001",
            "url": "https://attack.mitre.org/techniques/T1634/001"
        },
        {
            "source_name": "Apple Keychain Services",
            "url": "https://developer.apple.com/documentation/security/keychain_services",
            "description": "Apple, Inc.. (n.d.). Keychain Services. Retrieved June 24, 2020."
        },
        {
            "source_name": "Elcomsoft Decrypt Keychain",
            "url": "https://blog.elcomsoft.com/2018/12/six-ways-to-decrypt-iphone-passwords-from-the-keychain/",
            "description": "V. Katalov. (2018, December 18). Six Ways to Decrypt iPhone Passwords from the Keychain. Retrieved June 24, 2020."
        },
        {
            "url": "https://pages.nist.gov/mobile-threat-catalogue/authentication-threats/AUT-11.html",
            "source_name": "NIST Mobile Threat Catalogue",
            "external_id": "AUT-11"
        }
    ],
    "kill_chain_phases": [
        {
            "phase_name": "credential-access",
            "kill_chain_name": "mitre-mobile-attack"
        }
    ],
    "tactic": [
        "credential-access"
    ],
    "x_mitre_detection": "Mobile security products can potentially detect jailbroken devices. Application vetting services may be able to detect known privilege escalation exploits contained within applications, as well as searching application packages for strings that correlate to known password store locations.",
    "x_mitre_data_sources": [],
    "x_mitre_permissions_required": [],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "Deploy Compromised Device Detection Method",
                "description": "A variety of methods exist that can be used to enable enterprises to identify compromised (e.g. rooted/jailbroken) devices, whether using security mechanisms built directly into the device, third-party mobile security applications, enterprise mobility management (EMM)/mobile device management (MDM) capabilities, or other methods. Some methods may be trivial to evade while others may be more sophisticated.",
                "type": "course-of-action",
                "id": "M1010"
            },
            {
                "name": "Security Updates",
                "description": "Install security updates in response to discovered vulnerabilities.\n\nPurchase devices with a vendor and/or mobile carrier commitment to provide security updates in a prompt manner for a set period of time.\n\nDecommission devices that will no longer receive security updates.\n\nLimit or block access to enterprise resources from devices that have not installed recent security updates.\n\nOn Android devices, access can be controlled based on each device's security patch level. On iOS devices, access can be controlled based on the iOS version.",
                "type": "course-of-action",
                "id": "M1001"
            },
            {
                "name": "Attestation",
                "description": "Enable remote attestation capabilities when available (such as Android SafetyNet or Samsung Knox TIMA Attestation) and prohibit devices that fail the attestation from accessing enterprise resources.",
                "type": "course-of-action",
                "id": "M1002"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": []
    },
    "detectionRequirements": {
        "requirements": []
    },
    "cspcontrolIds": [],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": []
}
