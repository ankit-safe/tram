{
    "id": "T0873",
    "name": "Project File Infection",
    "x_mitre_is_subtechnique": false,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may attempt to infect project files with malicious code. These project files may consist of objects, program organization units, variables such as tags, documentation, and other configurations needed for PLC programs to function. (Citation: Beckhoff) Using built in functions of the engineering software, adversaries may be able to download an infected program to a PLC in the operating environment enabling further [[execution]] and [[persistence]] techniques. (Citation: PLCdev)  Adversaries may export their own code into project files with conditions to execute at specific intervals. (Citation: Nicolas Falliere, Liam O Murchu, Eric Chien February 2011) Malicious programs allow adversaries control of all aspects of the process enabled by the PLC. Once the project file is downloaded to a PLC the workstation device may be disconnected with the infected project file still executing. (Citation: PLCdev)",
    "x_mitre_platforms": [
        "Engineering Workstation",
        "Human-Machine Interface"
    ],
    "x_mitre_domains": [
        "ics-attack"
    ],
    "x_mitre_defense_bypassed": [],
    "external_references": [
        {
            "source_name": "mitre-ics-attack",
            "url": "https://attack.mitre.org/techniques/T0873",
            "external_id": "T0873"
        },
        {
            "source_name": "Beckhoff",
            "description": "Beckhoff   TwinCAT 3 Source Control: Project Files Retrieved. 2019/11/21 ",
            "url": "https://infosys.beckhoff.com/english.php?content=../content/1033/tc3_sourcecontrol/18014398915785483.html&id="
        },
        {
            "source_name": "PLCdev",
            "description": "PLCdev Beckhoff   TwinCAT 3 Source Control: Project Files Retrieved. 2019/11/21  Siemens SIMATIC Step 7 Programmer's Handbook Retrieved. 2019/11/21 ",
            "url": "http://www.plcdev.com/book/export/html/373"
        },
        {
            "source_name": "Nicolas Falliere, Liam O Murchu, Eric Chien February 2011",
            "description": "Nicolas Falliere, Liam O Murchu, Eric Chien 2011, February W32.Stuxnet Dossier (Version 1.4) Retrieved. 2017/09/22 ",
            "url": "https://www.wired.com/images_blogs/threatlevel/2011/02/Symantec-Stuxnet-Update-Feb-2011.pdf"
        },
        {
            "source_name": "PLCdev",
            "description": "PLCdev Nicolas Falliere, Liam O Murchu, Eric Chien 2011, February W32.Stuxnet Dossier (Version 1.4) Retrieved. 2017/09/22  Siemens SIMATIC Step 7 Programmer's Handbook Retrieved. 2019/11/21 ",
            "url": "http://www.plcdev.com/book/export/html/373"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-ics-attack",
            "phase_name": "persistence-ics"
        }
    ],
    "tactic": [
        "persistence-ics"
    ],
    "x_mitre_detection": [],
    "x_mitre_data_sources": [
        "File: File Modification"
    ],
    "x_mitre_permissions_required": [],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "Restrict File and Directory Permissions",
                "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
                "type": "course-of-action",
                "id": "M0922"
            },
            {
                "name": "Encrypt Sensitive Information",
                "description": "Protect sensitive data-at-rest with strong encryption.",
                "type": "course-of-action",
                "id": "M0941"
            },
            {
                "name": "Audit",
                "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses. Perform periodic integrity checks of the device to validate the correctness of the firmware, software, programs, and configurations. Integrity checks, which typically include cryptographic hashes or digital signatures, should be compared to those obtained at known valid states, especially after events like device reboots, program downloads, or program restarts.",
                "type": "course-of-action",
                "id": "M0947"
            },
            {
                "name": "Code Signing",
                "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
                "type": "course-of-action",
                "id": "M0945"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": []
    },
    "detectionRequirements": {
        "requirements": []
    },
    "cspcontrolIds": [],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": [],
    "subTechniques": []
}
