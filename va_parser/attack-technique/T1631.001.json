{
    "id": "T1631.001",
    "name": "Ptrace System Calls",
    "x_mitre_is_subtechnique": true,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by using `malloc`) then invoking that memory with `PTRACE_SETREGS` to set the register containing the next instruction to execute. Ptrace system call injection can also be done with `PTRACE_POKETEXT`/`PTRACE_POKEDATA`, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).(Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018)  \n\nPtrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.(Citation: BH Linux Inject)  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "x_mitre_platforms": [
        "Android",
        "iOS"
    ],
    "x_mitre_domains": [
        "mobile-attack"
    ],
    "x_mitre_defense_bypassed": [],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "external_id": "T1631.001",
            "url": "https://attack.mitre.org/techniques/T1631/001"
        },
        {
            "source_name": "PTRACE man",
            "url": "http://man7.org/linux/man-pages/man2/ptrace.2.html",
            "description": "Kerrisk, M. (2020, February 9). PTRACE(2) - Linux Programmer's Manual. Retrieved February 21, 2020."
        },
        {
            "source_name": "Medium Ptrace JUL 2018",
            "url": "https://medium.com/@jain.sm/code-injection-in-running-process-using-ptrace-d3ea7191a4be",
            "description": "Jain, S. (2018, July 25). Code injection in running process using ptrace. Retrieved February 21, 2020."
        },
        {
            "source_name": "BH Linux Inject",
            "url": "https://github.com/gaffe23/linux-inject/blob/master/slides_BHArsenal2015.pdf",
            "description": "Colgan, T. (2015, August 15). Linux-Inject. Retrieved February 21, 2020."
        }
    ],
    "kill_chain_phases": [
        {
            "phase_name": "defense-evasion",
            "kill_chain_name": "mitre-mobile-attack"
        },
        {
            "phase_name": "privilege-escalation",
            "kill_chain_name": "mitre-mobile-attack"
        }
    ],
    "tactic": [
        "defense-evasion",
        "privilege-escalation"
    ],
    "x_mitre_detection": "Application vetting services could look for misuse of dynamic libraries.",
    "x_mitre_data_sources": [],
    "x_mitre_permissions_required": [],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": []
    },
    "mitigationRequirements": {
        "requirements": []
    },
    "detectionRequirements": {
        "requirements": []
    },
    "cspcontrolIds": [],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": []
}
