{
    "id": "T1055",
    "name": "Process Injection",
    "x_mitre_is_subtechnique": false,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
    "x_mitre_platforms": [
        "Linux",
        "macOS",
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_defense_bypassed": [
        "Application control",
        "Anti-virus"
    ],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1055",
            "external_id": "T1055"
        },
        {
            "source_name": "GNU Acct",
            "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
            "url": "https://www.gnu.org/software/acct/"
        },
        {
            "source_name": "Elastic Process Injection July 2017",
            "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
            "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process"
        },
        {
            "source_name": "RHEL auditd",
            "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
            "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing"
        },
        {
            "source_name": "ArtOfMemoryForensics",
            "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017."
        },
        {
            "source_name": "Microsoft Sysmon v6 May 2017",
            "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.",
            "url": "https://docs.microsoft.com/sysinternals/downloads/sysmon"
        },
        {
            "source_name": "Chokepoint preload rootkits",
            "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
            "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html"
        },
        {
            "source_name": "capec",
            "url": "https://capec.mitre.org/data/definitions/640.html",
            "external_id": "CAPEC-640"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "privilege-escalation"
        }
    ],
    "tactic": [
        "defense-evasion",
        "privilege-escalation"
    ],
    "x_mitre_detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, <code>QueueUserAPC</code>/<code>NtQueueApcThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017) \n\nMonitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \n\nMonitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \n\nMonitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) \n\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
    "x_mitre_data_sources": [
        "Process: Process Access",
        "Process: OS API Execution",
        "Process: Process Metadata",
        "Module: Module Load",
        "File: File Metadata",
        "Process: Process Modification",
        "File: File Modification"
    ],
    "x_mitre_permissions_required": [],
    "x_mitre_effective_permissions": [],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "Privileged Account Management",
                "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
                "type": "course-of-action",
                "id": "M1026"
            },
            {
                "name": "Behavior Prevention on Endpoint",
                "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
                "type": "course-of-action",
                "id": "M1040"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": [
            {
                "description": "Ensure that endpoint security solutions are configured to block process injection based on common sequences of behavior that occur during the injection process.",
                "acid": "98581108"
            },
            {
                "description": "Ensure that Yama (ex: /proc/sys/kernel/yama/ptrace_scope) is utilized to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only.",
                "acid": "98581109"
            }
        ]
    },
    "detectionRequirements": {
        "requirements": [
            {
                "description": "Ensure that Windows API calls are monitored for malicious behaviors.",
                "acid": "98581100"
            },
            {
                "description": "Ensure that DLL/PE file events, specifically creation of the binary files are monitored for malicious behavior.",
                "acid": "98581101"
            },
            {
                "description": "Ensure that DLL/PE file events, specifically the loading of DLLs into processes are monitored for malicious behavior.",
                "acid": "98581102"
            },
            {
                "description": "Ensure that unrecognized DLLs or DLLs that are not normally loaded into a process are monitored for suspicious behavior.",
                "acid": "98581103"
            },
            {
                "description": "Ensure that Linux specific calls such as the ptrace system call generating large amounts of data are monitored to detect common process injection methods.",
                "acid": "98581104"
            },
            {
                "description": "Ensure that named pipe creation and connection events(Event IDs 17 and 18) are monitored for suspicious behavior indicating infected processes with external modules.",
                "acid": "98581105"
            },
            {
                "description": "Ensure that process behavior is analyzed to identify process performing suspicious actions such as opening network connections that could relate to post-compromise behavior.",
                "acid": "98581106"
            },
            {
                "description": "Ensure that process behavior is analyzed to identify process performing suspicious actions such as reading files that could relate to post-compromise behavior.",
                "acid": "98581107"
            }
        ]
    },
    "cspcontrolIds": [
        "40000140",
        "40000205",
        "40000497",
        "40000499",
        "40000507"
    ],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [
        "50106000"
    ],
    "technologycontrolIds": [
        "18410007"
    ],
    "cveIds": [
        "CVE-1999-0005",
        "CVE-1999-0021",
        "CVE-1999-0267",
        "CVE-1999-0404",
        "CVE-2009-3023",
        "CVE-2012-1876",
        "CVE-2013-3336",
        "CVE-2015-1641",
        "CVE-2016-0099",
        "CVE-2016-0710",
        "CVE-2016-10174",
        "CVE-2016-8377",
        "CVE-2017-0561",
        "CVE-2017-1000251",
        "CVE-2017-12718",
        "CVE-2017-17562",
        "CVE-2017-5177",
        "CVE-2017-6465",
        "CVE-2017-6506",
        "CVE-2017-7269",
        "CVE-2018-10594",
        "CVE-2018-11072",
        "CVE-2018-12464",
        "CVE-2019-11043",
        "CVE-2019-15846",
        "CVE-2019-19383",
        "CVE-2019-9978",
        "CVE-2020-11738",
        "CVE-2020-14295",
        "CVE-2020-6820"
    ],
    "subTechniques": [
        "T1055.001",
        "T1055.002",
        "T1055.003",
        "T1055.004",
        "T1055.005",
        "T1055.008",
        "T1055.009",
        "T1055.011",
        "T1055.012",
        "T1055.013",
        "T1055.014",
        "T1055.015"
    ]
}
