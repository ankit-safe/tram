{
    "id": "T1038",
    "name": "DLL Search Order Hijacking",
    "x_mitre_is_subtechnique": false,
    "revoked": true,
    "x_mitre_deprecated": false,
    "description": "Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. \n\nAdversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. \n\nAdversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.\n\nPrograms that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
    "x_mitre_platforms": [
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_defense_bypassed": [
        "Process whitelisting"
    ],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1038",
            "external_id": "T1038"
        },
        {
            "source_name": "capec",
            "url": "https://capec.mitre.org/data/definitions/471.html",
            "external_id": "CAPEC-471"
        },
        {
            "source_name": "Microsoft DLL Search",
            "description": "Microsoft. (n.d.). Dynamic-Link Library Search Order. Retrieved November 30, 2014.",
            "url": "http://msdn.microsoft.com/en-US/library/ms682586"
        },
        {
            "source_name": "OWASP Binary Planting",
            "description": "OWASP. (2013, January 30). Binary planting. Retrieved June 7, 2016.",
            "url": "https://www.owasp.org/index.php/Binary_planting"
        },
        {
            "source_name": "Microsoft 2269637",
            "description": "Microsoft. (2010, August 22). Microsoft Security Advisory 2269637 Released. Retrieved December 5, 2014.",
            "url": "https://msrc-blog.microsoft.com/2010/08/21/microsoft-security-advisory-2269637-released/"
        },
        {
            "source_name": "Microsoft DLL Redirection",
            "description": "Microsoft. (n.d.). Dynamic-Link Library Redirection. Retrieved December 5, 2014.",
            "url": "http://msdn.microsoft.com/en-US/library/ms682600"
        },
        {
            "source_name": "Microsoft Manifests",
            "description": "Microsoft. (n.d.). Manifests. Retrieved December 5, 2014.",
            "url": "https://msdn.microsoft.com/en-US/library/aa375365"
        },
        {
            "source_name": "Mandiant Search Order",
            "description": "Mandiant. (2010, August 31). DLL Search Order Hijacking Revisited. Retrieved December 5, 2014.",
            "url": "https://www.mandiant.com/blog/dll-search-order-hijacking-revisited/"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "persistence"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "privilege-escalation"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        }
    ],
    "tactic": [
        "persistence",
        "privilege-escalation",
        "defense-evasion"
    ],
    "x_mitre_detection": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.",
    "x_mitre_data_sources": [],
    "x_mitre_permissions_required": [
        "User",
        "Administrator",
        "SYSTEM"
    ],
    "x_mitre_effective_permissions": [
        "User",
        "Administrator",
        "SYSTEM"
    ],
    "x_mitre_system_requirements": [
        "Ability to add a DLL, manifest file, or .local file, directory, or junction."
    ],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "DLL Search Order Hijacking Mitigation",
                "description": "Disallow loading of remote DLLs. (Citation: Microsoft DLL Preloading) This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+. (Citation: Microsoft DLL Search) Path Algorithm\n\nEnable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. <code>%SYSTEMROOT%</code>)to be used before local directory DLLs (e.g. a user's home directory). The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode</code> (Citation: Microsoft DLL Search)\n\nUse auditing tools capable of detecting DLL search order hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for DLL hijacking weaknesses. (Citation: Powersploit)\n\nIdentify and block potentially malicious software that may be executed through search order hijacking by using whitelisting (Citation: Beechey 2010) tools like AppLocker (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) that are capable of auditing and/or blocking unknown DLLs.",
                "type": "course-of-action",
                "id": "T1038"
            },
            {
                "name": "Audit",
                "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
                "type": "course-of-action",
                "id": "M1047"
            },
            {
                "name": "Execution Prevention",
                "description": "Block execution of code on a system through application control, and/or script blocking.",
                "type": "course-of-action",
                "id": "M1038"
            },
            {
                "name": "Restrict Library Loading",
                "description": "Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.",
                "type": "course-of-action",
                "id": "M1044"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": []
    },
    "detectionRequirements": {
        "requirements": []
    },
    "cspcontrolIds": [],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": [],
    "subTechniques": []
}
