{
    "id": "T1574.005",
    "name": "Executable Installer File Permissions Weakness",
    "x_mitre_is_subtechnique": true,
    "revoked": false,
    "x_mitre_deprecated": false,
    "description": "Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.\n\nAnother variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <code>%TEMP%</code> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).\n\nAdversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to [Bypass User Account Control](https://attack.mitre.org/techniques/T1548/002). Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.",
    "x_mitre_platforms": [
        "Windows"
    ],
    "x_mitre_domains": [
        "enterprise-attack"
    ],
    "x_mitre_defense_bypassed": [],
    "external_references": [
        {
            "source_name": "mitre-attack",
            "url": "https://attack.mitre.org/techniques/T1574/005",
            "external_id": "T1574.005"
        },
        {
            "source_name": "mozilla_sec_adv_2012",
            "description": "Robert Kugler. (2012, November 20). Mozilla Foundation Security Advisory 2012-98. Retrieved March 10, 2017.",
            "url": "https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/"
        },
        {
            "source_name": "Executable Installers are Vulnerable",
            "description": "Stefan Kanthak. (2015, December 8). Executable installers are vulnerable^WEVIL (case 7): 7z*.exe allows remote code execution with escalation of privilege. Retrieved December 4, 2014.",
            "url": "https://seclists.org/fulldisclosure/2015/Dec/34"
        }
    ],
    "kill_chain_phases": [
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "persistence"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "privilege-escalation"
        },
        {
            "kill_chain_name": "mitre-attack",
            "phase_name": "defense-evasion"
        }
    ],
    "tactic": [
        "persistence",
        "privilege-escalation",
        "defense-evasion"
    ],
    "x_mitre_detection": "Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\n\nLook for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.",
    "x_mitre_data_sources": [
        "File: File Creation",
        "Process: Process Creation",
        "Service: Service Metadata",
        "File: File Modification",
        "Module: Module Load"
    ],
    "x_mitre_permissions_required": [
        "Administrator",
        "User"
    ],
    "x_mitre_effective_permissions": [
        "Administrator",
        "User",
        "SYSTEM"
    ],
    "x_mitre_system_requirements": [],
    "x_mitre_remote_support": false,
    "relation": {
        "mitigates": [
            {
                "name": "Audit",
                "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
                "type": "course-of-action",
                "id": "M1047"
            },
            {
                "name": "User Account Control",
                "description": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
                "type": "course-of-action",
                "id": "M1052"
            },
            {
                "name": "User Account Management",
                "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
                "type": "course-of-action",
                "id": "M1018"
            }
        ]
    },
    "mitigationRequirements": {
        "requirements": [
            {
                "description": "Ensure that auditing tools are deployed to detect file system permissions abuse opportunities on systems within an enterprise",
                "acid": "98580785"
            },
            {
                "description": "Ensure that the PowerSploit framework containing PowerUp modules is used to explore systems for service file system permissions weaknesses",
                "acid": "98580786"
            },
            {
                "description": "Ensure that UAC's privilege elevation is turned off for standard users to automatically deny elevation requests",
                "acid": "98580787"
            },
            {
                "description": "Ensure that installer detection for all users is enabled by adding: \"EnableInstallerDetection\"=dword:00000001",
                "acid": "98580788"
            },
            {
                "description": "Ensure that user accounts and group privileges are limited and only authorized administrators are allowed to interact with service changes and service binary target path locations",
                "acid": "98580789"
            },
            {
                "description": "Ensure that execution from user directories such as file download directories and temp directories should be denied",
                "acid": "98580790"
            }
        ]
    },
    "detectionRequirements": {
        "requirements": [
            {
                "description": "Ensure that changes to binaries and service executables occurring during software updates are monitored",
                "acid": "98580781"
            },
            {
                "description": "Ensure that an executable written, renamed, and/or moved to match an existing service executable should be monitored and correlated with other suspicious behavior",
                "acid": "98580782"
            },
            {
                "description": "Ensure that hashing of binaries and service executables are used to detect replacement against historical data",
                "acid": "98580783"
            },
            {
                "description": "Ensure that processes are monitored for unusual activity such as abnormal process call trees",
                "acid": "98580784"
            }
        ]
    },
    "cspcontrolIds": [
        "40000097",
        "40000490"
    ],
    "externalcontrolIds": [],
    "peoplecontrolIds": [],
    "policycontrolIds": [],
    "technologycontrolIds": [],
    "cveIds": []
}
